<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>·【蓝桥】·后缀表达式</title>
      <link href="/2020/10/09/%E8%93%9D%E6%A1%A5-%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/10/09/%E8%93%9D%E6%A1%A5-%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>&#x5982;&#x679C;&#x4ECE;&#x6570;&#x5B57;&#x7684;&#x6B63;&#x8D1F;&#x601D;&#x8003;&#x8BE5;&#x9898;&#x5F88;&#x5BB9;&#x6613;&#x9677;&#x5165;&#x65E0;&#x6BD4;&#x6DF7;&#x6C8C;&#x7684;&#x6DF1;&#x6E0A;~</p><a id="more"></a><blockquote><p>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="https://www.acwing.com/problem/content/description/1249/" target="_blank">&#xB7;&#x3010;&#x84DD;&#x6865;&#x3011;&#xB7;&#x540E;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;</a></p></blockquote><p><strong>&#x9898;&#x76EE;&#x5206;&#x6790;</strong></p><ul><li>M+N+1&#x4E2A;&#x6570;&#xFF0C;M+N&#x4E2A;&#x8FD0;&#x7B97;&#x7B26;&#xFF0C;&#x8FD0;&#x7B97;&#x7B26;&#x53EA;&#x6709;+&#x53F7;&#x3001;-&#x53F7;&#xFF0C;&#x6C42;&#x7ED3;&#x679C;&#x6700;&#x5927;&#x503C;<br>&#x5F53;&#x521D;&#x5929;&#x771F;&#x8BA4;&#x4E3A;&#xFF0C;+&#x53F7;&#x4ECE;&#x8F83;&#x5927;&#x7684;&#x6570;&#x5230;&#x8F83;&#x5C0F;&#x7684;&#x5F00;&#x59CB;&#x8FD0;&#x7B97;&#xFF0C;-&#x53F7;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x5F00;&#x59CB;&#x8FD0;&#x7B97;&#xFF0C;&#x5373;&#x662F;&#x6700;&#x5927;&#x503C;</li><li>&#x4F46;&#x5BF9;&#x4E8E; <code>4 1 -3 -4</code>&#x6709;&#x8FD0;&#x7B97;&#x7B26;<code>+ + -</code>&#xFF0C;&#x6309;&#x8FD9;&#x4E48;&#x7B97;&#x662F;<code>4+1+(-3)-(-4) = 6</code><br>&#x7136;&#x800C; <code>4-(-3+-4)+1 = 12</code>&#xFF0C;&#x5373;-&#x53F7;&#x7684;&#x5B58;&#x5728;&#x53EF;&#x5C06;+&#x53F7;&#x53D8;&#x4E3A;-&#x53F7;</li><li>&#x53D1;&#x73B0;&#x5F53;-&#x53F7;&#x5B58;&#x5728;&#x65F6;&#xFF0C;&#x62C6;&#x6389;&#x62EC;&#x53F7;&#x540E;&#x53EF;&#x5C06;&#x8FD0;&#x7B97;&#x7B26;&#x90FD;&#x53D8;&#x4E3A;-&#x53F7;&#xFF08;&#x82E5;&#x8003;&#x8651;&#x6570;&#x5B57;&#x7684;&#x6B63;&#x3001;&#x8D1F;&#xFF0C;&#x5BB9;&#x6613;&#x8BEF;&#x5165;&#x74F6;&#x9888;&#xFF0C;&#x8D8A;&#x9677;&#x8D8A;&#x6DF1;&#xFF09;</li></ul><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong></p><ol><li>M == 0<br>&#x5168;&#x4E3A;+&#x53F7;&#xFF0C;&#x8F93;&#x5165;&#x7684;&#x6570;&#x7D2F;&#x52A0;&#x5373;&#x53EF;</li><li>M &gt; 0<br> &#x5B58;&#x5728;-&#x53F7;&#xFF0C;&#x53EF;&#x6784;&#x5EFA;&#x5982; <code>b - (a+c-d)</code>&#xFF1B;<code>b - (a-d)+c</code>;<code>b-(a+c)-d</code>&#xFF0C;&#x6700;&#x540E;&#x62C6;&#x6389;&#x62EC;&#x53F7;&#x540E;&#xFF0C;-&#x53F7;&#x7684;&#x8303;&#x56F4;&#x5747;&#x5728;[1, M+N]&#xFF08;M&gt;0&#x65F6;&#xFF0C;&#x8BE5;&#x7ED3;&#x8BBA;&#x90FD;&#x6210;&#x7ACB;&#xFF09;;<br> &#x5373;&#x62C6;&#x6389;&#x62EC;&#x53F7;&#x540E;&#xFF0C;<code>b - a</code>&#x4E00;&#x5B9A;&#x5B58;&#x5728;&#xFF0C;&#x540E;&#x9762;&#x7684;+&#x3001;-&#x53F7;&#x53EF;&#x4EE5;&#x4EFB;&#x610F;&#x5206;&#x914D;&#xFF1B;<br> &#x8D2A;&#x5FC3;&#x7684;&#x601D;&#x60F3;&#xFF1A;<br> &#x4E3A;&#x786E;&#x4FDD;&#x7ED3;&#x679C;&#x6700;&#x5927;&#xFF0C;&#x904D;&#x5386;M+N+1&#x4E2A;&#x6570;&#xFF0C;&#x521D;&#x59CB;&#x5316;ans = 0&#xFF0C;ans&#x5148;&#x52A0;&#x4E0A;&#x6700;&#x5927;&#x7684;&#x6570;&#xFF0C;ans&#x518D;&#x51CF;&#x53BB;&#x6700;&#x5C0F;&#x7684;&#x6570;&#xFF0C;&#x5269;&#x4E0B;&#x7684;&#x82E5;&#x8BE5;&#x6570;&#x4E3A;&#x6B63;&#x6570;&#xFF0C;&#x7D2F;&#x52A0;&#xFF1B;&#x82E5;&#x4E3A;&#x8D1F;&#x6570;&#xFF0C;&#x52A0;&#x4E0A;&#x5176;&#x7EDD;&#x5BF9;&#x503C;</li></ol><p>***&#x6CE8;&#xFF1A;</p><p>&#x6C42;&#x6574;&#x4E2A;&#x5E8F;&#x5217;&#x6C42;&#x6700;&#x5927;&#x503C;&#x3001;&#x6700;&#x5C0F;&#x503C;&#xFF0C;&#x6392;&#x5E8F;&#x540E;&#x4EE3;&#x7801;&#x91CF;&#x4F1A;&#x5C11;&#x4E9B;&#xFF0C;&#x4F46;&#x5C31;&#x662F;&#x8981;&#x575A;&#x6301;O(N)&#xFF01;</p><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10 10</span></span><br><span class="line"><span class="comment">88 0 67 80 63 40 14 72 46 65 18 46 -84 32 89 83 28 66 31 32 -18</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1062</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> t, n, m;</span><br><span class="line">ll a[<span class="number">200005</span>];</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">t = m + n + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">int</span> min_val = INF, min_ind, max_val = -INF, max_ind; </span><br><span class="line"><span class="keyword">if</span>(m == <span class="number">0</span>){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i){</span><br><span class="line">ans += a[i];</span><br><span class="line">}</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i){</span><br><span class="line"><span class="keyword">if</span>(a[i] &lt; min_val){</span><br><span class="line">min_val = a[i];</span><br><span class="line">min_ind = i; </span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt; max_val){</span><br><span class="line">max_val = a[i];</span><br><span class="line">max_ind = i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i){</span><br><span class="line"><span class="keyword">if</span>(i == min_ind){</span><br><span class="line">ans -= min_val;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(i == max_ind){</span><br><span class="line">ans += a[i];</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">ans += <span class="built_in">abs</span>(a[i]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥-垒骰子</title>
      <link href="/2020/09/26/%E8%93%9D%E6%A1%A5-%E5%9E%92%E9%AA%B0%E5%AD%90/"/>
      <url>/2020/09/26/%E8%93%9D%E6%A1%A5-%E5%9E%92%E9%AA%B0%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>&#x84DD;&#x6865;&#x676F;&#x771F;&#x9898;&#x4E2D;&#x4E00;&#x9053;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x597D;&#x9898;&#x76EE;~</p><a id="more"></a><blockquote><p>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="https://www.acwing.com/problem/content/description/1219/" target="_blank">&#xB7;&#x3010;&#x84DD;&#x6865;&#x3011;&#xB7;&#x5792;&#x9AB0;&#x5B50;</a></p></blockquote><blockquote><p>&#x9898;&#x76EE;&#x63CF;&#x8FF0;<br>&#x5792;&#x9AB0;&#x5B50;<br>&#x8D4C;&#x5723;atm&#x665A;&#x5E74;&#x8FF7;&#x604B;&#x4E0A;&#x4E86;&#x5792;&#x9AB0;&#x5B50;&#xFF0C;&#x5C31;&#x662F;&#x628A;&#x9AB0;&#x5B50;&#x4E00;&#x4E2A;&#x5792;&#x5728;&#x53E6;&#x4E00;&#x4E2A;&#x4E0A;&#x8FB9;&#xFF0C;&#x4E0D;&#x80FD;&#x6B6A;&#x6B6A;&#x626D;&#x626D;&#xFF0C;&#x8981;&#x5792;&#x6210;&#x65B9;&#x67F1;&#x4F53;&#x3002;<br>&#x7ECF;&#x8FC7;&#x957F;&#x671F;&#x89C2;&#x5BDF;&#xFF0C;atm &#x53D1;&#x73B0;&#x4E86;&#x7A33;&#x5B9A;&#x9AB0;&#x5B50;&#x7684;&#x5965;&#x79D8;&#xFF1A;&#x6709;&#x4E9B;&#x6570;&#x5B57;&#x7684;&#x9762;&#x8D34;&#x7740;&#x4F1A;&#x4E92;&#x76F8;&#x6392;&#x65A5;&#xFF01;<br>&#x6211;&#x4EEC;&#x5148;&#x6765;&#x89C4;&#x8303;&#x4E00;&#x4E0B;&#x9AB0;&#x5B50;&#xFF1A;1 &#x7684;&#x5BF9;&#x9762;&#x662F; 4&#xFF0C;2 &#x7684;&#x5BF9;&#x9762;&#x662F; 5&#xFF0C;3 &#x7684;&#x5BF9;&#x9762;&#x662F; 6&#x3002;<br>&#x5047;&#x8BBE;&#x6709; m &#x7EC4;&#x4E92;&#x65A5;&#x73B0;&#x8C61;&#xFF0C;&#x6BCF;&#x7EC4;&#x4E2D;&#x7684;&#x90A3;&#x4E24;&#x4E2A;&#x6570;&#x5B57;&#x7684;&#x9762;&#x7D27;&#x8D34;&#x5728;&#x4E00;&#x8D77;&#xFF0C;&#x9AB0;&#x5B50;&#x5C31;&#x4E0D;&#x80FD;&#x7A33;&#x5B9A;&#x7684;&#x5792;&#x8D77;&#x6765;&#x3002;<br>atm&#x60F3;&#x8BA1;&#x7B97;&#x4E00;&#x4E0B;&#x6709;&#x591A;&#x5C11;&#x79CD;&#x4E0D;&#x540C;&#x7684;&#x53EF;&#x80FD;&#x7684;&#x5792;&#x9AB0;&#x5B50;&#x65B9;&#x5F0F;&#x3002;<br>&#x4E24;&#x79CD;&#x5792;&#x9AB0;&#x5B50;&#x65B9;&#x5F0F;&#x76F8;&#x540C;&#xFF0C;&#x5F53;&#x4E14;&#x4EC5;&#x5F53;&#x8FD9;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#x4E2D;&#x5BF9;&#x5E94;&#x9AD8;&#x5EA6;&#x7684;&#x9AB0;&#x5B50;&#x7684;&#x5BF9;&#x5E94;&#x6570;&#x5B57;&#x7684;&#x671D;&#x5411;&#x90FD;&#x76F8;&#x540C;&#x3002;<br>&#x7531;&#x4E8E;&#x65B9;&#x6848;&#x6570;&#x53EF;&#x80FD;&#x8FC7;&#x591A;&#xFF0C;&#x8BF7;&#x8F93;&#x51FA;&#x6A21; 10^9 + 7 &#x7684;&#x7ED3;&#x679C;&#x3002;<br>&#x4E0D;&#x8981;&#x5C0F;&#x770B;&#x4E86; atm &#x7684;&#x9AB0;&#x5B50;&#x6570;&#x91CF;&#x54E6;&#xFF5E;<br>&#x300C;&#x8F93;&#x5165;&#x683C;&#x5F0F;&#x300D;<br>&#x7B2C;&#x4E00;&#x884C;&#x4E24;&#x4E2A;&#x6574;&#x6570; n m<br>n&#x8868;&#x793A;&#x9AB0;&#x5B50;&#x6570;&#x76EE;<br>&#x63A5;&#x4E0B;&#x6765; m &#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x4E24;&#x4E2A;&#x6574;&#x6570; a b &#xFF0C;&#x8868;&#x793A; a &#x548C; b &#x6570;&#x5B57;&#x4E0D;&#x80FD;&#x7D27;&#x8D34;&#x5728;&#x4E00;&#x8D77;&#x3002;<br>&#x300C;&#x8F93;&#x51FA;&#x683C;&#x5F0F;&#x300D;<br>&#x4E00;&#x884C;&#x4E00;&#x4E2A;&#x6570;&#xFF0C;&#x8868;&#x793A;&#x7B54;&#x6848;&#x6A21; 10^9 + 7 &#x7684;&#x7ED3;&#x679C;&#x3002;<br>&#x300C;&#x6837;&#x4F8B;&#x8F93;&#x5165;&#x300D;<br>2 1<br>1 2<br>&#x300C;&#x6837;&#x4F8B;&#x8F93;&#x51FA;&#x300D;<br>544<br>&#x300C;&#x6570;&#x636E;&#x8303;&#x56F4;&#x300D;<br>&#x5BF9;&#x4E8E; 30% &#x7684;&#x6570;&#x636E;&#xFF1A;n &lt;= 5<br>&#x5BF9;&#x4E8E; 60% &#x7684;&#x6570;&#x636E;&#xFF1A;n &lt;= 100<br>&#x5BF9;&#x4E8E; 100% &#x7684;&#x6570;&#x636E;&#xFF1A;0 &lt; n &lt;= 10^9, m &lt;= 36</p></blockquote><p><strong>&#x9898;&#x76EE;&#x63CF;&#x8FF0;</strong></p><ol><li>&#x5C06;n&#x4E2A;&#x9AB0;&#x5B50;&#x5792;&#x8D77;&#x6765;&#xFF0C;&#x5176;&#x4E2D;&#x6709;m&#x7EC4;&#x4E92;&#x65A5;&#x60C5;&#x51B5;&#xFF0C;&#x6C42;&#x5792;&#x9AB0;&#x5B50;&#x7684;&#x65B9;&#x5F0F;&#x6709;&#x591A;&#x5C11;&#x79CD;</li><li>&#x7531;&#x8F93;&#x5165;&#x6837;&#x4F8B;&#x53EF;&#x77E5;&#xFF0C;544 = 4* 4<em>&#xFF08;6+6+6+6+5+5&#xFF09;&#xFF1B;<br>&#x5373;1&#x3001;2&#x4E92;&#x65A5;&#xFF0C;&#x4EE5;1&#x548C;2&#x671D;&#x5411;&#x7684;&#x6570;&#x5B57;&#x90FD;&#x6709;5&#x4E2A;&#xFF0C;&#x53E6;&#x5916;&#x6BCF;&#x4E2A;&#x9AB0;&#x5B50;&#x90FD;&#x53EF;&#x4EE5;&#x56DB;&#x4E2A;&#x65B9;&#x5411;&#x6C34;&#x5E73;&#x65CB;&#x8F6C;&#xFF0C;&#x4E24;&#x4E2A;&#x9AB0;&#x5B50;&#x4FBF;&#x662F;4</em> 4</li><li>&#x63A8;&#x5E7F;&#x5230;n&#x4E2A;&#x9AB0;&#x5B50;&#xFF0C;&#x65CB;&#x8F6C;&#x53EF;&#x4EE5;&#x5355;&#x72EC;&#x8BA1;&#x7B97;&#xFF0C;&#x5373; 4^n&#xFF1B;<br>&#x53D1;&#x73B0;&#x6BCF;&#x4E00;&#x5C42;&#x4E0D;&#x540C;&#x6570;&#x5B57;&#x671D;&#x5411;&#x7684;&#x6570;&#x5B57;&#x4E2A;&#x6570;&#x53D6;&#x51B3;&#x4E8E;&#x4E0A;&#x4E00;&#x5C42;&#xFF0C;&#x5982;&#x8F93;&#x5165;&#x6837;&#x4F8B;&#x62D3;&#x5C55;&#x5230;&#x7B2C;&#x4E09;&#x5C42;&#xFF0C;<br>1&#x671D;&#x5411;&#x6570;&#x5B57;&#x4E2A;&#x6570; = 6+6+6+5+5&#xFF08;&#x4E0A;&#x4E00;&#x5C42;&#x7684;2&#x4E92;&#x65A5;&#xFF0C;2&#x7684;&#x5BF9;&#x9762;&#x662F;5&#xFF09;&#x3001;<br>2&#x671D;&#x5411;&#x7684;&#x6570;&#x5B57;&#x4E2A;&#x6570; = 6+6+6+5+5&#xFF08;&#x4E0A;&#x4E00;&#x5C42;&#x7684;1&#x4E92;&#x65A5;&#xFF0C;1&#x7684;&#x5BF9;&#x9762;&#x662F;6&#xFF09;&#x3001;<br>3&#x671D;&#x5411;&#x7684;&#x6570;&#x5B57;&#x4E2A;&#x6570; = 6+6+6+6+5+5</li></ol><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong></p><ul><li>&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x601D;&#x60F3;&#x5B55;&#x80B2;&#x800C;&#x751F;&#xFF1A;<br>&#x2460;&#x91CD;&#x53E0;&#x5B50;&#x95EE;&#x9898;&#xFF1A;&#x6BCF;&#x4E00;&#x5C42;&#x4E0D;&#x540C;&#x6570;&#x5B57;&#x7684;&#x671D;&#x5411;&#x7684;&#x6570;&#x5B57;&#x4E2A;&#x6570;&#x7531;&#x4E0A;&#x4E00;&#x5C42;&#x51B3;&#x5B9A;<br>&#x2461;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#xFF1A;&#x4ECE;&#x7B2C;1&#x5C42;&#x63A8;&#x5BFC;&#x5230;&#x7B2C;n&#x5C42;&#xFF0C;&#x5C40;&#x90E8;&#x6700;&#x4F18;&#x53EF;&#x6784;&#x9020;&#x5168;&#x5C40;&#x6700;&#x4F18;</li><li>dp[i][j]&#x8868;&#x793A;&#x524D;i&#x5C42;&#x6570;&#x5B57;j&#x671D;&#x5411;&#x7684;&#x6570;&#x5B57;&#x4E2A;&#x6570;;<br>op[]&#x8BB0;&#x5F55;&#x9AB0;&#x5B50;&#x4E2D;&#x6570;&#x5B57;&#x7684;&#x5BF9;&#x9762;&#xFF1B;<br>confict[][]&#x8BB0;&#x5F55;&#x4E92;&#x65A5;&#x7684;&#x60C5;&#x51B5;&#xFF0C;true&#x8868;&#x793A;&#x4E92;&#x65A5;<br>$$dp[i][j] = \sum_{k=1}^{6}{dp[i-1][k]}(&#x524D;&#x63D0;&#xFF1A;confict[op[j]][k]!=true)$$</li><li>&#x6570;&#x7EC4;&#x5927;&#x5C0F;&#x9700;&#x8981;dp[n][7]&#xFF0C;&#x8003;&#x8651;&#x6BCF;&#x4E00;&#x5C42;&#x662F;&#x7531;&#x4E0A;&#x4E00;&#x5C42;&#x9012;&#x63A8;&#x800C;&#x6765;&#xFF0C;&#x7A7A;&#x95F4;&#x53EF;&#x8282;&#x7701;&#x5230;dp[2][7]</li></ul><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">dp[i][j] = &#x6C42;&#x548C;dp[i-1][j](j = 1,2,3,4,56)</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> op[<span class="number">7</span>], dp[<span class="number">2</span>][<span class="number">7</span>];<span class="comment">//&#x5BF9;&#x9762;&#x7684;&#x6570;&#x5B57;&#x8BA1;&#x5165;&#x6570;&#x7EC4;op[], dp&#x9012;&#x63A8;&#x5F0F; </span></span><br><span class="line"><span class="keyword">bool</span> confict[<span class="number">7</span>][<span class="number">7</span>]; <span class="comment">//&#x8BB0;&#x5F55;&#x4E92;&#x65A5;&#x72B6;&#x6001; </span></span><br><span class="line"><span class="function">ll <span class="title">pow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span></span>{<span class="comment">//&#x6C42;x^n </span></span><br><span class="line">ll ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n){</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">ans = ans*x%MOD;</span><br><span class="line">x = x*x%MOD;</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>{<span class="comment">//&#x521D;&#x59CB;&#x5316;</span></span><br><span class="line">op[<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">op[<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">op[<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line">op[<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line">op[<span class="number">3</span>] = <span class="number">6</span>;</span><br><span class="line">op[<span class="number">6</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; ++i){</span><br><span class="line">dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">init();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i){</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">confict[x][y] = <span class="literal">true</span>;</span><br><span class="line">confict[y][x] = <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> lev = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i){</span><br><span class="line">lev = <span class="number">1</span> - lev;<span class="comment">//0&#x53D8;&#x4E3A;1&#xFF0C;1&#x53D8;&#x4E3A;0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">6</span>; ++j){</span><br><span class="line">dp[lev][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">6</span>; ++k){</span><br><span class="line"><span class="keyword">if</span>(confict[op[j]][k])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">dp[lev][j] = (dp[lev][j] + dp[<span class="number">1</span>-lev][k]) % MOD;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//cout &lt;&lt; dp[lev][j] &lt;&lt; &quot; &quot;;</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">}</span><br><span class="line">ll sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; sum &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; ++i){</span><br><span class="line">sum = (sum+dp[lev][i]) % MOD;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, sum*<span class="built_in">pow</span>(<span class="number">4</span>, n)%MOD);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 蓝桥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>·【蓝桥】·移动距离</title>
      <link href="/2020/09/26/%E8%93%9D%E6%A1%A5-%E7%A7%BB%E5%8A%A8%E8%B7%9D%E7%A6%BB/"/>
      <url>/2020/09/26/%E8%93%9D%E6%A1%A5-%E7%A7%BB%E5%8A%A8%E8%B7%9D%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<p>&#x867D;&#x7136;&#x79F0;&#x7684;&#x4E0A;&#x662F;&#x4E00;&#x9053;&#x666E;&#x666E;&#x901A;&#x901A;&#x7684;&#x6C34;&#x9898;&#xFF0C;&#x4F46;&#x4E5F;&#x8981;&#x770B;&#x5F97;&#x8D77;&#x4EBA;&#x5BB6;&#xFF0C;&#x8BA4;&#x771F;&#x5BF9;&#x5F85;&#x5427;~</p><blockquote><p>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="https://www.acwing.com/problem/content/1221/" target="_blank">&#xB7;&#x3010;&#x84DD;&#x6865;&#x3011;&#xB7;&#x79FB;&#x52A8;&#x8DDD;&#x79BB;</a></p></blockquote><a id="more"></a><blockquote><p>&#x9898;&#x76EE;&#x63CF;&#x8FF0;<br>&#x79FB;&#x52A8;&#x8DDD;&#x79BB;<br>X&#x661F;&#x7403;&#x5C45;&#x6C11;&#x5C0F;&#x533A;&#x7684;&#x697C;&#x623F;&#x5168;&#x662F;&#x4E00;&#x6837;&#x7684;&#xFF0C;&#x5E76;&#x4E14;&#x6309;&#x77E9;&#x9635;&#x6837;&#x5F0F;&#x6392;&#x5217;&#x3002;&#x5176;&#x697C;&#x623F;&#x7684;&#x7F16;&#x53F7;&#x4E3A;1,2,3&#x2026;<br>&#x5F53;&#x6392;&#x6EE1;&#x4E00;&#x884C;&#x65F6;&#xFF0C;&#x4ECE;&#x4E0B;&#x4E00;&#x884C;&#x76F8;&#x90BB;&#x7684;&#x697C;&#x5F80;&#x53CD;&#x65B9;&#x5411;&#x6392;&#x53F7;&#x3002;<br>&#x6BD4;&#x5982;&#xFF1A;&#x5F53;&#x5C0F;&#x533A;&#x6392;&#x53F7;&#x5BBD;&#x5EA6;&#x4E3A;6&#x65F6;&#xFF0C;&#x5F00;&#x59CB;&#x60C5;&#x5F62;&#x5982;&#x4E0B;&#xFF1A;<br>1  2  3  4  5  6<br>12 11 10 9  8  7<br>13 14 15 &#x2026;..<br>&#x6211;&#x4EEC;&#x7684;&#x95EE;&#x9898;&#x662F;&#xFF1A;&#x5DF2;&#x77E5;&#x4E86;&#x4E24;&#x4E2A;&#x697C;&#x53F7;m&#x548C;n&#xFF0C;&#x9700;&#x8981;&#x6C42;&#x51FA;&#x5B83;&#x4EEC;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x77ED;&#x79FB;&#x52A8;&#x8DDD;&#x79BB;&#xFF08;&#x4E0D;&#x80FD;&#x659C;&#x7EBF;&#x65B9;&#x5411;&#x79FB;&#x52A8;&#xFF09;<br>&#x8F93;&#x5165;&#x4E3A;3&#x4E2A;&#x6574;&#x6570;w m n&#xFF0C;&#x7A7A;&#x683C;&#x5206;&#x5F00;&#xFF0C;&#x90FD;&#x5728;1&#x5230;10000&#x8303;&#x56F4;&#x5185;<br>w&#x4E3A;&#x6392;&#x53F7;&#x5BBD;&#x5EA6;&#xFF0C;m,n&#x4E3A;&#x5F85;&#x8BA1;&#x7B97;&#x7684;&#x697C;&#x53F7;&#x3002;<br>&#x8981;&#x6C42;&#x8F93;&#x51FA;&#x4E00;&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x8868;&#x793A;m n &#x4E24;&#x697C;&#x95F4;&#x6700;&#x77ED;&#x79FB;&#x52A8;&#x8DDD;&#x79BB;&#x3002;<br>&#x4F8B;&#x5982;&#xFF1A;<br>&#x7528;&#x6237;&#x8F93;&#x5165;&#xFF1A;<br>6 8 2<br>&#x5219;&#xFF0C;&#x7A0B;&#x5E8F;&#x5E94;&#x8BE5;&#x8F93;&#x51FA;&#xFF1A;<br>4<br>&#x518D;&#x4F8B;&#x5982;&#xFF1A;<br>&#x7528;&#x6237;&#x8F93;&#x5165;&#xFF1A;<br>4 7 20<br>&#x5219;&#xFF0C;&#x7A0B;&#x5E8F;&#x5E94;&#x8BE5;&#x8F93;&#x51FA;&#xFF1A;<br>5</p></blockquote><p><strong>&#x9898;&#x76EE;&#x5206;&#x6790;</strong></p><ul><li>&#x4ECE;1&#x5F00;&#x59CB;&#xFF0C;&#x5217;&#x6570;&#x4E3A;n&#x7684;&#x77E9;&#x9635;&#x5C31;&#x8FD9;&#x4E48;&#x4E00;&#x76F4;&#x6392;&#x4E0B;&#x53BB;&#xFF0C;&#x5947;&#x6570;&#x884C;&#x987A;&#x5E8F;&#xFF0C;&#x5076;&#x6570;&#x884C;&#x9006;&#x5E8F;&#xFF1B;<br>&#x6C42;&#x67D0;&#x4E24;&#x4E2A;&#x6570;m&#x3001;n&#x7684;&#x8DDD;&#x79BB;&#xFF0C;&#x663E;&#x7136;&#x8DDD;&#x79BB; = &#x884C;&#x8DDD;+&#x5217;&#x8DDD;&#xFF1B;</li><li>&#x95EE;&#x9898;&#x8F6C;&#x5316;&#x4E3A;&#x5BF9;&#x4EFB;&#x4E00;&#x4E2A;&#x6570;x&#xFF0C;&#x6C42;&#x6240;&#x5728;&#x884C;&#x3001;&#x5217;&#x5373;&#x53EF;</li><li>&#x884C;&#xFF1A;x / n<br>&#x5217;&#xFF1A;&#x5947;&#x6570;&#x884C; &#x2014;&#x2014;&#x2014;&#x2014; x%n&#xFF1B;&#x5076;&#x6570;&#x884C; &#x2014;&#x2014;&#x2014;&#x2014; n+1-x%n</li><li>&#x7136;&#x540E;&#x884C;&#x8DDD;&#x5C31;&#x662F;&#x76F8;&#x5E94;&#x7684;&#x884C;&#x76F8;&#x51CF;&#x53D6;&#x7EDD;&#x5BF9;&#x503C;&#xFF0C;&#x5217;&#x8DDD;&#x5C31;&#x662F;&#x76F8;&#x5E94;&#x7684;&#x5217;&#x76F8;&#x51CF;&#x53D6;&#x7EDD;&#x5BF9;&#x503C;</li></ul><p>***&#x6CE8;&#xFF1A;<br>&#x6570;&#x5B57;&#x5982;&#x679C;&#x4ECE;0&#x5F00;&#x59CB;&#x6392;&#xFF0C;&#x8FD9;&#x4E48;&#x505A;&#x6CA1;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x672C;&#x9898;&#x662F;&#x628A;1&#x4F5C;&#x4E3A;&#x7B2C;&#x4E00;&#x9879;&#xFF0C;&#x90A3;&#x600E;&#x4E48;&#x529E;&#xFF1F;<br>&#x90FD;&#x51CF;&#x4E2A;1&#x5C31;&#x884C;&#x4E86;&#xFF0C;&#x56E0;&#x4E3A;&#x6700;&#x540E;&#x8981;&#x505A;&#x51CF;&#x6CD5;&#xFF0C;&#x6240;&#x4EE5; x / n &#x4E0D;&#x7528;&#x6539;&#xFF0C;&#x5176;&#x4ED6;&#x7684;&#x5C0F;&#x4FEE;&#x5C0F;&#x6539;&#x5373;&#x53EF;</p><p>==&#x5BF9;&#x4E8E;&#x6C34;&#x9898;&#x5C31;&#x8981;&#x5FEB;&#x901F;AC&#xFF01;==<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(x/n%<span class="number">2</span> == <span class="number">0</span>){</span><br><span class="line">x %= n;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">x = n<span class="number">-1</span>-x%n;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> s, e, ans;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s &gt;&gt; e;</span><br><span class="line">s--; e--;</span><br><span class="line">ans += <span class="built_in">abs</span>(s/n - e/n);;</span><br><span class="line">ans += <span class="built_in">abs</span>(solve(s) - solve(e));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥-牌型种数</title>
      <link href="/2020/09/20/%E8%93%9D%E6%A1%A5-%E7%89%8C%E5%9E%8B%E7%A7%8D%E6%95%B0/"/>
      <url>/2020/09/20/%E8%93%9D%E6%A1%A5-%E7%89%8C%E5%9E%8B%E7%A7%8D%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>&#x4E00;&#x9053;&#x7EDD;&#x5999;&#x7684;&#x9012;&#x5F52;&#x9898;&#x76EE;&#xFF0C;&#x770B;&#x5B8C;&#x7B54;&#x6848;&#x540E;&#x7684;&#x7B2C;&#x4E00;&#x611F;&#x53D7;&#x662F;&#xFF0C;&#x4F60;&#x6839;&#x672C;&#x4E0D;&#x61C2;&#x9012;&#x5F52;&#xFF01;<br>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="http://oj.ecustacm.cn/problem.php?id=1253" target="_blank">&#xB7;&#x3010;&#x84DD;&#x6865;&#x3011;&#xB7;&#x724C;&#x578B;&#x79CD;&#x6570;</a></p><a id="more"></a><blockquote><p>&#x9898;&#x76EE;&#x63CF;&#x8FF0;<br>&#x724C;&#x578B;&#x79CD;&#x6570;<br>&#x5C0F;&#x660E;&#x88AB;&#x52AB;&#x6301;&#x5230;X&#x8D4C;&#x57CE;&#xFF0C;&#x88AB;&#x8FEB;&#x4E0E;&#x5176;&#x4ED6;3&#x4EBA;&#x73A9;&#x724C;&#x3002;<br>&#x4E00;&#x526F;&#x6251;&#x514B;&#x724C;&#xFF08;&#x53BB;&#x6389;&#x5927;&#x5C0F;&#x738B;&#x724C;&#xFF0C;&#x5171;52&#x5F20;&#xFF09;&#xFF0C;&#x5747;&#x5300;&#x53D1;&#x7ED9;4&#x4E2A;&#x4EBA;&#xFF0C;&#x6BCF;&#x4E2A;&#x4EBA;13&#x5F20;&#x3002;<br>&#x8FD9;&#x65F6;&#xFF0C;&#x5C0F;&#x660E;&#x8111;&#x5B50;&#x91CC;&#x7A81;&#x7136;&#x5192;&#x51FA;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF1A;<br>&#x5982;&#x679C;&#x4E0D;&#x8003;&#x8651;&#x82B1;&#x8272;&#xFF0C;&#x53EA;&#x8003;&#x8651;&#x70B9;&#x6570;&#xFF0C;&#x4E5F;&#x4E0D;&#x8003;&#x8651;&#x81EA;&#x5DF1;&#x5F97;&#x5230;&#x7684;&#x724C;&#x7684;&#x5148;&#x540E;&#x987A;&#x5E8F;&#xFF0C;&#x81EA;&#x5DF1;&#x624B;&#x91CC;&#x80FD;&#x62FF;&#x5230;&#x7684;&#x521D;&#x59CB;&#x724C;&#x578B;&#x7EC4;&#x5408;&#x4E00;&#x5171;&#x6709;&#x591A;&#x5C11;&#x79CD;&#x5462;&#xFF1F;<br>&#x8BF7;&#x586B;&#x5199;&#x8BE5;&#x6574;&#x6570;&#xFF0C;&#x4E0D;&#x8981;&#x586B;&#x5199;&#x4EFB;&#x4F55;&#x591A;&#x4F59;&#x7684;&#x5185;&#x5BB9;&#x6216;&#x8BF4;&#x660E;&#x6587;&#x5B57;&#x3002;</p></blockquote><p><strong>&#x9898;&#x76EE;&#x5206;&#x6790;</strong></p><ul><li>&#x9898;&#x610F;&#x5F88;&#x7B80;&#x5355;&#xFF0C;52&#x5F20;&#x53D6;13&#x5F20;&#xFF0C;&#x53EA;&#x8003;&#x8651;&#x6570;&#x5B57;&#xFF0C;&#x6709;&#x591A;&#x5C11;&#x79CD;&#x7EC4;&#x5408;</li><li>&#x5982;&#x679C;&#x6784;&#x5EFA;&#x4E00;&#x9897;Dfs&#x7684;&#x6811;&#xFF0C;&#x53D6;13&#x6B21;&#xFF0C;&#x6DF1;&#x5EA6;&#x5C31;&#x662F;13&#xFF0C;&#x5BF9;&#x4E8E;&#x6BCF;&#x5C42;&#x7684;&#x62BD;&#x724C;&#xFF0C;&#x5982;&#x4F55;&#x7B5B;&#x9009;&#xFF0C;&#x6210;&#x4E3A;&#x4E86;&#x89E3;&#x9898;&#x7684;&#x5173;&#x952E;</li></ul><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong></p><ul><li>&#x6362;&#x4E00;&#x79CD;&#x601D;&#x8DEF;&#xFF0C;52&#x5F20;&#x724C;&#x53EF;&#x5206;&#x4E3A;13&#x79CD;&#xFF0C;&#x6BCF;&#x79CD;&#x6700;&#x591A;&#x53EF;&#x9009;&#x7684;&#x6B21;&#x6570;&#x4E3A;4</li><li>&#x53EA;&#x9700;&#x5C06;13&#x79CD;&#x724C;&#x5206;&#x914D;&#x5B8C;&#x5373;&#x53EF;&#xFF08;&#x8FD9;&#x6837;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#x540C;&#x6837;&#x4E3A;13&#xFF09;&#xFF0C;&#x6BCF;&#x79CD;&#x724C;&#x6240;&#x5206;&#x914D;&#x7684;&#x9009;&#x62E9;&#x4E3A;0&#x3001;1&#x3001;2&#x3001;3&#x3001;4</li><li>&#x4E8E;&#x662F;&#x5728;&#x9012;&#x5F52;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;k&#xFF08;k&#x2264;13&#xFF09;&#x63A7;&#x5236;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#xFF1B;<br>cnt&#xFF08;cnt&#x2264;13&#xFF09;&#x63A7;&#x5236;&#x6240;&#x9009;&#x7684;&#x724C;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x6BCF;&#x4E00;&#x5C42;&#x9012;&#x5F52;cnt&#x53EF;&#x589E;&#x52A0;&#x7684;&#x9009;&#x62E9;&#x4E3A;0&#x3001;1&#x3001;2&#x3001;3&#x3001;4</li></ul><p>==&#x9012;&#x5F52;&#x5927;&#x6CD5;&#x597D;&#xFF01;==<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x8D8A;&#x662F;&#x7F8E;&#x5999;&#x7684;&#x7B97;&#x6CD5;&#x4EE3;&#x7801;&#x91CF;&#x8D8A;&#x5C0F;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> cnt)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(k&gt;<span class="number">13</span> || cnt&gt;<span class="number">13</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">13</span> &amp;&amp; cnt==<span class="number">13</span>){</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i){</span><br><span class="line">        dfs(k+<span class="number">1</span>, cnt+i);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>·【蓝桥】·剪邮票</title>
      <link href="/2020/09/16/%E8%93%9D%E6%A1%A5-%E5%89%AA%E9%82%AE%E7%A5%A8/"/>
      <url>/2020/09/16/%E8%93%9D%E6%A1%A5-%E5%89%AA%E9%82%AE%E7%A5%A8/</url>
      
        <content type="html"><![CDATA[<p>&#x4E00;&#x9053;Dfs+Dfs&#x7684;&#x597D;&#x9898;&#x76EE;~</p><a id="more"></a><p>[TOC]</p><blockquote><p>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="http://oj.ecustacm.cn/problem.php?id=1286" target="_blank">&#xB7;&#x3010;&#x84DD;&#x6865;&#x3011;&#xB7;&#x526A;&#x90AE;&#x7968;</a><br>&#x6D89;&#x53CA;&#x5230;&#x6709;&#x56FE;&#x7247;&#x5C31;&#x4E0D;&#x8D34;&#x9898;&#x76EE;&#x4E86;</p></blockquote><p><strong>&#x9898;&#x76EE;&#x5206;&#x6790;</strong><br>3*4&#x7684;&#x77E9;&#x9635;&#xFF0C;&#x968F;&#x610F;&#x9009;&#x53D6;5&#x4E2A;&#x65B9;&#x683C;&#xFF0C;&#x8981;&#x6C42;&#x65B9;&#x683C;&#x662F;&#x76F8;&#x8FDE;&#x7740;&#x7684;</p><h3 id="&#x7B97;&#x6CD5;&#x5206;&#x6790;"><a href="#&#x7B97;&#x6CD5;&#x5206;&#x6790;" class="headerlink" title="&#x7B97;&#x6CD5;&#x5206;&#x6790;"></a>&#x7B97;&#x6CD5;&#x5206;&#x6790;</h3><ol><li><p>&#x5F88;&#x96BE;&#x5728;&#x4E8C;&#x7EF4;&#x6570;&#x7EC4;&#x4E2D;&#x679A;&#x4E3E;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x679A;&#x4E3E;&#x4E00;&#x7EF4;&#x6570;&#x7EC4;a[12]&#xFF0C;&#x518D;&#x5C06;&#x5176;&#x8F6C;&#x4E3A;&#x4E8C;&#x7EF4;&#x7684;<br>&#x6240;&#x4EE5;&#x7B2C;&#x4E00;&#x5C42;Dfs&#xFF0C;&#x5168;&#x6392;&#x5217;&#x6570;&#x7EC4;<code>a[]={0,0,0,0,0,0,0,1,1,1,1,1}</code></p></li><li><p>&#x6570;&#x7EC4;a[] &#x4E2D;1&#x8868;&#x793A;&#x9009;&#x53D6;&#x7684;&#x65B9;&#x683C;&#xFF0C;&#x90A3;&#x4E48;&#x63A5;&#x4E0B;&#x6765;&#x53EA;&#x9700;&#x5C06;&#x5168;&#x6392;&#x5217;&#x7684;a[]&#x5347;&#x4E3A;&#x4E8C;&#x7EF4;&#xFF0C;&#x5224;&#x65AD;&#x662F;&#x5426;&#x76F8;&#x8FDE;&#x5373;&#x53EF;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&#x4E00;&#x7EF4;&#x5347;&#x4E8C;&#x7EF4;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j){</span><br><span class="line"><span class="keyword">if</span>(a[i*<span class="number">4</span>+j] == <span class="number">1</span>)</span><br><span class="line">g[i][j] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">g[i][j] = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>&#x5224;&#x65AD;&#x77E9;&#x9635;&#x4E2D;&#x76F8;&#x8FDE;&#x65B9;&#x683C;&#x7684;&#x7EC4;&#x6570;&#xFF0C;&#x53C8;&#x662F;&#x4E00;&#x5C42;&#x7ECF;&#x5178;&#x7684;Dfs&#xFF0C;&#x8FD9;&#x91CC;&#x8981;&#x6C42;&#x76F8;&#x8FDE;&#x7684;&#x65B9;&#x683C;&#x4EC5;1&#x7EC4;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&#x7B2C;&#x4E8C;&#x5C42;Dfs&#x5224;&#x65AD;&#x662F;&#x5426;&#x76F8;&#x8FDE;</span></span><br><span class="line"><span class="keyword">int</span> dx[] = {<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>};</span><br><span class="line"><span class="keyword">int</span> dy[] = {<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>};</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> g[<span class="number">3</span>][<span class="number">4</span>], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>{</span><br><span class="line">g[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k){</span><br><span class="line"><span class="keyword">int</span> tx = i + dx[k];</span><br><span class="line"><span class="keyword">int</span> ty = j + dy[k];</span><br><span class="line"><span class="keyword">if</span>(tx&gt;=<span class="number">0</span> &amp;&amp; ty&gt;=<span class="number">0</span> &amp;&amp; tx&lt;<span class="number">3</span> &amp;&amp; ty&lt;<span class="number">4</span> &amp;&amp; g[tx][ty]==<span class="number">1</span>)</span><br><span class="line">dfs(g, tx, ty);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//check()&#x4E2D;&#x5185;&#x5BB9;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> g[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j){</span><br><span class="line"><span class="keyword">if</span>(a[i*<span class="number">4</span>+j] == <span class="number">1</span>)</span><br><span class="line">g[i][j] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">g[i][j] = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j){</span><br><span class="line"><span class="keyword">if</span>(g[i][j] == <span class="number">1</span>){</span><br><span class="line">dfs(g, i, j);</span><br><span class="line">cnt++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> cnt == <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ol><p>***&#x6CE8;&#x610F;&#xFF1A;&#x6570;&#x7EC4;a[]&#x7684;&#x5168;&#x6392;&#x5217;&#x8981;&#x6C42;&#x53BB;&#x91CD;&#xFF0C;&#x6211;&#x7684;&#x53E6;&#x4E00;&#x7BC7;&#x535A;&#x5BA2;&#x4E13;&#x95E8;&#x6709;&#x5168;&#x6392;&#x5217;&#x53BB;&#x91CD;<a href="https://www.weayer.top/2020/09/12/%E5%85%A8%E6%8E%92%E5%88%97/" blank="_target"></a><br>&#x603B;&#x7ED3;&#x4E00;&#x4E0B;&#x6709;&#x4E09;&#x79CD;&#x53BB;&#x91CD;&#x5199;&#x6CD5;&#xFF1A;<br>1&#x3001;C++&#x7684;next_permutation<br>2&#x3001;&#x57FA;&#x4E8E;&#x65B0;&#x6570;&#x7EC4;&#x7684;&#x5168;&#x6392;&#x5217;<br>3&#x3001;&#x539F;&#x6570;&#x7EC4;&#x4E0A;&#x8FDB;&#x884C;&#x7684;&#x5168;&#x6392;&#x5217; </p><h3 id="1&#x3001;C-&#x7684;next-permutation"><a href="#1&#x3001;C-&#x7684;next-permutation" class="headerlink" title="1&#x3001;C++&#x7684;next_permutation"></a>1&#x3001;C++&#x7684;next_permutation</h3><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;1&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[] = {<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>};</span><br><span class="line"><span class="keyword">int</span> dx[] = {<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>};</span><br><span class="line"><span class="keyword">int</span> dy[] = {<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>}; </span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> g[<span class="number">3</span>][<span class="number">4</span>], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>{</span><br><span class="line">g[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k){</span><br><span class="line"><span class="keyword">int</span> tx = i + dx[k];</span><br><span class="line"><span class="keyword">int</span> ty = j + dy[k];</span><br><span class="line"><span class="keyword">if</span>(tx&gt;=<span class="number">0</span> &amp;&amp; ty&gt;=<span class="number">0</span> &amp;&amp; tx&lt;<span class="number">3</span> &amp;&amp; ty&lt;<span class="number">4</span> &amp;&amp; g[tx][ty]==<span class="number">1</span>)</span><br><span class="line">dfs(g, tx, ty);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> g[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j){</span><br><span class="line"><span class="keyword">if</span>(a[i*<span class="number">4</span>+j] == <span class="number">1</span>)</span><br><span class="line">g[i][j] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">g[i][j] = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j){</span><br><span class="line"><span class="keyword">if</span>(g[i][j] == <span class="number">1</span>){</span><br><span class="line">dfs(g, i, j);</span><br><span class="line">cnt++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> cnt == <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> k)</span></span>{</span><br><span class="line"><span class="keyword">do</span>{</span><br><span class="line"><span class="keyword">if</span>(check())</span><br><span class="line">ans++;</span><br><span class="line">}<span class="keyword">while</span>(next_permutation(a, a+<span class="number">12</span>));</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">solve(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="2&#x3001;&#x57FA;&#x4E8E;&#x65B0;&#x6570;&#x7EC4;&#x7684;&#x5168;&#x6392;&#x5217;"><a href="#2&#x3001;&#x57FA;&#x4E8E;&#x65B0;&#x6570;&#x7EC4;&#x7684;&#x5168;&#x6392;&#x5217;" class="headerlink" title="2&#x3001;&#x57FA;&#x4E8E;&#x65B0;&#x6570;&#x7EC4;&#x7684;&#x5168;&#x6392;&#x5217;"></a>2&#x3001;&#x57FA;&#x4E8E;&#x65B0;&#x6570;&#x7EC4;&#x7684;&#x5168;&#x6392;&#x5217;</h3><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;2&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&#x4EC5;solve()&#x4E0E;&#x4E0A;&#x9762;&#x4EE3;&#x7801;&#x4E0D;&#x540C;</span></span><br><span class="line"><span class="keyword">int</span> v[<span class="number">12</span>], b[<span class="number">12</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> k)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">12</span>){</span><br><span class="line"><span class="keyword">if</span>(check()){</span><br><span class="line">ans++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i){</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; a[i<span class="number">-1</span>]==a[i] &amp;&amp; !v[i<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(!v[i]){</span><br><span class="line">v[i] = <span class="number">1</span>;</span><br><span class="line">b[k] = a[i];</span><br><span class="line">solve(k+<span class="number">1</span>);</span><br><span class="line">v[i] = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="3&#x3001;&#x539F;&#x6570;&#x7EC4;&#x4E0A;&#x8FDB;&#x884C;&#x7684;&#x5168;&#x6392;&#x5217;"><a href="#3&#x3001;&#x539F;&#x6570;&#x7EC4;&#x4E0A;&#x8FDB;&#x884C;&#x7684;&#x5168;&#x6392;&#x5217;" class="headerlink" title="3&#x3001;&#x539F;&#x6570;&#x7EC4;&#x4E0A;&#x8FDB;&#x884C;&#x7684;&#x5168;&#x6392;&#x5217;"></a>3&#x3001;&#x539F;&#x6570;&#x7EC4;&#x4E0A;&#x8FDB;&#x884C;&#x7684;&#x5168;&#x6392;&#x5217;</h3><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;3&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&#x6D89;&#x53CA;&#x5230;set&#x53BB;&#x91CD;&#x4EE3;&#x7801;&#x91CF;&#x5C31;&#x66F4;&#x5927;&#x4E86;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[] = {<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>};</span><br><span class="line"><span class="keyword">int</span> dx[] = {<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>};</span><br><span class="line"><span class="keyword">int</span> dy[] = {<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>}; </span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; s;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_string</span><span class="params">(<span class="built_in">string</span> &amp;str)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i){</span><br><span class="line">str.insert(str.end(), a[i]+<span class="string">&apos;0&apos;</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isExist</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line">to_string(str);</span><br><span class="line"><span class="keyword">if</span>(s.find(str) == s.end()){</span><br><span class="line">s.insert(str);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> g[<span class="number">3</span>][<span class="number">4</span>], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>{</span><br><span class="line">g[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k){</span><br><span class="line"><span class="keyword">int</span> tx = i + dx[k];</span><br><span class="line"><span class="keyword">int</span> ty = j + dy[k];</span><br><span class="line"><span class="keyword">if</span>(tx&gt;=<span class="number">0</span> &amp;&amp; ty&gt;=<span class="number">0</span> &amp;&amp; tx&lt;<span class="number">3</span> &amp;&amp; ty&lt;<span class="number">4</span> &amp;&amp; g[tx][ty]==<span class="number">1</span>)</span><br><span class="line">dfs(g, tx, ty);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> g[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j){</span><br><span class="line"><span class="keyword">if</span>(a[i*<span class="number">4</span>+j] == <span class="number">1</span>)</span><br><span class="line">g[i][j] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">g[i][j] = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j){</span><br><span class="line"><span class="keyword">if</span>(g[i][j] == <span class="number">1</span>){</span><br><span class="line">dfs(g, i, j);</span><br><span class="line">cnt++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> cnt == <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> k)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">12</span>){</span><br><span class="line"><span class="keyword">if</span>(!isExist() &amp;&amp; check()){</span><br><span class="line">ans++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt; <span class="number">12</span>; ++i){</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> t = a[i];</span><br><span class="line">a[i] = a[k];</span><br><span class="line">a[k] = t;</span><br><span class="line">}</span><br><span class="line">solve(k+<span class="number">1</span>);</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> t = a[i];</span><br><span class="line">a[i] = a[k];</span><br><span class="line">a[k] = t;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">solve(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> 蓝桥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>·【蓝桥】·交换瓶子</title>
      <link href="/2020/09/16/%E8%93%9D%E6%A1%A5-%E4%BA%A4%E6%8D%A2%E7%93%B6%E5%AD%90/"/>
      <url>/2020/09/16/%E8%93%9D%E6%A1%A5-%E4%BA%A4%E6%8D%A2%E7%93%B6%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>&#x8FD9;&#x662F;&#x4E00;&#x9053;&#x7EC6;&#x8BFB;&#x9898;&#x76EE;&#x5C31;&#x80FD;&#x505A;&#x51FA;&#x6765;&#x7684;&#x771F;&#x9898;~</p><a id="more"></a><blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;:<a href="https://www.acwing.com/problem/content/description/1226/" target="_blank">&#x4EA4;&#x6362;&#x74F6;&#x5B50;</a></p></blockquote><ul><li>&#x611F;&#x8C22;&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#xFF1A;<a href="https://www.acwing.com/solution/content/7917/" target="_blank">AcWing 1224. &#x4EA4;&#x6362;&#x74F6;&#x5B50;</a></li></ul><blockquote><p>&#x9898;&#x76EE;&#x63CF;&#x8FF0;<br>&#x4EA4;&#x6362;&#x74F6;&#x5B50;<br>&#x6709;N&#x4E2A;&#x74F6;&#x5B50;&#xFF0C;&#x7F16;&#x53F7; 1 ~ N&#xFF0C;&#x653E;&#x5728;&#x67B6;&#x5B50;&#x4E0A;&#x3002;<br>&#x6BD4;&#x5982;&#x6709;5&#x4E2A;&#x74F6;&#x5B50;&#xFF1A;<br>2 1 3 5 4<br>&#x8981;&#x6C42;&#x6BCF;&#x6B21;&#x62FF;&#x8D77;2&#x4E2A;&#x74F6;&#x5B50;&#xFF0C;&#x4EA4;&#x6362;&#x5B83;&#x4EEC;&#x7684;&#x4F4D;&#x7F6E;&#x3002;<br>&#x7ECF;&#x8FC7;&#x82E5;&#x5E72;&#x6B21;&#x540E;&#xFF0C;&#x4F7F;&#x5F97;&#x74F6;&#x5B50;&#x7684;&#x5E8F;&#x53F7;&#x4E3A;&#xFF1A;<br>1 2 3 4 5<br>&#x5BF9;&#x4E8E;&#x8FD9;&#x4E48;&#x7B80;&#x5355;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x663E;&#x7136;&#xFF0C;&#x81F3;&#x5C11;&#x9700;&#x8981;&#x4EA4;&#x6362;2&#x6B21;&#x5C31;&#x53EF;&#x4EE5;&#x590D;&#x4F4D;&#x3002;<br>&#x5982;&#x679C;&#x74F6;&#x5B50;&#x66F4;&#x591A;&#x5462;&#xFF1F;&#x4F60;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x7F16;&#x7A0B;&#x6765;&#x89E3;&#x51B3;&#x3002;<br>&#x8F93;&#x5165;&#x683C;&#x5F0F;&#x4E3A;&#x4E24;&#x884C;&#xFF1A;<br>&#x7B2C;&#x4E00;&#x884C;: &#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#xFF08;N&lt;10000&#xFF09;, &#x8868;&#x793A;&#x74F6;&#x5B50;&#x7684;&#x6570;&#x76EE;<br>&#x7B2C;&#x4E8C;&#x884C;&#xFF1A;N&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;&#xFF0C;&#x8868;&#x793A;&#x74F6;&#x5B50;&#x76EE;&#x524D;&#x7684;&#x6392;&#x5217;&#x60C5;&#x51B5;&#x3002;<br>&#x8F93;&#x51FA;&#x6570;&#x636E;&#x4E3A;&#x4E00;&#x884C;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x8868;&#x793A;&#x81F3;&#x5C11;&#x4EA4;&#x6362;&#x591A;&#x5C11;&#x6B21;&#xFF0C;&#x624D;&#x80FD;&#x5B8C;&#x6210;&#x6392;&#x5E8F;&#x3002;<br>&#x4F8B;&#x5982;&#xFF0C;&#x8F93;&#x5165;&#xFF1A;<br>5<br>3 1 2 5 4<br>&#x7A0B;&#x5E8F;&#x5E94;&#x8BE5;&#x8F93;&#x51FA;&#xFF1A;<br>3<br>&#x518D;&#x4F8B;&#x5982;&#xFF0C;&#x8F93;&#x5165;&#xFF1A;<br>5<br>5 4 3 2 1<br>&#x7A0B;&#x5E8F;&#x5E94;&#x8BE5;&#x8F93;&#x51FA;&#xFF1A;<br>2</p></blockquote><p><strong>&#x9898;&#x76EE;&#x5206;&#x6790;</strong><br>&#x7279;&#x522B;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#x4E71;&#x5E8F;&#x7684;&#x6570;&#x5747;&#x4E3A;1<del>n&#x7684;&#x6392;&#x5217;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8981;&#x4F7F;1</del>n&#x7684;&#x6392;&#x5217;&#x6709;&#x5E8F;<br>&#x5982;&#xFF1A;3 1 2 5 4<br>&#x6700;&#x7EC8;&#x7ED3;&#x679C;&#xFF1A;1 2 3 4 5</p><h3 id="O-n-2-&#x7684;&#x5E38;&#x89C4;&#x89E3;&#x6CD5;"><a href="#O-n-2-&#x7684;&#x5E38;&#x89C4;&#x89E3;&#x6CD5;" class="headerlink" title="O(n^2)&#x7684;&#x5E38;&#x89C4;&#x89E3;&#x6CD5;"></a>O(n^2)&#x7684;&#x5E38;&#x89C4;&#x89E3;&#x6CD5;</h3><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5F88;&#x5BB9;&#x6613;&#x60F3;&#x5230;&#x904D;&#x5386;&#x6570;&#x7EC4;a[]&#x7684;&#x540C;&#x65F6;&#xFF0C;&#x5982;&#x679C; <code>a[i]!=i</code>,&#x5C31;&#x53BB;&#x627E;<code>a[j]==a[i]</code>&#xFF0C;&#x7136;&#x540E;<code>change(a[i],a[j])</code><br>&#x6BCF;&#x6B21;&#x51FA;&#x73B0;<code>a[i]!=i</code>&#xFF0C;&#x4FBF;&#x8BB0;&#x4E00;&#x6B21;<code>ans++</code>&#xFF0C;&#x6700;&#x540E;&#x5F97;&#x5230;<code>ans</code>&#x5373;&#x2018;&#x6700;&#x5C11;&#x4EA4;&#x6362;&#x6B21;&#x6570;&#x2019;</p><ul><li>&#x8BE5;&#x7B97;&#x6CD5;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;O(N^2)</li></ul><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#xB7;AC&#xB7;900ms&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, ans = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">index</span><span class="params">(<span class="keyword">int</span> x)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i){</span><br><span class="line"><span class="keyword">if</span>(a[i] == x)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>{</span><br><span class="line"><span class="keyword">int</span> tmp = a[i];</span><br><span class="line">a[i] = a[j];</span><br><span class="line">a[j] = tmp;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i){</span><br><span class="line"><span class="keyword">if</span>(a[i] != i){</span><br><span class="line">ans++;</span><br><span class="line">change(i, index(i));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="O-n-&#x7684;&#x7EDD;&#x5999;&#x89E3;&#x6CD5;"><a href="#O-n-&#x7684;&#x7EDD;&#x5999;&#x89E3;&#x6CD5;" class="headerlink" title="O(n)&#x7684;&#x7EDD;&#x5999;&#x89E3;&#x6CD5;"></a>O(n)&#x7684;&#x7EDD;&#x5999;&#x89E3;&#x6CD5;</h3><p>&#x5982; 3 1 2 5 4<br>&#x6700;&#x7EC8;&#x7ED3;&#x679C; 1 2 3 4 5<br>&#x201C;&#x9519;&#x4F4D;&#x201D;&#x7684;&#x5143;&#x7D20;&#x53EF;&#x6784;&#x6210;&#x5982;&#x4E0B;2&#x4E2A;&#x96C6;&#x5408;<br>[1 2 3]&#x3001;[4 5]<br>a[1]=3,a[2]=1,a[3]=2; a[4]=5,a[5]=4;</p><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x904D;&#x5386;a[]&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4FBF;&#x53EF;&#x4EE5;&#x501F;&#x52A9;&#x4E0B;&#x6807;&#xFF0C;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x626B;&#x63CF;&#x5230;&#x6574;&#x4E2A;&#x96C6;&#x5408;<br>&#x5982; 3 1 2 4 5<br>&#x901A;&#x8FC7;a[1]=3&#x53EF;&#x5148;&#x540E;&#x626B;&#x63CF;&#x5230;a[3],a[2];<br>&#x901A;&#x8FC7;a[4]=5&#x53EF;&#x626B;&#x63CF;&#x5230;a[5]<br>&#x626B;&#x63CF;&#x7684;&#x6B21;&#x6570;<code>ans</code>&#x5373;&#x201C;&#x9519;&#x4F4D;&#x201D;&#x96C6;&#x5408;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x90A3;&#x4E48;&#x2018;&#x6700;&#x5C11;&#x4EA4;&#x6362;&#x6B21;&#x6570;&#x2019;&#x5373;<code>n-ans</code></p><ul><li>&#x56E0;&#x4E3A;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x4EC5;&#x626B;&#x63CF;&#x4E00;&#x6B21;&#xFF0C;&#x76F2;&#x731C;&#x8BE5;&#x7B97;&#x6CD5;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;O(N)</li></ul><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#xB7;AC&#xB7;25ms&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&#x7CBE;&#x5999;&#x7684;&#x7B97;&#x6CD5;&#x5F80;&#x5F80;&#x7B80;&#x6D01;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, ans = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> st[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i){</span><br><span class="line"><span class="keyword">if</span>(!st[i]){</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; !st[j]; j=a[j]){</span><br><span class="line">st[j] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n-ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全排列（去重和不去重）</title>
      <link href="/2020/09/12/%E5%85%A8%E6%8E%92%E5%88%97/"/>
      <url>/2020/09/12/%E5%85%A8%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>&#x8981;&#x6C42;&#x5BF9;&#x6570;&#x7EC4;a[] = {1, 2, 3, 4, 4}&#x8FDB;&#x884C;&#x5168;&#x6392;&#x5217;&#xFF08;&#x53BB;&#x91CD;&#x548C;&#x4E0D;&#x53BB;&#x91CD;&#xFF09;&#x3002;<br>&#x8FD9;&#x91CC;&#x63D0;&#x4F9B;&#x4E09;&#x79CD;&#x4EE3;&#x7801;&#x3002;</p><a id="more"></a><p>[TOC]</p><h3 id="C-&#x7684;next-permutation"><a href="#C-&#x7684;next-permutation" class="headerlink" title="C++&#x7684;next_permutation"></a>C++&#x7684;next_permutation</h3><p><code>&lt;algorithm&gt;</code>&#x4E2D;&#x7684;next_permutation&#x53EF;&#x5B9E;&#x73B0;&#x53BB;&#x91CD;&#x7684;&#x5168;&#x6392;&#x5217;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">do</span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i){</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}<span class="keyword">while</span>(next_permutation(a, a+n));</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x57FA;&#x4E8E;&#x65B0;&#x6570;&#x7EC4;&#x7684;&#x5168;&#x6392;&#x5217;"><a href="#&#x57FA;&#x4E8E;&#x65B0;&#x6570;&#x7EC4;&#x7684;&#x5168;&#x6392;&#x5217;" class="headerlink" title="&#x57FA;&#x4E8E;&#x65B0;&#x6570;&#x7EC4;&#x7684;&#x5168;&#x6392;&#x5217;"></a>&#x57FA;&#x4E8E;&#x65B0;&#x6570;&#x7EC4;&#x7684;&#x5168;&#x6392;&#x5217;</h3><p>&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x6570;&#x7EC4;b[]&#xFF0C;&#x5728; b[]&#x4E0A;&#x8FDB;&#x884C; a[]&#x7684;&#x5168;&#x6392;&#x5217;&#xFF0C;&#x8FD9;&#x91CC;&#x5C31;&#x662F;&#x6700;&#x539F;&#x59CB;&#x7684;Dfs&#x4E86;&#xFF1B;<br>v[]&#x6807;&#x8BB0;&#x5DF2;&#x7ECF;&#x6392;&#x5217;&#x8FC7;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x907F;&#x514D;&#x518D;&#x6B21;&#x6392;&#x5217;&#xFF0C;ans&#x8BB0;&#x5F55;&#x5168;&#x6392;&#x5217;&#x6B21;&#x6570;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(k == n){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i){</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i){</span><br><span class="line">        <span class="comment">//&#x4E00;&#x884C;&#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#x53BB;&#x91CD;</span></span><br><span class="line"><span class="keyword">if</span>(!v[i]){</span><br><span class="line">v[i] = <span class="number">1</span>;</span><br><span class="line">b[k] = a[i];</span><br><span class="line">dfs(k+<span class="number">1</span>);</span><br><span class="line">v[i] = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x8FD9;&#x6837;&#x7684;Dfs&#x4E0D;&#x80FD;&#x5B9E;&#x73B0;&#x53BB;&#x91CD;&#xFF0C;&#x5982;[1 2 3 4 4]&#x4F1A;&#x5728;&#x5168;&#x6392;&#x5217;&#x4E2D;&#x51FA;&#x73B0;&#x4E24;&#x6B21;&#xFF1B;<br>&#x6FC0;&#x52A8;&#x4EBA;&#x5FC3;&#x65F6;&#x523B;&#x6765;&#x4E34;&#xFF01;&#x53BB;&#x91CD;&#x53EA;&#x9700;&#x6DFB;&#x52A0;&#x4E00;&#x884C;&#x4EE3;&#x7801;&#xFF0C;&#x5373;&#x5728;&#x4E0A;&#x9762;&#x6CE8;&#x91CA;&#x4F4D;&#x7F6E;&#x6DFB;&#x52A0;&#xFF1A;<br><code>if(i&gt;0 &amp;&amp; a[i]==a[i-1] &amp;&amp; !v[i-1]) continue;</code></p><h3 id="&#x539F;&#x6570;&#x7EC4;&#x4E0A;&#x8FDB;&#x884C;&#x7684;&#x5168;&#x6392;&#x5217;"><a href="#&#x539F;&#x6570;&#x7EC4;&#x4E0A;&#x8FDB;&#x884C;&#x7684;&#x5168;&#x6392;&#x5217;" class="headerlink" title="&#x539F;&#x6570;&#x7EC4;&#x4E0A;&#x8FDB;&#x884C;&#x7684;&#x5168;&#x6392;&#x5217;"></a>&#x539F;&#x6570;&#x7EC4;&#x4E0A;&#x8FDB;&#x884C;&#x7684;&#x5168;&#x6392;&#x5217;</h3><p>&#x65B9;&#x6CD5;&#x5F88;&#x5DE7;&#x5999;&#xFF0C;&#x53EA;&#x5728;&#x6570;&#x7EC4;a[]&#x4E0A;&#x901A;&#x8FC7;&#x4EA4;&#x6362;&#x4F4D;&#x7F6E;&#x5B9E;&#x73B0;&#x7684;&#x5168;&#x6392;&#x5217;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(k == n){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i){</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">ans++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt; n; ++i){</span><br><span class="line">{<span class="keyword">int</span> t = a[i];</span><br><span class="line">a[i] = a[k];</span><br><span class="line">a[k] = t;</span><br><span class="line">}</span><br><span class="line">dfs(k+<span class="number">1</span>);</span><br><span class="line">{<span class="keyword">int</span> t = a[i];</span><br><span class="line">a[i] = a[k];</span><br><span class="line">a[k] = t;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x6CA1;&#x6709;&#x65B0;&#x6570;&#x7EC4;&#x7684;&#x521B;&#x5EFA;&#xFF0C;&#x663E;&#x7136;&#x8FD9;&#x6837;&#x4E0D;&#x80FD;&#x5B9E;&#x73B0;&#x53BB;&#x91CD;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x53BB;&#x91CD;&#x8FD8;&#x8981;&#x501F;&#x52A9;set<br>&#x53CD;&#x6B63;&#x54B1;&#x4E5F;&#x4E0D;&#x95F2;&#x9EBB;&#x70E6;&#xFF0C;&#x6700;&#x540E;&#x5BF9;a[]&#x8FDB;&#x884C;&#x4E00;&#x4E0B;&#x53BB;&#x91CD;&#x5427;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; s;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_string</span><span class="params">(<span class="built_in">string</span> &amp;str)</span></span>{<span class="comment">//&#x6570;&#x7EC4;a[]&#x8F6C;&#x6362;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;str</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i){</span><br><span class="line">str.insert(str.end(), a[i]+<span class="string">&apos;0&apos;</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isExist</span><span class="params">()</span></span>{<span class="comment">//&#x8FD4;&#x56DE;true&#x8868;&#x793A;&#x6709;&#x91CD;&#x590D;</span></span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line">to_string(str);</span><br><span class="line"><span class="keyword">if</span>(s.find(str) == s.end()){</span><br><span class="line">s.insert(str);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数学知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>商汤AI园区的n个路口（简单）</title>
      <link href="/2020/09/01/%E5%95%86%E6%B1%A4AI%E5%9B%AD%E5%8C%BA%E7%9A%84n%E4%B8%AA%E8%B7%AF%E5%8F%A3%EF%BC%88%E7%AE%80%E5%8D%95%EF%BC%89/"/>
      <url>/2020/09/01/%E5%95%86%E6%B1%A4AI%E5%9B%AD%E5%8C%BA%E7%9A%84n%E4%B8%AA%E8%B7%AF%E5%8F%A3%EF%BC%88%E7%AE%80%E5%8D%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&#x4E00;&#x9053;&#x4E0D;&#x9519;&#x7684;&#x7EC3;&#x4E60;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x9898;&#x76EE;</p><blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;&#xFF1A;<a href="https://nanti.jisuanke.com/t/39261" target="_blank" rel="noopener">https://nanti.jisuanke.com/t/39261</a><br>&#x611F;&#x8C22;&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#xFF1A;<a href="https://blog.csdn.net/qq_39599067/article/details/90574496?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159625770019724835820143%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=159625770019724835820143&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~pc_rank_v4-5-90574496.first_rank_ecpm_v3_pc_rank_v4&amp;utm_term=2019+%E8%AE%A1%E8%92%9C%E4%B9%8B%E9%81%93%E7%AC%AC%E4%B8%80%E5%9C%BA+B.+%E5%95%86%E6%B1%A4AI%E5%9B%AD%E5%8C%BA%E7%9A%84n%E4%B8%AA%E8%B7%AF%E5%8F%A3&amp;spm=1018.2118.3001.4187" target="_blank">2019 &#x8BA1;&#x849C;&#x4E4B;&#x9053; &#x521D;&#x8D5B; &#x7B2C;&#x4E00;&#x573A;</a></p></blockquote><a id="more"></a><blockquote><p>&#x9898;&#x76EE;&#x63CF;&#x8FF0;<br>&#x5317;&#x4EAC;&#x5E02;&#x5546;&#x6C64;&#x79D1;&#x6280;&#x5F00;&#x53D1;&#x6709;&#x9650;&#x516C;&#x53F8;&#x5EFA;&#x7ACB;&#x4E86;&#x65B0;&#x7684; AI &#x4EBA;&#x5DE5;&#x667A;&#x80FD;&#x4EA7;&#x4E1A;&#x56ED;&#xFF0C;&#x8FD9;&#x4E2A;&#x4EA7;&#x4E1A;&#x56ED;&#x533A;&#x91CC;&#x6709; n &#x4E2A;&#x8DEF;&#x53E3;&#xFF0C;&#x7531; n&#x2212;1 &#x6761;&#x9053;&#x8DEF;&#x8FDE;&#x901A;&#x3002;&#x7B2C; i &#x6761;&#x9053;&#x8DEF;&#x8FDE;&#x63A5;&#x8DEF;&#x53E3; $ u_i $ &#x548C; $ v_i $<br>&#x6BCF;&#x4E2A;&#x8DEF;&#x53E3;&#x90FD;&#x5E03;&#x6709;&#x4E00;&#x53F0;&#x4FE1;&#x53F7;&#x53D1;&#x5C04;&#x5668;&#xFF0C;&#x4FE1;&#x53F7;&#x9891;&#x6BB5;&#x662F; 1 &#x5230; m &#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x4E2A;&#x6574;&#x6570;&#x3002;<br>&#x9053;&#x8DEF;&#x6240;&#x8FDE;&#x63A5;&#x7684;&#x4E24;&#x4E2A;&#x8DEF;&#x53E3;&#x7684;&#x53D1;&#x5C04;&#x4FE1;&#x53F7;&#x53E0;&#x52A0;&#x53EF;&#x80FD;&#x4F1A;&#x5F71;&#x54CD;&#x9053;&#x8DEF;&#x7684;&#x6B63;&#x5E38;&#x8FD0;&#x884C;&#x3002;&#x5177;&#x4F53;&#x5730;&#xFF0C;&#x5982;&#x679C;&#x7B2C; i &#x6761;&#x9053;&#x8DEF;&#x8FDE;&#x63A5;&#x7684;&#x4E24;&#x4E2A;&#x8DEF;&#x53E3;&#x53D1;&#x5C04;&#x4FE1;&#x53F7;&#x7684;&#x9891;&#x6BB5;&#x5206;&#x522B;&#x4E3A; a &#x548C; b&#xFF0C;&#x90A3;&#x4E48; gcd(a,b) &#x4E0D;&#x80FD;&#x6070;&#x597D;&#x7B49;&#x4E8E;&#x9053;&#x8DEF;&#x7684;&#x4FDD;&#x7559;&#x9891;&#x6BB5; $w_i$ &#x3002;&#x6BCF;&#x6761;&#x9053;&#x8DEF;&#x7684;&#x4FDD;&#x7559;&#x9891;&#x6BB5;&#x662F;&#x552F;&#x4E00;&#x7684;&#xFF0C;&#x5373;&#x4E0D;&#x4F1A;&#x4E0E;&#x5176;&#x4F59;&#x4EFB;&#x4F55;&#x9053;&#x8DEF;&#x7684;&#x4FDD;&#x7559;&#x9891;&#x6BB5;&#x76F8;&#x540C;&#x3002;<br>&#x4F60;&#x73B0;&#x5728;&#x9700;&#x8981;&#x786E;&#x5B9A;&#x6BCF;&#x4E2A;&#x8DEF;&#x53E3;&#x53D1;&#x5C04;&#x4FE1;&#x53F7;&#x7684;&#x9891;&#x6BB5;&#xFF0C;&#x4F7F;&#x5176;&#x7B26;&#x5408;&#x8981;&#x6C42;&#x3002;<br>&#x5728;&#x5F00;&#x59CB;&#x4E4B;&#x524D;&#xFF0C;&#x4F60;&#x60F3;&#x5148;&#x7B97;&#x51FA;&#x5171;&#x6709;&#x591A;&#x5C11;&#x79CD;&#x5408;&#x6CD5;&#x7684;&#x65B9;&#x6848;&#x3002;<br>&#x7531;&#x4E8E;&#x7B54;&#x6848;&#x53EF;&#x80FD;&#x5F88;&#x5927;&#xFF0C;&#x8F93;&#x51FA;&#x5BF9; 10 ^ 9 + 7&#x53D6;&#x6A21;&#x7684;&#x503C;&#x4F5C;&#x4E3A;&#x7B54;&#x6848;&#x3002;<br>&#x8F93;&#x5165;&#x683C;&#x5F0F;<br>&#x7B2C;&#x4E00;&#x884C;&#xFF0C;&#x4E24;&#x4E2A;&#x6B63;&#x6574;&#x6570; n, m &#x5206;&#x522B;&#x4EE3;&#x8868;&#x8DEF;&#x53E3;&#x6570;&#x91CF;&#x548C;&#x4FE1;&#x53F7;&#x9891;&#x6BB5;&#x4E0A;&#x9650;&#x3002;<br>&#x63A5;&#x4E0B;&#x6765; n - 1 &#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x63CF;&#x8FF0;&#x4E00;&#x6761;&#x9053;&#x8DEF;&#x3002;&#x7B2C; i &#x884C;&#x6709;&#x4E09;&#x4E2A;&#x6574;&#x6570; $u_i, v_i, w_i $,&#x610F;&#x4E49;&#x5982;&#x4E0A;&#x6240;&#x8FF0;&#x3002;<br>&#x4FDD;&#x8BC1; $ 1&#x2264;n&#x2264;m,1&#x2264;u_i,v_i &#x2264;n,1&#x2264;w_i&#x2264;m$&#x3002;<br>&#x8F93;&#x51FA;&#x683C;&#x5F0F;<br>&#x8F93;&#x51FA;&#x4E00;&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x4EE3;&#x8868;&#x5408;&#x6CD5;&#x65B9;&#x6848;&#x7684;&#x6570;&#x91CF;&#x5BF9; 10 ^ 9 + 7&#x53D6;&#x6A21;&#x7684;&#x503C;&#x3002;<br>&#x6570;&#x636E;&#x8303;&#x56F4;<br>m&#x2264;50<br>$v_i = u_{i + 1} = u_i + 1 (1&#x2264;i&lt;n)$<br>&#x6837;&#x4F8B;&#x89E3;&#x91CA;<br>&#x6240;&#x6709;&#x5408;&#x6CD5;&#x7684;&#x65B9;&#x6848;&#x4E3A; (2,2,1),(2,2,3),(3,3,1),(3,3,2),(3,3,3)&#x3002;<br>&#x6837;&#x4F8B;&#x8F93;&#x5165;<br>3 3<br>1 2 1<br>2 3 2<br>&#x6837;&#x4F8B;&#x8F93;&#x51FA;<br>5</p></blockquote><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br>&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#x94FE;&#x63A5;&#x4E2D;&#x8BB2;&#x89E3;&#x7684;&#x8A00;&#x7B80;&#x610F;&#x8D45;&#xFF0C;&#x6211;&#x4E5F;&#x53EA;&#x7A0D;&#x52A0;&#x8D58;&#x8FF0;<br><strong>&#x9898;&#x76EE;&#x5206;&#x6790;</strong><br>&#x9898;&#x76EE;&#x8F93;&#x5165;&#x6837;&#x4F8B;&#x8F83;&#x5C0F;<code>1&#x2264;n&#x2264;m&#x2264;50,&#x4E14;&#x4FDD;&#x8BC1;&#x662F;&#x4E00;&#x6761;&#x94FE;</code><br>&#x5F88;&#x5BB9;&#x6613;&#x60F3;&#x5230;&#x5BF9;&#x6BCF;&#x4E24;&#x4E2A;&#x8DEF;&#x53E3;i&#x548C;i+1&#xFF0C;&#x904D;&#x5386;a b&#xFF0C;&#x8BB0;&#x5F55;&#x6EE1;&#x8DB3;gcd(a,b)!=cost[i]&#x7684;&#x4E2A;&#x6570;<br>&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x601D;&#x60F3;&#x6D8C;&#x4E0A;&#x5FC3;&#x5934;</p><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>dp[i][j]&#x8BB0;&#x5F55;&#x7B2C;i&#x4E2A;&#x8DEF;&#x53E3;&#x9891;&#x6BB5;&#x4E3A;j&#x65F6;&#xFF0C;&#x524D;i-1&#x4E2A;&#x8DEF;&#x6BB5;&#x6EE1;&#x8DB3;&#x5408;&#x6CD5;&#x6761;&#x4EF6;&#x7684;&#x65B9;&#x6848;&#x6570;<br>&#x4F9D;&#x6B21;&#x679A;&#x4E3E;&#x8DEF;&#x53E3;i&#x548C;i-1&#x7684;&#x9891;&#x6BB5;&#xFF0C;&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;$O(nm^2)$<br>&#x6700;&#x540E; &#x8BB0;&#x4E3A;&#x7ED3;&#x679C;</p><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span>(ch &lt; <span class="string">&apos;0&apos;</span> || ch &gt; <span class="string">&apos;9&apos;</span>){</span><br><span class="line">f |= (ch == <span class="string">&apos;-&apos;</span>);</span><br><span class="line">ch = getchar();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">&apos;0&apos;</span> &amp;&amp; ch &lt;= <span class="string">&apos;9&apos;</span>){</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (ch-<span class="string">&apos;0&apos;</span>);</span><br><span class="line">ch = getchar();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> x = f ? -x : x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(!b)<span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> Gcd(b, a%b);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">ll dp[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="keyword">int</span> cost[<span class="number">55</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">n = read(); m = read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, a, b, c; i &lt;= n; ++i){</span><br><span class="line">a = read(); b = read(); c = read();</span><br><span class="line">cost[b] = c;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i){</span><br><span class="line">dp[<span class="number">1</span>][i] = <span class="number">1</span>;<span class="comment">//&#x521D;&#x59CB;&#x5316;</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; ++k){</span><br><span class="line"><span class="keyword">if</span>(Gcd(k, j) != cost[i])</span><br><span class="line">dp[i][j] = (dp[i][j] + dp[i<span class="number">-1</span>][k]) % mod;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i){</span><br><span class="line">ans = (ans + dp[n][i]) % mod;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>·【计蒜客】·商汤的AI伴游小精灵</title>
      <link href="/2020/09/01/%E5%95%86%E6%B1%A4%E7%9A%84AI%E4%BC%B4%E6%B8%B8%E5%B0%8F%E7%B2%BE%E7%81%B5/"/>
      <url>/2020/09/01/%E5%95%86%E6%B1%A4%E7%9A%84AI%E4%BC%B4%E6%B8%B8%E5%B0%8F%E7%B2%BE%E7%81%B5/</url>
      
        <content type="html"><![CDATA[<p>&#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x4F5C;&#x7528;&#x5C31;&#x5F88;&#x597D;&#x7684;&#x4F53;&#x73B0;&#x5728;&#x8FD9;&#x9053;&#x9898;&#x76EE;&#x4E0A;</p><blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;:<a href="https://nanti.jisuanke.com/t/39260" target="_blank" rel="noopener">https://nanti.jisuanke.com/t/39260</a></p></blockquote><a id="more"></a><blockquote><p>&#x9898;&#x76EE;&#x63CF;&#x8FF0;<br>&#x5317;&#x4EAC;&#x5E02;&#x5546;&#x6C64;&#x79D1;&#x6280;&#x5F00;&#x53D1;&#x6709;&#x9650;&#x516C;&#x53F8;&#x9762;&#x5411;&#x9752;&#x5C11;&#x5E74;&#x7814;&#x53D1;&#x4E86;&#x4E00;&#x6B3E;&#x667A;&#x80FD;&#x4F34;&#x6E38;&#x673A;&#x5668;&#x4EBA;&#x2013; AI &#x4F34;&#x6E38;&#x5C0F;&#x7CBE;&#x7075;&#x3002;&#x4E00;&#x7ECF;&#x63A8;&#x51FA;&#xFF0C;&#x6DF1;&#x53D7;&#x5B69;&#x5B50;&#x4EEC;&#x7684;&#x559C;&#x7231;&#xFF0C;&#x53EF;&#x7231;&#x53C8;&#x673A;&#x667A;&#x7684;&#x5C0F;&#x7CBE;&#x7075;&#x4F1A;&#x60F3;&#x51FA;&#x5F88;&#x591A;&#x6709;&#x8DA3;&#x7684;&#x5C0F;&#x6E38;&#x620F;&#x6765;&#x542F;&#x8FEA;&#x5B69;&#x5B50;&#x4EEC;&#x601D;&#x8003;&#x3002;&#x4ECA;&#x5929;&#xFF0C;&#x5C0F;&#x7CBE;&#x7075;&#x7ED9;&#x4F60;&#x63D0;&#x51FA;&#x4E86;&#x4E00;&#x4E2A;&#x795E;&#x5947;&#x53C8;&#x6709;&#x8DA3;&#x7684;&#x591A;&#x7C73;&#x8BFA;&#x9AA8;&#x724C;&#x5C0F;&#x6E38;&#x620F;&#x3002;<br>&#x4F60;&#x624B;&#x4E0A;&#x6709;&#x4E00;&#x526F;&#x795E;&#x5947;&#x7684;&#x591A;&#x7C73;&#x8BFA;&#x9AA8;&#x724C;&#xFF0C;&#x6570;&#x91CF;&#x6709; n &#x4E2A;&#xFF0C;&#x7F16;&#x53F7;&#x4E3A; 1&#x223C;n&#x3002;&#x5B83;&#x4EEC;&#x4E4B;&#x95F4;&#x5B58;&#x5728;&#x7740; n&#x2212;1 &#x4E2A;&#x5355;&#x5411;&#x63A8;&#x5012;&#x5173;&#x7CFB;&#xFF0C;&#x5373;&#x63A8;&#x5012; x &#x4F1A;&#x5BFC;&#x81F4; y &#x4E5F;&#x88AB;&#x63A8;&#x5012;&#xFF0C;&#x800C;&#x4E14;&#x8FD9;&#x6837;&#x7684;&#x5173;&#x7CFB;&#x90FD;&#x6EE1;&#x8DB3; x &lt; y, &#x4E14;&#x6BCF;&#x7EC4;&#x5173;&#x7CFB;&#x4E2D;&#x7684; y &#x4E0D;&#x4F1A;&#x91CD;&#x590D;&#x3002;<br>&#x4E00;&#x5F00;&#x59CB;&#x53EA;&#x6709; 1 &#x53F7;&#x9AA8;&#x724C;&#x4E0D;&#x4F1A;&#x88AB;&#x5176;&#x4ED6;&#x9AA8;&#x724C;&#x63A8;&#x5012;&#xFF0C;&#x6240;&#x4EE5;&#x4F60;&#x53EA;&#x9700;&#x8981;&#x63A8;&#x5012; 1 &#x53F7;&#x9AA8;&#x724C;&#x5C31;&#x53EF;&#x4EE5;&#x63A8;&#x5012;&#x6240;&#x6709;&#x7684;&#x9AA8;&#x724C;&#x3002;<br>&#x5C0F;&#x7CBE;&#x7075;&#x7ED9;&#x4F60;&#x63D0;&#x7684;&#x95EE;&#x9898;&#x662F;&#xFF1A;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x5141;&#x8BB8;&#x53BB;&#x6389; 2 &#x4E2A;&#x9AA8;&#x724C;&#xFF0C;&#x90A3;&#x4E48;&#x5728;&#x6700;&#x574F;&#x60C5;&#x51B5;&#x4E0B;&#x4F60;&#x6700;&#x5C11;&#x9700;&#x8981;&#x63A8;&#x5012;&#x51E0;&#x4E2A;&#x9AA8;&#x724C;&#x624D;&#x80FD;&#x4F7F;&#x6240;&#x6709;&#x9AA8;&#x724C;&#x5012;&#x4E0B;&#xFF1F;<br>&#x8F93;&#x5165;&#x683C;&#x5F0F;<br>&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6574;&#x6570; n&#xFF0C;&#x8868;&#x793A;&#x6709; n &#x4E2A;&#x591A;&#x7C73;&#x8BFA;&#x9AA8;&#x724C;&#x3002;<br>&#x63A5;&#x4E0B;&#x6765;&#x6709; n-1 &#x884C;&#x7684;&#x8F93;&#x5165;&#xFF0C;&#x6BCF;&#x884C;&#x8F93;&#x5165;&#x4E24;&#x4E2A;&#x6574;&#x6570; x,y&#xFF0C;&#x8868;&#x793A;&#x63A8;&#x5012; x &#x4F1A;&#x5BFC;&#x81F4; y &#x4E5F;&#x88AB;&#x63A8;&#x5012;&#x3002;<br>&#x8F93;&#x51FA;&#x683C;&#x5F0F;<br>&#x8F93;&#x51FA;&#x4E00;&#x4E2A;&#x6574;&#x6570;&#x8868;&#x793A;&#x53BB;&#x6389;&#x4E24;&#x4E2A;&#x9AA8;&#x724C;&#x4E4B;&#x540E;&#xFF0C;&#x6700;&#x574F;&#x60C5;&#x51B5;&#x4E0B;&#x4F60;&#x6700;&#x5C11;&#x9700;&#x8981;&#x63A8;&#x5012;&#x51E0;&#x4E2A;&#x9AA8;&#x724C;&#x624D;&#x80FD;&#x4F7F;&#x6240;&#x6709;&#x9AA8;&#x724C;&#x5012;&#x4E0B;&#x3002;<br>&#x6570;&#x636E;&#x89C4;&#x6A21;<br>$n \le 5 \times 10^3$<br>&#x6837;&#x4F8B;&#x8F93;&#x5165;<br>7<br>1 2<br>1 3<br>1 5<br>2 4<br>4 7<br>4 6<br>&#x6837;&#x4F8B;&#x8F93;&#x51FA;<br>5</p></blockquote><p><strong>&#x9898;&#x76EE;&#x5206;&#x6790;</strong></p><ul><li>&#x8F93;&#x5165;&#x7684;&#x6BCF;&#x7EC4;x,y&#x5C31;&#x662F;&#x5C06;&#x4E24;&#x4E2A;&#x8282;&#x70B9;&#x76F8;&#x8FDE;&#xFF0C;&#x7531;&#x6B64;&#x7EC4;&#x6210;&#x4E00;&#x68F5;&#x6811;&#xFF1B;</li><li>&#x4ECE;&#x4EFB;&#x4E00;&#x8282;&#x70B9;&#x5411;&#x4E0B;&#x904D;&#x5386;&#xFF0C;&#x4FBF;&#x662F;&#x8FDB;&#x884C;&#x201C;&#x63A8;&#x5012;&#x9AA8;&#x724C;&#x201D;&#xFF0C;&#x5982;&#x679C;&#x4ECE;&#x6839;&#x7ED3;&#x70B9;&#x5F00;&#x59CB;&#x201C;&#x63A8;&#x5012;&#x201D;&#xFF0C;&#x4E00;&#x6B21;&#x4FBF;&#x53EF;&#x5C06;&#x6240;&#x6709;&#x201C;&#x9AA8;&#x724C;&#x63A8;&#x5012;&#x201D;&#xFF1B;<br>&#x4E5F;&#x5C31;&#x662F;&#x5BF9;&#x4E8E;&#x4E00;&#x68F5;&#x6811;&#xFF0C;&#x6700;&#x5C11;&#x201C;&#x63A8;&#x5BFC;&#x201D;&#x4E00;&#x4E2A;&#x9AA8;&#x724C;&#x4FBF;&#x53EF;&#x4F7F;&#x6240;&#x6709;&#x9AA8;&#x724C;&#x201C;&#x5012;&#x4E0B;&#x201D;&#xFF1B;</li><li>&#x9898;&#x76EE;&#x8981;&#x6C42;&#x201C;&#x53BB;&#x6389;&#x4E24;&#x4E2A;&#x201D;&#xFF0C;&#x5373;&#x5220;&#x9664;&#x4E24;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x53D8;&#x6210;&#x68EE;&#x6797;&#xFF1B;<br>&#x201C;&#x6700;&#x574F;&#x60C5;&#x51B5;&#x201D;&#xFF0C;&#x5373;&#x95EE;&#x8BE5;&#x68EE;&#x6797;&#x6700;&#x591A;&#x6709;&#x591A;&#x5C11;&#x68F5;&#x6811;&#xFF1B;</li></ul><p><strong>&#x7B97;&#x6CD5;&#x5206;&#x6790;</strong><br>&#x53EA;&#x9700;&#x5220;&#x9664;&#x51FA;&#x5EA6;&#x6700;&#x5927;&#x7684;&#x4E24;&#x4E2A;&#x8282;&#x70B9;&#x5373;&#x53EF;</p><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>{</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> link;</span><br><span class="line">}node;</span><br><span class="line">node a[<span class="number">5005</span>];</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">5005</span>][<span class="number">5005</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(node x, node y)</span></span>{</span><br><span class="line"><span class="keyword">return</span> x.n &gt; y.n;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">a[i].link = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) {</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">m[x][y] = <span class="number">1</span>;</span><br><span class="line">a[x].n++;</span><br><span class="line">}</span><br><span class="line">sort(a+<span class="number">1</span>, a+n+<span class="number">1</span>, comp);</span><br><span class="line">node l1 = a[<span class="number">1</span>], l2 = a[<span class="number">2</span>];<span class="comment">//&#x53D6;&#x51FA;&#x5EA6;&#x6700;&#x5927;&#x7684;&#x4E24;&#x8282;&#x70B9;</span></span><br><span class="line"><span class="keyword">int</span> maxn = l1.n + l2.n + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">1</span>].link == <span class="number">1</span> || a[<span class="number">2</span>].link == <span class="number">1</span>)<span class="comment">//&#x82E5;&#x67D0;&#x4E00;&#x4E2A;&#x4E3A;&#x6839;&#x8282;&#x70B9;</span></span><br><span class="line">maxn--;</span><br><span class="line"><span class="keyword">if</span>(m[l1.link][l2.link] == <span class="number">1</span>)<span class="comment">//&#x82E5;&#x4E24;&#x8282;&#x70B9;&#x76F8;&#x8FDE;</span></span><br><span class="line">maxn--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, maxn);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>·【蓝桥】·四平方和</title>
      <link href="/2020/08/19/%E8%93%9D%E6%A1%A5-%E5%9B%9B%E5%B9%B3%E6%96%B9%E5%92%8C/"/>
      <url>/2020/08/19/%E8%93%9D%E6%A1%A5-%E5%9B%9B%E5%B9%B3%E6%96%B9%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p>&#x4E00;&#x9053;&#x4E0D;&#x9519;&#x7684;&#x54C8;&#x5E0C;/&#x4E8C;&#x5206;&#x9898;&#x76EE;~<br>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="https://www.acwing.com/problem/content/description/1223/" target="_blank">&#xB7;&#x3010;&#x84DD;&#x6865;&#x3011;&#xB7;&#x56DB;&#x5E73;&#x65B9;&#x548C;</a></p><a id="more"></a><p>&#x611F;&#x8C22;&#x4F18;&#x79C0;&#x535A;&#x5BA2;1&#xFF1A;<a href="https://blog.csdn.net/njuptACMcxk/article/details/104251908" target="_blank">&#x4E8C;&#x5206;/&#x54C8;&#x5E0C;-&#x84DD;&#x6865;&#x676F;&#x7701;&#x8D5B;-&#x56DB;&#x5E73;&#x65B9;&#x548C;</a><br>&#x611F;&#x8C22;&#x4F18;&#x79C0;&#x535A;&#x5BA2;2&#xFF1A;<a href="https://www.cnblogs.com/Tuple-Joe/p/9169064.html" target="_blank">&#x84DD;&#x6865;&#x676F; &#x56DB;&#x5E73;&#x65B9;&#x548C;</a></p><blockquote><p>&#x9898;&#x76EE;&#x63CF;&#x8FF0;<br>&#x56DB;&#x5E73;&#x65B9;&#x548C;&#x5B9A;&#x7406;&#xFF0C;&#x53C8;&#x79F0;&#x4E3A;&#x62C9;&#x683C;&#x6717;&#x65E5;&#x5B9A;&#x7406;&#xFF1A;<br>&#x6BCF;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#x90FD;&#x53EF;&#x4EE5;&#x8868;&#x793A;&#x4E3A;&#x81F3;&#x591A; 4 &#x4E2A;&#x6B63;&#x6574;&#x6570;&#x7684;&#x5E73;&#x65B9;&#x548C;&#x3002;<br>&#x5982;&#x679C;&#x628A; 0 &#x5305;&#x62EC;&#x8FDB;&#x53BB;&#xFF0C;&#x5C31;&#x6B63;&#x597D;&#x53EF;&#x4EE5;&#x8868;&#x793A;&#x4E3A; 4 &#x4E2A;&#x6570;&#x7684;&#x5E73;&#x65B9;&#x548C;&#x3002;<br>&#x6BD4;&#x5982;&#xFF1A;<br>5=$0^2+0^2+1^2+2^2$<br>7=$1^2+1^2+1^2+2^2$<br>&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x7ED9;&#x5B9A;&#x7684;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x591A;&#x79CD;&#x5E73;&#x65B9;&#x548C;&#x7684;&#x8868;&#x793A;&#x6CD5;&#x3002;<br>&#x8981;&#x6C42;&#x4F60;&#x5BF9; 4 &#x4E2A;&#x6570;&#x6392;&#x5E8F;&#xFF1A;<br>0&#x2264;a&#x2264;b&#x2264;c&#x2264;d<br>&#x5E76;&#x5BF9;&#x6240;&#x6709;&#x7684;&#x53EF;&#x80FD;&#x8868;&#x793A;&#x6CD5;&#x6309; a,b,c,d &#x4E3A;&#x8054;&#x5408;&#x4E3B;&#x952E;&#x5347;&#x5E8F;&#x6392;&#x5217;&#xFF0C;&#x6700;&#x540E;&#x8F93;&#x51FA;&#x7B2C;&#x4E00;&#x4E2A;&#x8868;&#x793A;&#x6CD5;&#x3002;<br>&#x8F93;&#x5165;&#x683C;&#x5F0F;<br>&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570; N&#x3002;<br>&#x8F93;&#x51FA;&#x683C;&#x5F0F;<br>&#x8F93;&#x51FA;4&#x4E2A;&#x975E;&#x8D1F;&#x6574;&#x6570;&#xFF0C;&#x6309;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;&#xFF0C;&#x4E2D;&#x95F4;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00;&#x3002;<br>&#x6570;&#x636E;&#x8303;&#x56F4;<br>0&lt;N&lt;5&#x2217;10^6<br>&#x8F93;&#x5165;&#x6837;&#x4F8B;&#xFF1A;<br>5<br>&#x8F93;&#x51FA;&#x6837;&#x4F8B;&#xFF1A;<br>0 0 1 2</p></blockquote><p><strong>&#x9898;&#x76EE;&#x5206;&#x6790;</strong></p><ol><li>&#x8981;&#x6C42;&#x5C06;&#x4E00;&#x4E2A;&#x6570;&#x5206;&#x89E3;&#x4E3A;4&#x4E2A;&#x6570;&#x5E73;&#x65B9;&#x548C;&#x7684;&#x5F62;&#x5F0F;&#xFF0C;&#x8981;&#x6C42;4&#x4E2A;&#x6570;&#x5347;&#x5E8F;&#x5E76;&#x4E14;&#x5C3D;&#x53EF;&#x80FD;&#x5C0F;&#x3002;<br>&#x5206;&#x6790;&#x5F97;a b c d&#x7684;&#x679A;&#x4E3E;&#x8303;&#x56F4;&#xFF1A;<br>a &#xFF1A; [0,sqrt(5000000/4)]<br>b :  [0,sqrt(5000000/3)]<br>c :  [0,sqrt(5000000/2)]<br>d :  [0,sqrt(5000000)]</li><li>&#x6700;&#x521D;&#x7684;&#x601D;&#x8DEF;&#x662F;&#xFF1A;&#x679A;&#x4E3E;a,b,c &#x5224;&#x65AD;N-a^2-b^2-c^2&#x662F;&#x5426;&#x4E3A;&#x5E73;&#x65B9;&#x6570;&#xFF0C;&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;O(N^1.5),&#x59A5;&#x59A5;&#x8D85;&#x65F6;<br>&#x4ECE;N&#x7684;&#x89C4;&#x6A21;&#x53EF;&#x63A8;&#x6D4B;&#x51FA;&#x7A0B;&#x5E8F;&#x7684;&#x6548;&#x7387;&#x5E94;&#x8BE5;&#x6700;&#x591A;O(N)&#x6216;O(N log N)</li><li>&#x6240;&#x4EE5;&#x53EA;&#x679A;&#x4E3E;a,b &#x53EF;&#x5F97;&#x5230;N-a^2-b^2&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x5C31;&#x662F;&#x6C42;c^2+d^2 = N-a^2-b^2<br>&#x6700;&#x540E;&#x786E;&#x5B9A;c,d&#x7684;&#x503C;&#xFF0C;&#x54C8;&#x5E0C;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;O(N), &#x4E8C;&#x5206;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5C31;&#x8981;O(N log N)</li></ol><h3 id="&#x54C8;&#x5E0C;&#x4F18;&#x5316;&#x679A;&#x4E3E;&#xFF08;181ms-AC&#xFF09;"><a href="#&#x54C8;&#x5E0C;&#x4F18;&#x5316;&#x679A;&#x4E3E;&#xFF08;181ms-AC&#xFF09;" class="headerlink" title="&#x54C8;&#x5E0C;&#x4F18;&#x5316;&#x679A;&#x4E3E;&#xFF08;181ms AC&#xFF09;"></a>&#x54C8;&#x5E0C;&#x4F18;&#x5316;&#x679A;&#x4E3E;&#xFF08;181ms AC&#xFF09;</h3><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x54C8;&#x5E0C;&#x8868;f[]&#x8BB0;&#x5F55;c^2+d^2&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x53EF;&#x4EE4; <code>f[c*c+d*d] = c</code>;<br>&#x8FD9;&#x4E2A;&#x6570;&#x7EC4;f&#x8981;&#x5F00;&#x5230;5*10^6&#xFF0C;&#x7528;&#x7A7A;&#x95F4;&#x6362;&#x65F6;&#x95F4;&#x7684;&#x601D;&#x60F3;&#x53EF;&#x4F7F;&#x67E5;&#x8BE2;c,d&#x5728;O(1)&#x7684;&#x6548;&#x7387;&#x4E0B;&#x5B8C;&#x6210;</p><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&#x54C8;&#x5E0C;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">5000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line">fill(f, f+n+<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c*c &lt;= n/<span class="number">2</span>; ++c){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> d = c; c*c+d*d &lt;= n; ++d){</span><br><span class="line"><span class="keyword">if</span>(f[c*c+d*d] == <span class="number">-1</span>){</span><br><span class="line">f[c*c+d*d] = c;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> a = <span class="number">0</span>; a*a*<span class="number">4</span> &lt;= n; ++a){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b = a; a*a+b*b&lt;=n/<span class="number">2</span>; b++){</span><br><span class="line"><span class="keyword">if</span>(f[n-a*a-b*b] != <span class="number">-1</span>){</span><br><span class="line"><span class="keyword">int</span> c = f[n-a*a-b*b];</span><br><span class="line"><span class="keyword">int</span> d = <span class="keyword">int</span>(<span class="built_in">sqrt</span>(n-a*a-b*b-c*c)+<span class="number">1e-3</span>);<span class="comment">//sqrt&#x8FD4;&#x56DE;&#x503C;&#x4E3A;&#x6D6E;&#x70B9;&#x6570;&#xFF0C;&#x6709;&#x7CBE;&#x5EA6;&#x8BEF;&#x5DEE;</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;c&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x4E8C;&#x5206;&#x4F18;&#x5316;&#x679A;&#x4E3E;&#xFF08;2740ms-AC&#xFF09;"><a href="#&#x4E8C;&#x5206;&#x4F18;&#x5316;&#x679A;&#x4E3E;&#xFF08;2740ms-AC&#xFF09;" class="headerlink" title="&#x4E8C;&#x5206;&#x4F18;&#x5316;&#x679A;&#x4E3E;&#xFF08;2740ms AC&#xFF09;"></a>&#x4E8C;&#x5206;&#x4F18;&#x5316;&#x679A;&#x4E3E;&#xFF08;2740ms AC&#xFF09;</h3><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5982;&#x679C;&#x80FD;&#x901A;&#x8FC7;&#x54C8;&#x5E0C;&#x7684;&#x65B9;&#x6CD5;&#x89E3;&#x51B3;&#x8BE5;&#x9898;&#xFF0C;&#x4E8C;&#x5206;&#x5C31;&#x5F88;&#x5BB9;&#x6613;&#x7406;&#x89E3;&#x4E86;<br>&#x5C06;&#x6240;&#x6709;&#x7684;c^2+d^2&#x7ED3;&#x679C;&#x5B58;&#x50A8;&#x8D77;&#x6765;&#xFF08;&#x76F8;&#x52A0;&#x7ED3;&#x679C;&#x76F8;&#x540C;&#x7684;&#x4E0D;&#x53BB;&#x91CD;&#xFF09;&#xFF0C;&#x4E8C;&#x5206;&#x6C42;c&#x548C;d<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&#x4E8C;&#x5206;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2500010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="keyword">int</span> t,c,d;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node&amp;tmp)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(t!=tmp.t) <span class="keyword">return</span> t&lt;tmp.t;</span><br><span class="line">        <span class="keyword">if</span>(c!=tmp.c) <span class="keyword">return</span> c&lt;tmp.c;</span><br><span class="line">        <span class="keyword">return</span> d&lt;tmp.d;</span><br><span class="line">    }</span><br><span class="line">}num[N];</span><br><span class="line"><span class="keyword">int</span> n,cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>;c*c&lt;=n;c++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> d=c;c*c+d*d&lt;=n;d++)</span><br><span class="line">        {</span><br><span class="line">            num[cnt++]={c*c+d*d,c,d};</span><br><span class="line">        }</span><br><span class="line">    sort(num,num+cnt);<span class="comment">//&#x540C;&#x4E00;&#x503C;&#x53EF;&#x80FD;&#x5BF9;&#x5E94;&#x591A;&#x7EC4;c&#x548C;d&#xFF0C;&#x6240;&#x4EE5;&#x5148;&#x6392;&#x5E8F;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span>;a*a&lt;=n;a++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> b=a;a*a+b*b&lt;=n;b++)<span class="comment">//&#x4E8C;&#x5206;&#x6765;&#x6C42;c&#x548C;d</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> tmp=n-a*a-b*b;<span class="comment">//&#x4E8C;&#x5206;&#x6C42;c^2+d^2=tmp&#x7684;&#x4E0B;&#x6807;</span></span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = cnt<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(l &lt; r){</span><br><span class="line"><span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(num[mid].t &lt; tmp)</span><br><span class="line">l = mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(num[mid].t &gt; tmp)</span><br><span class="line">r = mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line">r = mid;</span><br><span class="line">}  </span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(num[l].t == tmp){</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;num[l].c&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;num[l].d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 二分 </tag>
            
            <tag> 蓝桥 </tag>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>·【蓝桥】·青蛙跳杯子</title>
      <link href="/2020/08/17/%E8%93%9D%E6%A1%A5-%E9%9D%92%E8%9B%99%E8%B7%B3%E6%9D%AF%E5%AD%90/"/>
      <url>/2020/08/17/%E8%93%9D%E6%A1%A5-%E9%9D%92%E8%9B%99%E8%B7%B3%E6%9D%AF%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>&#x8BE5;&#x9898;&#x53EF;&#x4F5C;&#x4E3A;&#x4E00;&#x9053;&#x7EC3;&#x4E60;&#x5E7F;&#x641C;bfs&#x7684;&#x4F8B;&#x9898;~</p><blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;&#xFF1A;<br><a href="http://lx.lanqiao.cn/problem.page?gpid=T448" target="_blank">&#x9752;&#x86D9;&#x8DF3;&#x676F;&#x5B50;</a></p></blockquote><a id="more"></a><blockquote><p>&#x95EE;&#x9898;&#x63CF;&#x8FF0;<br>&#x3000;&#x3000;X&#x661F;&#x7403;&#x7684;&#x6D41;&#x884C;&#x5BA0;&#x7269;&#x662F;&#x9752;&#x86D9;&#xFF0C;&#x4E00;&#x822C;&#x6709;&#x4E24;&#x79CD;&#x989C;&#x8272;&#xFF1A;&#x767D;&#x8272;&#x548C;&#x9ED1;&#x8272;&#x3002;<br>&#x3000;&#x3000;X&#x661F;&#x7403;&#x7684;&#x5C45;&#x6C11;&#x559C;&#x6B22;&#x628A;&#x5B83;&#x4EEC;&#x653E;&#x5728;&#x4E00;&#x6392;&#x8336;&#x676F;&#x91CC;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x89C2;&#x5BDF;&#x5B83;&#x4EEC;&#x8DF3;&#x6765;&#x8DF3;&#x53BB;&#x3002;<br>&#x3000;&#x3000;&#x5982;&#x4E0B;&#x56FE;&#xFF0C;&#x6709;&#x4E00;&#x6392;&#x676F;&#x5B50;&#xFF0C;&#x5DE6;&#x8FB9;&#x7684;&#x4E00;&#x4E2A;&#x662F;&#x7A7A;&#x7740;&#x7684;&#xFF0C;&#x53F3;&#x8FB9;&#x7684;&#x676F;&#x5B50;&#xFF0C;&#x6BCF;&#x4E2A;&#x91CC;&#x8FB9;&#x6709;&#x4E00;&#x53EA;&#x9752;&#x86D9;&#x3002;<br>&#x3000;&#x3000;<em>WWWBBB<br>&#x3000;&#x3000;&#x5176;&#x4E2D;&#xFF0C;W&#x5B57;&#x6BCD;&#x8868;&#x793A;&#x767D;&#x8272;&#x9752;&#x86D9;&#xFF0C;B&#x8868;&#x793A;&#x9ED1;&#x8272;&#x9752;&#x86D9;&#xFF0C;<em>&#x8868;&#x793A;&#x7A7A;&#x676F;&#x5B50;&#x3002;<br>&#x3000;&#x3000;X&#x661F;&#x7684;&#x9752;&#x86D9;&#x5F88;&#x6709;&#x4E9B;&#x7656;&#x597D;&#xFF0C;&#x5B83;&#x4EEC;&#x53EA;&#x505A;3&#x4E2A;&#x52A8;&#x4F5C;&#x4E4B;&#x4E00;&#xFF1A;<br>&#x3000;&#x3000;1. &#x8DF3;&#x5230;&#x76F8;&#x90BB;&#x7684;&#x7A7A;&#x676F;&#x5B50;&#x91CC;&#x3002;<br>&#x3000;&#x3000;2. &#x9694;&#x7740;1&#x53EA;&#x5176;&#x5B83;&#x7684;&#x9752;&#x86D9;&#xFF08;&#x968F;&#x4FBF;&#x4EC0;&#x4E48;&#x989C;&#x8272;&#xFF09;&#x8DF3;&#x5230;&#x7A7A;&#x676F;&#x5B50;&#x91CC;&#x3002;<br>&#x3000;&#x3000;3. &#x9694;&#x7740;2&#x53EA;&#x5176;&#x5B83;&#x7684;&#x9752;&#x86D9;&#xFF08;&#x968F;&#x4FBF;&#x4EC0;&#x4E48;&#x989C;&#x8272;&#xFF09;&#x8DF3;&#x5230;&#x7A7A;&#x676F;&#x5B50;&#x91CC;&#x3002;<br>&#x3000;&#x3000;&#x5BF9;&#x4E8E;&#x4E0A;&#x56FE;&#x7684;&#x5C40;&#x9762;&#xFF0C;&#x53EA;&#x8981;1&#x6B65;&#xFF0C;&#x5C31;&#x53EF;&#x8DF3;&#x6210;&#x4E0B;&#x56FE;&#x5C40;&#x9762;&#xFF1A;<br>&#x3000;&#x3000;WWW</em>BBB<br>&#x3000;&#x3000;&#x672C;&#x9898;&#x7684;&#x4EFB;&#x52A1;&#x5C31;&#x662F;&#x5DF2;&#x77E5;&#x521D;&#x59CB;&#x5C40;&#x9762;&#xFF0C;&#x8BE2;&#x95EE;&#x81F3;&#x5C11;&#x9700;&#x8981;&#x51E0;&#x6B65;&#xFF0C;&#x624D;&#x80FD;&#x8DF3;&#x6210;&#x53E6;&#x4E00;&#x4E2A;&#x76EE;&#x6807;&#x5C40;&#x9762;&#x3002;<br>&#x3000;&#x3000;&#x8F93;&#x5165;&#x4E3A;2&#x884C;&#xFF0C;2&#x4E2A;&#x4E32;&#xFF0C;&#x8868;&#x793A;&#x521D;&#x59CB;&#x5C40;&#x9762;&#x548C;&#x76EE;&#x6807;&#x5C40;&#x9762;&#x3002;<br>&#x3000;&#x3000;&#x8F93;&#x51FA;&#x8981;&#x6C42;&#x4E3A;&#x4E00;&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x8868;&#x793A;&#x81F3;&#x5C11;&#x9700;&#x8981;&#x591A;&#x5C11;&#x6B65;&#x7684;&#x9752;&#x86D9;&#x8DF3;&#x3002;<br>&#x6837;&#x4F8B;&#x8F93;&#x5165;<br>*WWBB<br>WWBB</em><br>&#x6837;&#x4F8B;&#x8F93;&#x51FA;<br>2<br>&#x6837;&#x4F8B;&#x8F93;&#x5165;<br>WWW<em>BBB<br>BBB</em>WWW<br>&#x6837;&#x4F8B;&#x8F93;&#x51FA;<br>10<br>&#x6570;&#x636E;&#x89C4;&#x6A21;&#x548C;&#x7EA6;&#x5B9A;<br>&#x3000;&#x3000;&#x6211;&#x4EEC;&#x7EA6;&#x5B9A;&#xFF0C;&#x8F93;&#x5165;&#x7684;&#x4E32;&#x7684;&#x957F;&#x5EA6;&#x4E0D;&#x8D85;&#x8FC7;15<br>&#x3000;&#x3000;&#x8D44;&#x6E90;&#x7EA6;&#x5B9A;&#xFF1A;<br>&#x3000;&#x3000;&#x5CF0;&#x503C;&#x5185;&#x5B58;&#x6D88;&#x8017;&#xFF08;&#x542B;&#x865A;&#x62DF;&#x673A;&#xFF09; &lt; 256M<br>&#x3000;&#x3000;CPU&#x6D88;&#x8017; &lt; 1000ms</p></blockquote><p><strong>&#x9898;&#x76EE;&#x5206;&#x6790;</strong></p><ol><li>&#x6570;&#x636E;&#x89C4;&#x6A21;&#x4E0D;&#x5927;&#xFF0C;&#x5927;&#x80C6;&#x542F;&#x7528;&#x5E7F;&#x641C;&#xFF1B;</li><li>&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x641C;&#x7D22;&#x7684;&#x8FC7;&#x7A0B;&#x9700;&#x8981;&#x8BB0;&#x5F55;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x72B6;&#x6001;&#xFF0C;&#x6D89;&#x53CA;&#x5230;&#x66F4;&#x6539;&#x5B57;&#x7B26;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x6240;&#x4EE5;&#x4F7F;&#x7528;char[]&#x65B9;&#x4FBF;&#x4E00;&#x4E9B;&#xFF1B;<br>bfs&#x66F4;&#x6539;&#x72B6;&#x6001;&#xFF0C;&#x6BCF;&#x4E00;&#x6B65;&#x6700;&#x591A;&#x751F;&#x6210;6&#x79CD;&#x7ED3;&#x679C;&#xFF1B;<br>&#x5982; WWW<em>BBB<br>&#x8DF3;&#x4E00;&#x6B65;&#x7684;&#x7ED3;&#x679C;&#x53EF;&#x80FD;&#x6709;&#xFF1A; <em>WWWBBB&#x3001;W</em>WWBBB&#x3001;WW<em>WBBB&#x3001;WWWB</em>BB&#x3001;WWWBB*B&#x3001;WWWBBB</em></li><li>&#x663E;&#x7136;&#x8FD9;&#x91CC;&#x8BB0;&#x5F55;&#x7684;&#x72B6;&#x6001;&#x8981;&#x7528;&#x7ED3;&#x6784;&#x4F53;&#x6216;&#x8005;&#x7C7B;&#x6765;&#x5B9A;&#x4E49;&#xFF1B;<br>&#x53E6;&#x5916;&#x540E;&#x7EED;&#x4E00;&#x65E6;&#x6709;&#x91CD;&#x590D;&#x7684;&#x51FA;&#x73B0;&#xFF0C;&#x4E00;&#x5B9A;&#x8981;&#x526A;&#x679D;&#xFF1B;<br>C++&#x4E2D;map&#x3001;set&#x90FD;&#x5B9E;&#x73B0;&#x53BB;&#x91CD;&#xFF08;&#x4EB2;&#x6D4B;map&#x6548;&#x7387;&#x66F4;&#x9AD8;&#xFF09;&#xFF0C;&#x96C6;&#x5408;&#x4E2D;&#x5B58;&#x653E;&#x7ED3;&#x6784;&#x4F53;&#x9700;&#x8981;&#x91CD;&#x8F7D;&#x4E00;&#x4E0B;&#x8FD0;&#x7B97;&#x7B26;&#xFF1B;</li></ol><p>&#x6240;&#x4EE5;&#x4E00;&#x4E2A;bfs&#x5B9E;&#x73B0;&#x8D77;&#x6765;&#x771F;&#x662F;&#x6709;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x7528;Java&#x5B9E;&#x73B0;&#x4F3C;&#x4E4E;&#x4EE3;&#x7801;&#x91CF;&#x5C0F;&#x4E00;&#x4E9B;&#xFF0C;&#x540E;&#x7EED;&#x518D;&#x66F4;&#x65B0;&#x5427;~</p><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">state</span>{</span></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">18</span>];</span><br><span class="line"><span class="keyword">int</span> level;<span class="comment">//&#x641C;&#x7D22;&#x6811;&#x7684;&#x6DF1;&#x5EA6;</span></span><br><span class="line"><span class="keyword">int</span> pos;<span class="comment">//&#x201C;*&#x201D;&#x6240;&#x5728;&#x7684;&#x4F4D;&#x7F6E;</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> state &amp;b) <span class="keyword">const</span>{</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(a, b.a)&lt;<span class="number">0</span>;</span><br><span class="line">}<span class="comment">//&#x6D89;&#x53CA;&#x5230;&#x96C6;&#x5408;&#x5982;map&#x3001;set&#x5B58;&#x50A8;&#x7ED3;&#x6784;&#x4F53;&#x65F6;&#x9700;&#x8981;&#x91CD;&#x8F7D;&#x4E00;&#x4E0B;&#x8FD0;&#x7B97;&#x7B26;</span></span><br><span class="line">};</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">18</span>], ss[<span class="number">18</span>];</span><br><span class="line"><span class="keyword">int</span> n, k;<span class="comment">//&#x8BB0;&#x5F55;&#x4E32;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x201C;*&#x201D;&#x6240;&#x5728;&#x4F4D;&#x7F6E;</span></span><br><span class="line"><span class="built_in">queue</span>&lt;struct state&gt; q;</span><br><span class="line"><span class="built_in">map</span>&lt;struct state, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">char</span> c[], <span class="keyword">char</span> x[])</span></span>{<span class="comment">//copy x[] to c[]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">c[i] = x[i];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>{<span class="comment">//&#x66F4;&#x65B0;char[]&#x6570;&#x7EC4;</span></span><br><span class="line"><span class="keyword">char</span> ch = s[x];</span><br><span class="line">s[x] = s[y];</span><br><span class="line">s[y] = ch;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>{</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">state</span> <span class="title">que</span>;</span></span><br><span class="line">copy(que.a, s);</span><br><span class="line">que.level = <span class="number">0</span>;</span><br><span class="line">que.pos = k;</span><br><span class="line">q.push(que);</span><br><span class="line"><span class="keyword">while</span>(!q.empty()){</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">state</span> <span class="title">front</span> = <span class="title">q</span>.<span class="title">front</span>();</span></span><br><span class="line"><span class="keyword">char</span> b[<span class="number">18</span>];</span><br><span class="line">copy(b, front.a);</span><br><span class="line"><span class="keyword">int</span> level = front.level;</span><br><span class="line"><span class="keyword">int</span> pos = front.pos;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(b, ss)){<span class="comment">//&#x4E00;&#x65E6;bfs&#x51FA;&#x4E00;&#x7EC4;&#x53EF;&#x884C;&#x89E3;&#xFF0C;&#x9000;&#x51FA;&#x7A0B;&#x5E8F;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, level);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">-3</span>; i &lt;= <span class="number">3</span>; ++i){<span class="comment">//&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;</span></span><br><span class="line"><span class="keyword">char</span> c[<span class="number">18</span>];</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(i+pos&gt;=<span class="number">0</span> &amp;&amp; i+pos&lt;n){</span><br><span class="line">copy(c, b);</span><br><span class="line">swap(c, pos, pos+i);</span><br><span class="line">copy(front.a, c);</span><br><span class="line">front.level = level+<span class="number">1</span>; front.pos = pos+i;</span><br><span class="line"><span class="keyword">if</span>(mp[front]!=<span class="number">1</span>){</span><br><span class="line">mp[front] = <span class="number">1</span>;</span><br><span class="line">q.push(front);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ss);</span><br><span class="line">n = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i){</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">&apos;*&apos;</span>)</span><br><span class="line">k = i;</span><br><span class="line">}</span><br><span class="line">bfs();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> 蓝桥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>·【蓝桥】·九宫幻方</title>
      <link href="/2020/08/16/%E8%93%9D%E6%A1%A5-%E4%B9%9D%E5%AE%AB%E5%B9%BB%E6%96%B9/"/>
      <url>/2020/08/16/%E8%93%9D%E6%A1%A5-%E4%B9%9D%E5%AE%AB%E5%B9%BB%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<p>&#x672C;&#x9898;&#x8003;&#x67E5;&#x7684;&#x662F;&#x2026;&#x8BA1;&#x7B97;&#x601D;&#x7EF4;&#x5427;</p><blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;&#xFF1A;<br><a href="http://lx.lanqiao.cn/problem.page?gpid=T448" target="_blank">&#x9752;&#x86D9;&#x8DF3;&#x676F;&#x5B50;</a></p></blockquote><a id="more"></a><blockquote><p>&#x95EE;&#x9898;&#x63CF;&#x8FF0;<br>&#x3000;&#x3000;&#x5C0F;&#x660E;&#x6700;&#x8FD1;&#x5728;&#x6559;&#x90BB;&#x5C45;&#x5BB6;&#x7684;&#x5C0F;&#x670B;&#x53CB;&#x5C0F;&#x5B66;&#x5965;&#x6570;&#xFF0C;&#x800C;&#x6700;&#x8FD1;&#x6B63;&#x597D;&#x8BB2;&#x8FF0;&#x5230;&#x4E86;&#x4E09;&#x9636;&#x5E7B;&#x65B9;&#x8FD9;&#x4E2A;&#x90E8;&#x5206;&#xFF0C;&#x4E09;&#x9636;&#x5E7B;&#x65B9;&#x6307;&#x7684;&#x662F;&#x5C06;1<del>9&#x4E0D;&#x91CD;&#x590D;&#x7684;&#x586B;&#x5165;&#x4E00;&#x4E2A;3*3&#x7684;&#x77E9;&#x9635;&#x5F53;&#x4E2D;&#xFF0C;&#x4F7F;&#x5F97;&#x6BCF;&#x4E00;&#x884C;&#x3001;&#x6BCF;&#x4E00;&#x5217;&#x548C;&#x6BCF;&#x4E00;&#x6761;&#x5BF9;&#x89D2;&#x7EBF;&#x7684;&#x548C;&#x90FD;&#x662F;&#x76F8;&#x540C;&#x7684;&#x3002;<br>&#x3000;&#x3000;&#x4E09;&#x9636;&#x5E7B;&#x65B9;&#x53C8;&#x88AB;&#x79F0;&#x4F5C;&#x4E5D;&#x5BAB;&#x683C;&#xFF0C;&#x5728;&#x5C0F;&#x5B66;&#x5965;&#x6570;&#x91CC;&#x6709;&#x4E00;&#x53E5;&#x975E;&#x5E38;&#x6709;&#x540D;&#x7684;&#x53E3;&#x8BC0;&#xFF1A;&#x201C;&#x4E8C;&#x56DB;&#x4E3A;&#x80A9;&#xFF0C;&#x516D;&#x516B;&#x4E3A;&#x8DB3;&#xFF0C;&#x5DE6;&#x4E09;&#x53F3;&#x4E03;&#xFF0C;&#x6234;&#x4E5D;&#x5C65;&#x4E00;&#xFF0C;&#x4E94;&#x5C45;&#x5176;&#x4E2D;&#x201D;&#xFF0C;&#x901A;&#x8FC7;&#x8FD9;&#x6837;&#x7684;&#x4E00;&#x53E5;&#x53E3;&#x8BC0;&#x5C31;&#x80FD;&#x591F;&#x975E;&#x5E38;&#x5B8C;&#x7F8E;&#x7684;&#x6784;&#x9020;&#x51FA;&#x4E00;&#x4E2A;&#x4E5D;&#x5BAB;&#x683C;&#x6765;&#x3002;<br>&#x3000;&#x3000;4 9 2<br>&#x3000;&#x3000;3 5 7<br>&#x3000;&#x3000;8 1 6<br>&#x3000;&#x3000;&#x6709;&#x610F;&#x601D;&#x7684;&#x662F;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x4E09;&#x9636;&#x5E7B;&#x65B9;&#xFF0C;&#x90FD;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x4E5D;&#x5BAB;&#x683C;&#x8FDB;&#x884C;&#x82E5;&#x5E72;&#x955C;&#x50CF;&#x548C;&#x65CB;&#x8F6C;&#x64CD;&#x4F5C;&#x4E4B;&#x540E;&#x5F97;&#x5230;&#x3002;&#x73B0;&#x5728;&#x5C0F;&#x660E;&#x51C6;&#x5907;&#x5C06;&#x4E00;&#x4E2A;&#x4E09;&#x9636;&#x5E7B;&#x65B9;&#xFF08;&#x4E0D;&#x4E00;&#x5B9A;&#x662F;&#x4E0A;&#x56FE;&#x4E2D;&#x7684;&#x90A3;&#x4E2A;&#xFF09;&#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x6570;&#x62B9;&#x6389;&#xFF0C;&#x4EA4;&#x7ED9;&#x90BB;&#x5C45;&#x5BB6;&#x7684;&#x5C0F;&#x670B;&#x53CB;&#x6765;&#x8FDB;&#x884C;&#x8FD8;&#x539F;&#xFF0C;&#x5E76;&#x4E14;&#x5E0C;&#x671B;&#x5979;&#x80FD;&#x591F;&#x5224;&#x65AD;&#x51FA;&#x7A76;&#x7ADF;&#x662F;&#x4E0D;&#x662F;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x89E3;&#x3002;<br>&#x3000;&#x3000;&#x800C;&#x4F60;&#x5462;&#xFF0C;&#x4E5F;&#x88AB;&#x5C0F;&#x660E;&#x4EA4;&#x4ED8;&#x4E86;&#x540C;&#x6837;&#x7684;&#x4EFB;&#x52A1;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x540C;&#x7684;&#x662F;&#xFF0C;&#x4F60;&#x9700;&#x8981;&#x5199;&#x4E00;&#x4E2A;&#x7A0B;&#x5E8F;</del><br>&#x8F93;&#x5165;&#x683C;&#x5F0F;<br>&#x3000;&#x3000;&#x8F93;&#x5165;&#x4EC5;&#x5305;&#x542B;&#x5355;&#x7EC4;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x3002;<br>&#x3000;&#x3000;&#x6BCF;&#x7EC4;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x4E3A;&#x4E00;&#x4E2A;3*3&#x7684;&#x77E9;&#x9635;&#xFF0C;&#x5176;&#x4E2D;&#x4E3A;0&#x7684;&#x90E8;&#x5206;&#x8868;&#x793A;&#x88AB;&#x5C0F;&#x660E;&#x62B9;&#x53BB;&#x7684;&#x90E8;&#x5206;&#x3002;<br>&#x3000;&#x3000;&#x5BF9;&#x4E8E;100%&#x7684;&#x6570;&#x636E;&#xFF0C;&#x6EE1;&#x8DB3;&#x7ED9;&#x51FA;&#x7684;&#x77E9;&#x9635;&#x81F3;&#x5C11;&#x80FD;&#x8FD8;&#x539F;&#x51FA;&#x4E00;&#x7EC4;&#x53EF;&#x884C;&#x7684;&#x4E09;&#x9636;&#x5E7B;&#x65B9;&#x3002;<br>&#x8F93;&#x51FA;&#x683C;&#x5F0F;<br>&#x3000;&#x3000;&#x5982;&#x679C;&#x4EC5;&#x80FD;&#x8FD8;&#x539F;&#x51FA;&#x4E00;&#x7EC4;&#x53EF;&#x884C;&#x7684;&#x4E09;&#x9636;&#x5E7B;&#x65B9;&#xFF0C;&#x5219;&#x5C06;&#x5176;&#x8F93;&#x51FA;&#xFF0C;&#x5426;&#x5219;&#x8F93;&#x51FA;&#x201C;Too Many&#x201D;&#xFF08;&#x4E0D;&#x5305;&#x542B;&#x5F15;&#x53F7;&#xFF09;&#x3002;<br>&#x6837;&#x4F8B;&#x8F93;&#x5165;<br>0 7 2<br>0 5 0<br>0 3 0<br>&#x6837;&#x4F8B;&#x8F93;&#x51FA;<br>6 7 2<br>1 5 9<br>8 3 4<br>&#x6570;&#x636E;&#x89C4;&#x6A21;&#x548C;&#x7EA6;&#x5B9A;<br>&#x3000;&#x3000;&#x5CF0;&#x503C;&#x5185;&#x5B58;&#x6D88;&#x8017;&#xFF08;&#x542B;&#x865A;&#x62DF;&#x673A;&#xFF09; &lt; 256M<br>&#x3000;&#x3000;CPU&#x6D88;&#x8017; &lt; 1000ms</p></blockquote><p><strong>&#x9898;&#x76EE;&#x5206;&#x6790;</strong></p><ol><li><p>&#x89C2;&#x5BDF;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;3*3&#x77E9;&#x9635;&#x6EE1;&#x8DB3;&#x4E09;&#x9636;&#x5E7B;&#x65B9;&#x7684;&#x4EC5;8&#x4E2D;&#x7EC4;&#x5408;&#xFF1A;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> v[<span class="number">8</span>][<span class="number">9</span>] = {{<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">6</span>},</span><br><span class="line">{<span class="number">2</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">8</span>},</span><br><span class="line">{<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">8</span>},</span><br><span class="line">{<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">4</span>},</span><br><span class="line">{<span class="number">8</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>},</span><br><span class="line">{<span class="number">6</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">4</span>},</span><br><span class="line">{<span class="number">4</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>},</span><br><span class="line">{<span class="number">8</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>}};</span><br></pre></td></tr></table></figure></li><li><p>&#x5BF9;&#x4E8E;&#x6D4B;&#x8BD5;&#x8F93;&#x5165;&#xFF0C;&#x53EA;&#x9700;&#x548C;&#x8FD9;8&#x79CD;&#x7EC4;&#x5408;&#x4F9D;&#x6B21;&#x6BD4;&#x8F83;&#xFF0C;&#x6EE1;&#x8DB3;&#x5176;&#x4E2D;&#x4EC5;&#x4E00;&#x7EC4;&#x7B26;&#x5408;&#xFF0C;&#x8BF4;&#x660E;&#x53EF;&#x4EE5;&#x8FD8;&#x539F;<br>&#x5176;&#x4ED6;&#x60C5;&#x51B5;&#x90FD;&#x662F;&#x201C;Too Many&#x201D;&#xFF0C;&#x5224;&#x65AD;&#x7684;&#x65F6;&#x5019;&#x4F7F;&#x7528;flag&#x3001;ans&#x4E24;&#x4E2A;&#x53D8;&#x91CF;&#x6807;&#x8BB0;</p></li></ol><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v[<span class="number">8</span>][<span class="number">9</span>] = {{<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">6</span>},</span><br><span class="line">{<span class="number">2</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">8</span>},</span><br><span class="line">{<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">8</span>},</span><br><span class="line">{<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">4</span>},</span><br><span class="line">{<span class="number">8</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>},</span><br><span class="line">{<span class="number">6</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">4</span>},</span><br><span class="line">{<span class="number">4</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>},</span><br><span class="line">{<span class="number">8</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>}};</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> a[])</span></span>{</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>, ans = <span class="number">-1</span>; <span class="comment">//flag&#x6807;&#x8BB0;&#x53EF;&#x884C;&#x89E3;&#xFF0C;ans&#x786E;&#x4FDD;&#x53EF;&#x884C;&#x89E3;&#x4EC5;&#x4E00;&#x7EC4;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i){</span><br><span class="line">flag = <span class="number">0</span>;   </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j){</span><br><span class="line"><span class="keyword">if</span>(a[j] == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(a[j] != v[i][j])</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">0</span>){</span><br><span class="line"><span class="keyword">if</span>(ans == <span class="number">-1</span>)</span><br><span class="line">ans = i;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ans = <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i){</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(judge(a) != <span class="number">-1</span>){ <span class="comment">//&#x5F53;&#x4E14;&#x4EC5;&#x5F53;&#x8FD4;&#x56DE;&#x503C;&#x4E0D;&#x4E3A;-1&#xFF0C;&#x4EC5;&#x6709;&#x4E00;&#x7EC4;&#x53EF;&#x884C;&#x89E3;</span></span><br><span class="line"><span class="keyword">int</span> j = judge(a);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i){</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">3</span> == <span class="number">2</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, v[j][i]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, v[j][i]);</span><br><span class="line">}</span><br><span class="line">}<span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Too Many\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>·【蓝桥】·拉马车</title>
      <link href="/2020/08/16/%E8%93%9D%E6%A1%A5-%E6%8B%89%E9%A9%AC%E8%BD%A6/"/>
      <url>/2020/08/16/%E8%93%9D%E6%A1%A5-%E6%8B%89%E9%A9%AC%E8%BD%A6/</url>
      
        <content type="html"><![CDATA[<p>&#x62C9;&#x9A6C;&#x8F66;&#xFF08;&#x6211;&#x5C0F;&#x65F6;&#x5019;&#x7BA1;&#x8FD9;&#x4E2A;&#x53EB;&#x62D6;&#x62C9;&#x673A;&#xFF09;&#x7684;&#x6E38;&#x620F;&#x4F7F;&#x7528;&#x7B97;&#x6CD5;&#x9884;&#x6D4B;&#x6700;&#x7EC8;&#x7ED3;&#x679C;&#xFF0C;&#x60F3;&#x60F3;&#x8FD8;&#x662F;&#x633A;&#x6709;&#x610F;&#x601D;&#x7684;~<br>&#x8BE5;&#x9898;&#x53EF;&#x4F5C;&#x4E3A;&#x4E00;&#x9053;&#x7EC3;&#x4E60;&#x9012;&#x5F52;&#x7684;&#x4F8B;&#x9898;~</p><blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;&#xFF1A;<br><a href="http://lx.lanqiao.cn/problem.page?gpid=T447" target="_blank">&#x9752;&#x86D9;&#x8DF3;&#x676F;&#x5B50;</a></p></blockquote><a id="more"></a><blockquote><p>&#x95EE;&#x9898;&#x63CF;&#x8FF0;<br>&#x3000;&#x3000;&#x5C0F;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F60;&#x73A9;&#x8FC7;&#x7EB8;&#x724C;&#x6E38;&#x620F;&#x5417;&#xFF1F;<br>&#x3000;&#x3000;&#x6709;&#x4E00;&#x79CD;&#x53EB;&#x505A;&#x201C;&#x62C9;&#x9A6C;&#x8F66;&#x201D;&#x7684;&#x6E38;&#x620F;&#xFF0C;&#x89C4;&#x5219;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5374;&#x5F88;&#x5438;&#x5F15;&#x5C0F;&#x670B;&#x53CB;&#x3002;<br>&#x3000;&#x3000;&#x5176;&#x89C4;&#x5219;&#x7B80;&#x8FF0;&#x5982;&#x4E0B;&#xFF1A;<br>&#x3000;&#x3000;&#x5047;&#x8BBE;&#x53C2;&#x52A0;&#x6E38;&#x620F;&#x7684;&#x5C0F;&#x670B;&#x53CB;&#x662F;A&#x548C;B&#xFF0C;&#x6E38;&#x620F;&#x5F00;&#x59CB;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4ED6;&#x4EEC;&#x5F97;&#x5230;&#x7684;&#x968F;&#x673A;&#x7684;&#x7EB8;&#x724C;&#x5E8F;&#x5217;&#x5982;&#x4E0B;&#xFF1A;<br>&#x3000;&#x3000;A&#x65B9;&#xFF1A;[K, 8, X, K, A, 2, A, 9, 5, A]<br>&#x3000;&#x3000;B&#x65B9;&#xFF1A;[2, 7, K, 5, J, 5, Q, 6, K, 4]<br>&#x3000;&#x3000;&#x5176;&#x4E2D;&#x7684;X&#x8868;&#x793A;&#x201C;10&#x201D;&#xFF0C;&#x6211;&#x4EEC;&#x5FFD;&#x7565;&#x4E86;&#x7EB8;&#x724C;&#x7684;&#x82B1;&#x8272;&#x3002;<br>&#x3000;&#x3000;&#x4ECE;A&#x65B9;&#x5F00;&#x59CB;&#xFF0C;A&#x3001;B&#x53CC;&#x65B9;&#x8F6E;&#x6D41;&#x51FA;&#x724C;&#x3002;<br>&#x3000;&#x3000;&#x5F53;&#x8F6E;&#x5230;&#x67D0;&#x4E00;&#x65B9;&#x51FA;&#x724C;&#x65F6;&#xFF0C;&#x4ED6;&#x4ECE;&#x81EA;&#x5DF1;&#x7684;&#x7EB8;&#x724C;&#x961F;&#x5217;&#x7684;&#x5934;&#x90E8;&#x62FF;&#x8D70;&#x4E00;&#x5F20;&#xFF0C;&#x653E;&#x5230;&#x684C;&#x4E0A;&#xFF0C;&#x5E76;&#x4E14;&#x538B;&#x5728;&#x6700;&#x4E0A;&#x9762;&#x4E00;&#x5F20;&#x7EB8;&#x724C;&#x4E0A;&#xFF08;&#x5982;&#x679C;&#x6709;&#x7684;&#x8BDD;&#xFF09;&#x3002;<br>&#x3000;&#x3000;&#x6B64;&#x4F8B;&#x4E2D;&#xFF0C;&#x6E38;&#x620F;&#x8FC7;&#x7A0B;&#xFF1A;<br>&#x3000;&#x3000;A&#x51FA;K&#xFF0C;B&#x51FA;2&#xFF0C;A&#x51FA;8&#xFF0C;B&#x51FA;7&#xFF0C;A&#x51FA;X&#xFF0C;&#x6B64;&#x65F6;&#x684C;&#x4E0A;&#x7684;&#x5E8F;&#x5217;&#x4E3A;&#xFF1A;<br>&#x3000;&#x3000;K,2,8,7,X<br>&#x3000;&#x3000;&#x5F53;&#x8F6E;&#x5230;B&#x51FA;&#x724C;&#x65F6;&#xFF0C;&#x4ED6;&#x7684;&#x724C;K&#x4E0E;&#x684C;&#x4E0A;&#x7684;&#x7EB8;&#x724C;&#x5E8F;&#x5217;&#x4E2D;&#x7684;K&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x628A;&#x5305;&#x62EC;K&#x5728;&#x5185;&#x7684;&#x4EE5;&#x53CA;&#x4E24;&#x4E2A;K&#x4E4B;&#x95F4;&#x7684;&#x7EB8;&#x724C;&#x90FD;&#x8D62;&#x56DE;&#x6765;&#xFF0C;&#x653E;&#x5165;&#x81EA;&#x5DF1;&#x724C;&#x7684;&#x961F;&#x5C3E;&#x3002;&#x6CE8;&#x610F;&#xFF1A;&#x4E3A;&#x4E86;&#x64CD;&#x4F5C;&#x65B9;&#x4FBF;&#xFF0C;&#x653E;&#x5165;&#x724C;&#x7684;&#x987A;&#x5E8F;&#x662F;&#x4E0E;&#x684C;&#x4E0A;&#x7684;&#x987A;&#x5E8F;&#x76F8;&#x53CD;&#x7684;&#x3002;<br>&#x3000;&#x3000;&#x6B64;&#x65F6;&#xFF0C;A&#x3001;B&#x53CC;&#x65B9;&#x7684;&#x624B;&#x91CC;&#x724C;&#x4E3A;&#xFF1A;<br>&#x3000;&#x3000;A&#x65B9;&#xFF1A;[K, A, 2, A, 9, 5, A]<br>&#x3000;&#x3000;B&#x65B9;&#xFF1A;[5, J, 5, Q, 6, K, 4, K, X, 7, 8, 2, K]<br>&#x3000;&#x3000;&#x8D62;&#x724C;&#x7684;&#x4E00;&#x65B9;&#x7EE7;&#x7EED;&#x51FA;&#x724C;&#x3002;&#x4E5F;&#x5C31;&#x662F;B&#x63A5;&#x7740;&#x51FA;5&#xFF0C;A&#x51FA;K&#xFF0C;B&#x51FA;J&#xFF0C;A&#x51FA;A&#xFF0C;B&#x51FA;5&#xFF0C;&#x53C8;&#x8D62;&#x724C;&#x4E86;&#x3002;<br>&#x3000;&#x3000;5,K,J,A,5<br>&#x3000;&#x3000;&#x6B64;&#x65F6;&#x53CC;&#x65B9;&#x624B;&#x91CC;&#x724C;&#xFF1A;<br>&#x3000;&#x3000;A&#x65B9;&#xFF1A;[2, A, 9, 5, A]<br>&#x3000;&#x3000;B&#x65B9;&#xFF1A;[Q, 6, K, 4, K, X, 7, 8, 2, K, 5, A, J, K, 5]<br>&#x3000;&#x3000;&#x6CE8;&#x610F;&#xFF1A;&#x66F4;&#x591A;&#x7684;&#x65F6;&#x5019;&#x8D62;&#x724C;&#x7684;&#x4E00;&#x65B9;&#x5E76;&#x4E0D;&#x80FD;&#x628A;&#x684C;&#x4E0A;&#x7684;&#x724C;&#x90FD;&#x8D62;&#x8D70;&#xFF0C;&#x800C;&#x662F;&#x62FF;&#x8D70;&#x76F8;&#x540C;&#x724C;&#x70B9;&#x53CA;&#x5176;&#x4E2D;&#x95F4;&#x7684;&#x90E8;&#x5206;&#x3002;&#x4F46;&#x65E0;&#x8BBA;&#x5982;&#x4F55;&#xFF0C;&#x90FD;&#x662F;&#x8D62;&#x724C;&#x7684;&#x4E00;&#x65B9;&#x7EE7;&#x7EED;&#x51FA;&#x724C;&#xFF0C;&#x6709;&#x7684;&#x65F6;&#x5019;&#x521A;&#x4E00;&#x51FA;&#x724C;&#x53C8;&#x8D62;&#x4E86;&#xFF0C;&#x4E5F;&#x662F;&#x5141;&#x8BB8;&#x7684;<br>&#x3000;&#x3000;&#x5F53;&#x67D0;&#x4E00;&#x65B9;&#x51FA;&#x6389;&#x624B;&#x91CC;&#x6700;&#x540E;&#x4E00;&#x5F20;&#x724C;&#xFF0C;&#x4F46;&#x65E0;&#x6CD5;&#x4ECE;&#x684C;&#x9762;&#x4E0A;&#x8D62;&#x53D6;&#x724C;&#x65F6;&#xFF0C;&#x6E38;&#x620F;&#x7ACB;&#x5373;&#x7ED3;&#x675F;&#x3002;<br>&#x3000;&#x3000;&#x5BF9;&#x4E8E;&#x672C;&#x4F8B;&#x7684;&#x521D;&#x59CB;&#x624B;&#x724C;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6700;&#x540E;A&#x4F1A;&#x8F93;&#x6389;&#xFF0C;&#x800C;B&#x6700;&#x540E;&#x7684;&#x624B;&#x91CC;&#x724C;&#x4E3A;&#xFF1A;<br>&#x3000;&#x3000;9K2A62KAX58K57KJ5<br>&#x3000;&#x3000;&#x672C;&#x9898;&#x7684;&#x4EFB;&#x52A1;&#x5C31;&#x662F;&#x5DF2;&#x77E5;&#x53CC;&#x65B9;&#x521D;&#x59CB;&#x724C;&#x5E8F;&#xFF0C;&#x8BA1;&#x7B97;&#x6E38;&#x620F;&#x7ED3;&#x675F;&#x65F6;&#xFF0C;&#x8D62;&#x7684;&#x4E00;&#x65B9;&#x624B;&#x91CC;&#x7684;&#x724C;&#x5E8F;&#x3002;&#x5F53;&#x6E38;&#x620F;&#x65E0;&#x6CD5;&#x7ED3;&#x675F;&#x65F6;&#xFF0C;&#x8F93;&#x51FA;-1&#x3002;<br>&#x3000;&#x3000;&#x8F93;&#x5165;&#x4E3A;2&#x884C;&#xFF0C;2&#x4E2A;&#x4E32;&#xFF0C;&#x5206;&#x522B;&#x8868;&#x793A;A&#x3001;B&#x53CC;&#x65B9;&#x521D;&#x59CB;&#x624B;&#x91CC;&#x7684;&#x724C;&#x5E8F;&#x5217;&#x3002;<br>&#x3000;&#x3000;&#x8F93;&#x51FA;&#x4E3A;1&#x884C;&#xFF0C;1&#x4E2A;&#x4E32;&#xFF0C;&#x8868;&#x793A;A&#x5148;&#x51FA;&#x724C;&#xFF0C;&#x6700;&#x540E;&#x8D62;&#x7684;&#x4E00;&#x65B9;&#x624B;&#x91CC;&#x7684;&#x724C;&#x5E8F;&#x3002;<br>&#x6837;&#x4F8B;&#x8F93;&#x5165;<br>96J5A898QA<br>6278A7Q973<br>&#x6837;&#x4F8B;&#x8F93;&#x51FA;<br>2J9A7QA6Q6889977<br>&#x6837;&#x4F8B;&#x8F93;&#x5165;<br>25663K6X7448<br>J88A5KJXX45A<br>&#x6837;&#x4F8B;&#x8F93;&#x51FA;<br>6KAJ458KXAX885XJ645<br>&#x6570;&#x636E;&#x89C4;&#x6A21;&#x548C;&#x7EA6;&#x5B9A;<br>&#x3000;&#x3000;&#x6211;&#x4EEC;&#x7EA6;&#x5B9A;&#xFF0C;&#x8F93;&#x5165;&#x7684;&#x4E32;&#x7684;&#x957F;&#x5EA6;&#x4E0D;&#x8D85;&#x8FC7;30<br>&#x3000;&#x3000;&#x8D44;&#x6E90;&#x7EA6;&#x5B9A;&#xFF1A;<br>&#x3000;&#x3000;&#x5CF0;&#x503C;&#x5185;&#x5B58;&#x6D88;&#x8017;&#xFF08;&#x542B;&#x865A;&#x62DF;&#x673A;&#xFF09; &lt; 256M<br>&#x3000;&#x3000;CPU&#x6D88;&#x8017; &lt; 1000ms</p></blockquote><p><strong>&#x9898;&#x76EE;&#x5206;&#x6790;</strong></p><ol><li>&#x4F9D;&#x6B21;&#x8BB0;&#x5B57;&#x7B26;&#x4E32;a,b,c&#x4E3A;A&#x65B9;&#xFF0C;B&#x65B9;&#xFF0C;&#x684C;&#x9762;&#x4E0A;&#x7684;&#x724C;</li><li>A,B&#x4F9D;&#x6B21;&#x6478;&#x724C;&#xFF0C;&#x91CD;&#x590D;&#x4EE5;&#x4E0B;&#x6B65;&#x9AA4;&#xFF1A;<br>&#x82E5;&#x6709;&#x6761;&#x4EF6;&#x62FF;&#x684C;&#x9762;&#x4E0A;&#x7684;&#x724C;&#xFF0C;&#x5C06;&#x5176;&#x9006;&#x5E8F;&#x7EB3;&#x4E3A;&#x5DF1;&#x7528;&#xFF1B;<br>&#x53CD;&#x4E4B;&#xFF0C;&#x4E22;&#x6389;&#x7B2C;&#x4E00;&#x5F20;&#x724C;</li></ol><p>***&#x6CE8;&#xFF1A;&#x7279;&#x522B;&#x6CE8;&#x610F;&#x62FF;&#x724C;&#x3001;&#x4E22;&#x724C;&#x662F;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x589E;&#x52A0;&#x3001;&#x5220;&#x9664;&#x7EC6;&#x8282;</p><p>judge&#x51FD;&#x6570;&#xFF0C;&#x684C;&#x9762;&#x4E0A;&#x7684;&#x724C;&#x548C;&#x81EA;&#x5DF1;&#x7B2C;&#x4E00;&#x5F20;&#x724C;&#x6709;&#x91CD;&#x590D;&#xFF0C;&#x6EE1;&#x8DB3;&#x62FF;&#x724C;&#x7684;&#x6761;&#x4EF6;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">char</span> ch)</span></span>{</span><br><span class="line"><span class="keyword">return</span> c.find(ch) == <span class="built_in">string</span>::npos;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>~&#x4E0D;&#x5F97;&#x4E0D;&#x8BF4;dfs&#x4EE3;&#x7801;&#x5199;&#x7684;&#x5197;&#x4F59;&#x6709;&#x70B9;&#x9AD8;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> a, b, c;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">char</span> ch)</span></span>{</span><br><span class="line"><span class="keyword">return</span> c.find(ch) == <span class="built_in">string</span>::npos;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">string</span> &amp;s, <span class="keyword">char</span> ch)</span></span>{<span class="comment">//&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#xFF0C;&#x53EF;&#x62FF;&#x724C;</span></span><br><span class="line">s += ch;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = c.size()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i){</span><br><span class="line"><span class="keyword">if</span>(c[i] == ch)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">s += c[i];</span><br><span class="line">}</span><br><span class="line">s += ch;</span><br><span class="line">c.erase(c.begin()+c.find(ch), c.end());</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>{<span class="comment">//x=0&#xFF0C;&#x64CD;&#x4F5C;a&#xFF1B;x=1&#xFF0C;&#x64CD;&#x4F5C;b</span></span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">0</span>){</span><br><span class="line"><span class="keyword">if</span>(judge(a[<span class="number">0</span>])){ <span class="comment">//add c &#x4E22;&#x724C;</span></span><br><span class="line">c += a[<span class="number">0</span>]; </span><br><span class="line">a.erase(a.begin());</span><br><span class="line"><span class="keyword">if</span>(a.empty())</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line">}<span class="keyword">else</span>{ <span class="comment">//add a &#x62FF;&#x724C;</span></span><br><span class="line">solve(a, a[<span class="number">0</span>]);</span><br><span class="line">a.erase(a.begin());</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">if</span>(judge(b[<span class="number">0</span>])){<span class="comment">//add c &#x4E22;&#x724C;</span></span><br><span class="line">c += b[<span class="number">0</span>];</span><br><span class="line">b.erase(b.begin());</span><br><span class="line"><span class="keyword">if</span>(b.empty())</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{<span class="comment">//add b &#x62FF;&#x724C;</span></span><br><span class="line">solve(b, b[<span class="number">0</span>]);</span><br><span class="line">b.erase(b.begin());</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(a.empty())</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span>(b.empty())</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>·【蓝桥】·Excel地址</title>
      <link href="/2020/08/11/%E8%93%9D%E6%A1%A5-Excel%E5%9C%B0%E5%9D%80/"/>
      <url>/2020/08/11/%E8%93%9D%E6%A1%A5-Excel%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p>&#x672C;&#x9898;&#x8003;&#x67E5;&#x4E86;&#x8FDB;&#x5236;&#x8F6C;&#x6362;&#x76F8;&#x5173;&#x77E5;&#x8BC6;&#x3002;<br>&#x9898;&#x76EE;&#x6765;&#x6E90;&#xFF1A;<a href="http://lx.lanqiao.cn/problem.page?gpid=T445" target="_blank">Excel&#x5730;&#x5740;</a></p><a id="more"></a><blockquote><p>&#x95EE;&#x9898;&#x63CF;&#x8FF0;<br>&#x3000;&#x3000;Excel&#x5355;&#x5143;&#x683C;&#x7684;&#x5730;&#x5740;&#x8868;&#x793A;&#x5F88;&#x6709;&#x8DA3;&#xFF0C;&#x5B83;&#x4F7F;&#x7528;&#x5B57;&#x6BCD;&#x6765;&#x8868;&#x793A;&#x5217;&#x53F7;&#x3002;<br>&#x3000;&#x3000;&#x6BD4;&#x5982;&#xFF0C;<br>&#x3000;&#x3000;A&#x8868;&#x793A;&#x7B2C;1&#x5217;&#xFF0C;<br>&#x3000;&#x3000;B&#x8868;&#x793A;&#x7B2C;2&#x5217;&#xFF0C;<br>&#x3000;&#x3000;Z&#x8868;&#x793A;&#x7B2C;26&#x5217;&#xFF0C;<br>&#x3000;&#x3000;AA&#x8868;&#x793A;&#x7B2C;27&#x5217;&#xFF0C;<br>&#x3000;&#x3000;AB&#x8868;&#x793A;&#x7B2C;28&#x5217;&#xFF0C;<br>&#x3000;&#x3000;BA&#x8868;&#x793A;&#x7B2C;53&#x5217;&#xFF0C;<br>&#x3000;&#x3000;&#x2026;.<br>&#x3000;&#x3000;&#x5F53;&#x7136;Excel&#x7684;&#x6700;&#x5927;&#x5217;&#x53F7;&#x662F;&#x6709;&#x9650;&#x5EA6;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x8F6C;&#x6362;&#x8D77;&#x6765;&#x4E0D;&#x96BE;&#x3002;<br>&#x3000;&#x3000;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x60F3;&#x628A;&#x8FD9;&#x79CD;&#x8868;&#x793A;&#x6CD5;&#x4E00;&#x822C;&#x5316;&#xFF0C;&#x53EF;&#x4EE5;&#x628A;&#x5F88;&#x5927;&#x7684;&#x6570;&#x5B57;&#x8F6C;&#x6362;&#x4E3A;&#x5F88;&#x957F;&#x7684;&#x5B57;&#x6BCD;&#x5E8F;&#x5217;&#x5462;&#xFF1F;<br>&#x3000;&#x3000;&#x672C;&#x9898;&#x76EE;&#x5373;&#x662F;&#x8981;&#x6C42;&#x5BF9;&#x8F93;&#x5165;&#x7684;&#x6570;&#x5B57;, &#x8F93;&#x51FA;&#x5176;&#x5BF9;&#x5E94;&#x7684;Excel&#x5730;&#x5740;&#x8868;&#x793A;&#x65B9;&#x5F0F;&#x3002;<br>&#x6837;&#x4F8B;&#x8F93;&#x5165;<br>26<br>&#x6837;&#x4F8B;&#x8F93;&#x51FA;<br>Z<br>&#x6837;&#x4F8B;&#x8F93;&#x5165;<br>2054<br>&#x6837;&#x4F8B;&#x8F93;&#x51FA;<br>BZZ<br>&#x6570;&#x636E;&#x89C4;&#x6A21;&#x548C;&#x7EA6;&#x5B9A;<br>&#x3000;&#x3000;&#x6211;&#x4EEC;&#x7EA6;&#x5B9A;&#xFF0C;&#x8F93;&#x5165;&#x7684;&#x6574;&#x6570;&#x8303;&#x56F4;[1,2147483647]<br>&#x3000;&#x3000;&#x5CF0;&#x503C;&#x5185;&#x5B58;&#x6D88;&#x8017;&#xFF08;&#x542B;&#x865A;&#x62DF;&#x673A;&#xFF09; &lt; 256M<br>&#x3000;&#x3000;CPU&#x6D88;&#x8017; &lt; 1000ms</p></blockquote><p><strong>&#x9898;&#x76EE;&#x5206;&#x6790;</strong><br>&#x770B;&#x5B8C;&#x9898;&#x76EE;&#x5F88;&#x5BB9;&#x6613;&#x60F3;&#x5230;&#x8DDF;&#x8FDB;&#x5236;&#x8F6C;&#x6362;&#x6709;&#x5173;&#xFF0C;&#x5982;<br>AB: 28($26^1 \times 1+ 26^0 \times2$)<br>BA: 53($26^1 \times 2+ 26^0 \times1$)<br>&#x53C8;&#x5982;&#x7B2C;&#x4E8C;&#x7EC4;&#x6837;&#x4F8B;<br>2054&#xFF1A;BZZ($26^2 \times2+26^1 \times26+26^0 \times26$)<br>&#x8FD9;&#x4E0D;&#x5C31;&#x662F;26&#x8FDB;&#x5236;&#x8F6C;&#x6362;&#xFF0C;&#x6570;&#x5B57;&#x501F;&#x52A9;ASCII&#x8F6C;&#x6210;&#x5B57;&#x7B26;&#x5417;&#xFF1F;<br>&#x5174;&#x594B;&#x4E4B;&#x4F59;&#xFF0C;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#x539F;26&#x8FDB;&#x5236;&#x7684;&#x6BCF;&#x4F4D;&#x4F9D;&#x6B21;&#x5BF9;&#x5E94;<br>0<del>25 &#x2192; A</del>Z<br>&#x672C;&#x9898;&#x7684;26&#x8FDB;&#x5236;&#x7684;&#x6BCF;&#x4F4D;&#x4F9D;&#x6B21;&#x5BF9;&#x5E94;<br>1<del>26 &#x2192; A</del>Z<br>&#x4E5F;&#x5C31;&#x662F;&#x6CA1;&#x6709;0&#x7684;26&#x8FDB;&#x5236;&#xFF0C;&#x8F6C;&#x6362;&#x7684;&#x65F6;&#x5019;&#x5176;&#x5B9E;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x51CF;&#x4E2A;1&#x5C31;&#x5B8C;&#x4E8B;&#x513F;&#x4E86;&#xFF01;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">change</span><span class="params">(<span class="keyword">char</span> c)</span></span>{<span class="comment">//&#x5B57;&#x7B26;&#x8F6C;&#x5B57;&#x7B26;&#x4E32;</span></span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line">ss &lt;&lt; c;</span><br><span class="line"><span class="keyword">return</span> ss.str();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span>(n){</span><br><span class="line">n--;    <span class="comment">//&#x51CF;1&#x5F88;&#x5173;&#x952E;</span></span><br><span class="line">s = change(<span class="keyword">char</span>((n)%<span class="number">26</span>+<span class="string">&apos;A&apos;</span>)) + s;<span class="comment">//&#x8F6C;&#x6362;&#x5F97;&#x5230;&#x7684;&#x5B57;&#x7B26;&#x662F;&#x4ECE;&#x53F3;&#x81F3;&#x5DE6;&#x7684;</span></span><br><span class="line">n /= <span class="number">26</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; s &lt;&lt; endl;</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥-正则问题</title>
      <link href="/2020/08/11/%E8%93%9D%E6%A1%A5-%E6%AD%A3%E5%88%99%E9%97%AE%E9%A2%98/"/>
      <url>/2020/08/11/%E8%93%9D%E6%A1%A5-%E6%AD%A3%E5%88%99%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>&#x9898;&#x76EE;&#x6765;&#x6E90;&#xFF1A; <a href="http://lx.lanqiao.cn/problem.page?gpid=T439" target="_blank" rel="noopener">http://lx.lanqiao.cn/problem.page?gpid=T439</a><br>&#x672C;&#x9898;&#x53EF;&#x4F5C;&#x4E3A;&#x4E00;&#x9053;&#x7EC3;&#x4E60;&#x9012;&#x5F52;&#x7684;&#x4F8B;&#x9898;~</p><blockquote><p>&#x95EE;&#x9898;&#x63CF;&#x8FF0;<br>&#x3000;&#x3000;&#x8003;&#x8651;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#xFF1A;<br>&#x3000;&#x3000;&#x53EA;&#x7531; x ( ) | &#x7EC4;&#x6210;&#x7684;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x3002;<br>&#x3000;&#x3000;&#x5C0F;&#x660E;&#x60F3;&#x6C42;&#x51FA;&#x8FD9;&#x4E2A;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x80FD;&#x63A5;&#x53D7;&#x7684;&#x6700;&#x957F;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x957F;&#x5EA6;&#x3002;<br>&#x3000;&#x3000;&#x4F8B;&#x5982; ((xx|xxx)x|(x|xx))xx &#x80FD;&#x63A5;&#x53D7;&#x7684;&#x6700;&#x957F;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#xFF1A; xxxxxx&#xFF0C;&#x957F;&#x5EA6;&#x662F;6&#x3002;<br>&#x8F93;&#x5165;&#x683C;&#x5F0F;<br>&#x3000;&#x3000;&#x4E00;&#x4E2A;&#x7531;x()|&#x7EC4;&#x6210;&#x7684;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x3002;&#x8F93;&#x5165;&#x957F;&#x5EA6;&#x4E0D;&#x8D85;&#x8FC7;100&#xFF0C;&#x4FDD;&#x8BC1;&#x5408;&#x6CD5;&#x3002;<br>&#x8F93;&#x51FA;&#x683C;&#x5F0F;<br>&#x3000;&#x3000;&#x8FD9;&#x4E2A;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x80FD;&#x63A5;&#x53D7;&#x7684;&#x6700;&#x957F;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x957F;&#x5EA6;&#x3002;<br>&#x6837;&#x4F8B;&#x8F93;&#x5165;<br>((xx|xxx)x|(x|xx))xx<br>&#x6837;&#x4F8B;&#x8F93;&#x51FA;<br>6<br>&#x6570;&#x636E;&#x89C4;&#x6A21;&#x548C;&#x7EA6;&#x5B9A;<br>&#x3000;&#x3000;&#x5CF0;&#x503C;&#x5185;&#x5B58;&#x6D88;&#x8017;&#xFF08;&#x542B;&#x865A;&#x62DF;&#x673A;&#xFF09; &lt; 256M<br>&#x3000;&#x3000;CPU&#x6D88;&#x8017; &lt; 1000ms</p></blockquote><p><strong>&#x9898;&#x76EE;&#x5206;&#x6790;</strong><br>&#x5BF9;&#x4E8E;&#x7ED9;&#x5B9A;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x53EA;&#x9700;&#x5229;&#x7528;|&#xFF08;&#x6216;&#x8FD0;&#x7B97;&#x7684;&#x6027;&#x8D28;&#xFF09;&#x8BA1;&#x7B97;&#x5373;&#x53EF;&#xFF0C;&#x8FDE;&#x7EED;&#x7684;x&#x7D2F;&#x52A0;&#x957F;&#x5EA6;<br>&#x5982;&#x8F93;&#x5165;&#x6837;&#x4F8B;&#xFF1A; ((xx|xxx)x|(x|xx))xx<br>((2|3)1|(1|2))2 = (4|2)2 = 6<br>&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x4E0D;&#x9519;&#x7684;&#x7EC3;&#x4E60;&#x9012;&#x5F52;&#x7684;&#x4F8B;&#x9898;&#xFF01;</p><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>pos&#x4ECE;&#x5B57;&#x7B26;&#x4E32;&#x4E0B;&#x6807;&#x4E3A;0&#x5904;&#x5F00;&#x59CB;&#x626B;&#x63CF;&#xFF0C;&#x626B;&#x63CF;&#x5B8C;&#x5373;&#x53EF;&#xFF0C;&#x6BCF;&#x4E2A;&#xFF08;&#x2026;&#xFF09;&#x4F5C;&#x4E3A;&#x4E00;&#x5C42;&#x9012;&#x5F52;<br>switch(s[pos]){<br>    case &#x2018;(&#x2018;: &#x9047;&#x5230;&#xFF08;&#x5411;&#x4E0B;&#x9012;&#x5F52;&#x4E00;&#x5C42;<br>    case &#x2018;x&#x2019;: &#x8FDE;&#x7EED;&#x7684;x&#x7D2F;&#x52A0;&#x957F;&#x5EA6;&#xFF0C;now++<br>    case &#x2018;|&#x2019;: &#x66F4;&#x65B0;&#x4E00;&#x4E0B;ans&#xFF0C;&#x8003;&#x8651;&#x5230;&#x540E;&#x9762;&#x8FD8;&#x6709;x&#xFF0C;now=0<br>    case &#x2018;)&#x2019;&#xFF1A;&#x66F4;&#x65B0;&#x4E00;&#x4E0B;ans&#xFF0C;&#x8FD9;&#x4E00;&#x5C42;&#x9012;&#x5F52;&#x7ED3;&#x675F;<br>}</p><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">0</span>, len;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>, now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(pos &lt; len){</span><br><span class="line"><span class="keyword">if</span>(s[pos] == <span class="string">&apos;(&apos;</span>){</span><br><span class="line">pos++;</span><br><span class="line">now += solve();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[pos] == <span class="string">&apos;x&apos;</span>){</span><br><span class="line">pos++;</span><br><span class="line">now++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[pos] == <span class="string">&apos;|&apos;</span>){</span><br><span class="line">pos++;</span><br><span class="line">ans = max(ans, now);</span><br><span class="line">now = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line">pos++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">ans = max(now, ans);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">len = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, solve());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客-Rabbit的工作</title>
      <link href="/2020/07/12/%E7%89%9B%E5%AE%A2-Rabbit%E7%9A%84%E5%B7%A5%E4%BD%9C/"/>
      <url>/2020/07/12/%E7%89%9B%E5%AE%A2-Rabbit%E7%9A%84%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>&#x8BE5;&#x9898;&#x8003;&#x5BDF;&#x4E86;&#x5B8C;&#x5168;&#x80CC;&#x5305;<br>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="https://ac.nowcoder.com/acm/problem/21186" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/problem/21186</a></p><a id="more"></a><p>&#x611F;&#x8C22;&#x535A;&#x5BA2;1&#xFF1A;<a href="https://ac.nowcoder.com/acm/problem/blogs/21186" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/problem/blogs/21186</a><br>&#x611F;&#x8C22;&#x535A;&#x5BA2;2&#xFF1A;<a href="https://blog.csdn.net/zygnewczh/article/details/107188919" target="_blank" rel="noopener">https://blog.csdn.net/zygnewczh/article/details/107188919</a><br>&#x5F53;&#x7136;&#x66F4;&#x8981;&#x611F;&#x8C22;&#x7ECF;&#x5178;&#x7684;&#xFF1A;<a href="https://www.kancloud.cn/kancloud/pack/70125" target="_blank">&#x80CC;&#x5305;&#x95EE;&#x9898;&#x4E5D;&#x8BB2;</a></p><blockquote><p>&#x9898;&#x76EE;&#x63CF;&#x8FF0;<br>Rabbit&#x901A;&#x8FC7;&#x4E86;&#x4E0A;&#x6B21;boss&#x7684;&#x8003;&#x6838;&#xFF0C;&#x73B0;&#x5728;&#x5979;&#x53C8;&#x9047;&#x5230;&#x4E86;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#x3002;<br>Rabbit&#x63A5;&#x5230;&#x4E86;K&#x4E2A;&#x4EFB;&#x52A1;&#xFF0C;&#x6BCF;&#x4E2A;&#x4EFB;&#x52A1;&#x5979;&#x53EF;&#x4EE5;&#x81EA;&#x7531;&#x9009;&#x62E9;&#x7528;i&#x5929;&#x53BB;&#x5B8C;&#x6210;(1&#x2264; i&#x2264; N)&#x3002;&#x5201;&#x94BB;&#x7684;boss&#x60F3;&#x8BA9;Rabbit&#x6070;&#x597D;&#x7528;W&#x5929;&#x5B8C;&#x6210;&#x6240;&#x6709;&#x4EFB;&#x52A1;&#x3002;<br>&#x5DF2;&#x77E5;Rabbit&#x7528;i&#x5929;&#x5B8C;&#x6210;&#x4E00;&#x4E2A;&#x4EFB;&#x52A1;&#x80FD;&#x8BA9;boss&#x83B7;&#x5F97;&#x7684;&#x6EE1;&#x610F;&#x5EA6;&#x4E3A;vi(&#x56E0;&#x4E3A;&#x5B8C;&#x6210;&#x4EFB;&#x52A1;&#x7684;&#x8D28;&#x91CF;&#x4E0D;&#x540C;)&#xFF0C;&#x5979;&#x60F3;&#x77E5;&#x9053;&#x5728;&#x6EE1;&#x8DB3;boss&#x8981;&#x6C42;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x80FD;&#x8BA9;boss&#x83B7;&#x5F97;&#x7684;&#x603B;&#x6EE1;&#x610F;&#x5EA6;&#x6700;&#x5927;&#x662F;&#x591A;&#x5C11;&#x3002;<br>&#x8F93;&#x5165;&#x63CF;&#x8FF0;:<br>&#x7B2C;&#x4E00;&#x884C;&#x4E09;&#x4E2A;&#x6574;&#x6570;N&#xFF0C;K&#xFF0C;W&#x3002;<br>&#x7B2C;&#x4E8C;&#x884C;N&#x4E2A;&#x6574;&#x6570;vi&#xFF0C;vi&#x8868;&#x793A;&#x7528;i&#x5929;&#x5B8C;&#x6210;&#x4E00;&#x4E2A;&#x4EFB;&#x52A1;&#x80FD;&#x8BA9;boss&#x83B7;&#x5F97;&#x7684;&#x6EE1;&#x610F;&#x5EA6;&#x3002;<br>&#x8F93;&#x51FA;&#x63CF;&#x8FF0;:<br>&#x8F93;&#x51FA;Rabbit&#x5728;&#x6EE1;&#x8DB3;boss&#x8981;&#x6C42;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x80FD;&#x8BA9;boss&#x83B7;&#x5F97;&#x7684;&#x603B;&#x6EE1;&#x610F;&#x5EA6;&#x6700;&#x5927;&#x662F;&#x591A;&#x5C11;&#x3002;<br>&#x793A;&#x4F8B;1<br>&#x8F93;&#x5165;:<br>3 3 5<br>6 2 4<br>&#x8F93;&#x51FA;:<br>16<br>&#x8BF4;&#x660E;:<br>Rabbit&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x5206;&#x522B;&#x7528;1&#x5929;&#xFF0C;1&#x5929;&#xFF0C;3&#x5929;&#x5B8C;&#x6210;&#x8FD9;&#x4E09;&#x4E2A;&#x4EFB;&#x52A1;&#xFF0C;&#x6700;&#x5927;&#x6EE1;&#x610F;&#x5EA6;&#x4E3A;6+6+4=16<br>&#x5907;&#x6CE8;:<br>2&#x2264; N,K&#x2264; 2000,K&#x2264; W&#x2264; min(4000,2*K)<br>0&lt; vi &#x2264;10000</p></blockquote><p><strong>&#x9898;&#x76EE;&#x5206;&#x6790;</strong><br>&#x8BE5;&#x9898;&#x5F88;&#x50CF;&#x662F;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5957;&#x7528;&#x5B8C;&#x5168;&#x80CC;&#x5305;:<br>&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x2014;&#x2014;W&#x5929;   &#x7269;&#x54C1;&#x4EF6;&#x6570;&#x2014;&#x2014;N<br>&#x7269;&#x54C1;&#x8D39;&#x7528;&#x2014;&#x2014;&#x5B8C;&#x6210;&#x4E00;&#x4E2A;&#x4EFB;&#x52A1;&#x6240;&#x9700;&#x5929;&#x6570;i     &#x7269;&#x54C1;&#x4EF7;&#x503C;&#x2014;&#x2014;&#x6EE1;&#x610F;&#x5EA6;vi<br>&#x6700;&#x4F18;&#x89E3;&#x7684;&#x540C;&#x65F6;&#x8981;&#x6C42;&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x88C5;&#x6EE1;&#x2014;&#x2014;&#x6070;&#x7528;W&#x5929;&#x5B8C;&#x6210;<br>**<em>&#x7136;&#x800C;&#x9898;&#x76EE;&#x591A;&#x4E86;&#x4E00;&#x4E2A;&#x8981;&#x6C42;&#xFF1A;&#x5B8C;&#x6210;k&#x4E2A;&#x4EFB;&#x52A1;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8981;&#x6C42;&#x9009;&#x62E9;&#x7684;&#x7269;&#x54C1;&#x603B;&#x4EF6;&#x6570;&#x4E3A;k<br>&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x5F53;&#x7136;&#x60F3;&#x6D88;&#x9664;&#x8FD9;&#x4E2A;k&#x7684;&#x7EA6;&#x675F;&#xFF0C;&#x4ECE;&#x800C;&#x6109;&#x5FEB;&#x5730;&#x76F4;&#x63A5;&#x5957;&#x7528;&#x5B8C;&#x5168;&#x80CC;&#x5305;&#xFF08;&#x6CE8;&#x610F;&#x5907;&#x6CE8;&#x7684;&#x8303;&#x56F4;`K&#x2264; W&#x2264; min(4000,2</em>K)`&#x6697;&#x793A;&#x7740;&#x4E9B;&#x4EC0;&#x4E48;&#xFF09;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><ol><li>&#x5148;&#x7ED9;&#x6BCF;&#x4E2A;&#x4EFB;&#x52A1;&#x5206;&#x914D;&#x4E00;&#x5929;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x7387;&#x5148;&#x83B7;&#x5F97;k&#x4E2A;&#x4E00;&#x5929;&#x7684;&#x6EE1;&#x610F;&#x5EA6;&#xFF08;&#x4FDD;&#x8BC1;&#x5B8C;&#x6210;&#x4E86;k&#x4E2A;&#x4EFB;&#x52A1;&#xFF09;</li><li>&#x5DEE;&#x5206;&#x7B97;&#x51FA;&#x5176;&#x4F59;&#x5929;&#x6570;&#x4E0E;&#x7B2C;&#x4E00;&#x5929;&#x7684;&#x6EE1;&#x610F;&#x5EA6;&#xFF0C;&#x63A5;&#x7740;&#x5C31;&#x662F;&#x5B8C;&#x5168;&#x80CC;&#x5305;&#x4E86;~&#xFF08;&#x5269;&#x4F59;&#x7684;&#x5929;&#x6570;&#x4E5F;&#x8981;&#x5B8C;&#x6210;&#x4EFB;&#x52A1;&#xFF0C;&#x4F46;&#x8FD9;&#x65F6;&#x6CA1;&#x6709;k&#x7684;&#x7EA6;&#x675F;&#x4E86;&#xFF0C;&#x53EF;&#x81EA;&#x7531;&#x5206;&#x914D;&#x54AF;&#xFF09;<br>&#x6B64;&#x65F6;&#x7684;&#x5B8C;&#x5168;&#x80CC;&#x5305;&#x4E3A;&#xFF1A;<br>&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x2014;&#x2014;W-k&#x5929;   &#x7269;&#x54C1;&#x4EF6;&#x6570;&#x2014;&#x2014;N-1<br>&#x7269;&#x54C1;&#x8D39;&#x7528;&#x2014;&#x2014;&#x5B8C;&#x6210;&#x4E00;&#x4E2A;&#x4EFB;&#x52A1;&#x6240;&#x9700;&#x5929;&#x6570;i     &#x7269;&#x54C1;&#x4EF7;&#x503C;&#x2014;&#x2014;&#x6EE1;&#x610F;&#x5EA6;vi-v0<br>&#x6700;&#x4F18;&#x89E3;&#x7684;&#x540C;&#x65F6;&#x8981;&#x6C42;&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x88C5;&#x6EE1;&#x2014;&#x2014;&#x6070;&#x7528;W-k&#x5929;&#x5B8C;&#x6210;</li></ol><p>***&#x65E0;&#x5176;&#x4ED6;&#x7EA6;&#x675F;&#x6761;&#x4EF6;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2005</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">5005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> n, k, W;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;k, &amp;W);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i){</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">a[i] = a[i] - a[<span class="number">0</span>];<span class="comment">//&#x4EF7;&#x503C;v[i]-v[0]</span></span><br><span class="line">}</span><br><span class="line">fill(dp+<span class="number">1</span>, dp+k+<span class="number">1</span>, <span class="number">-0x3f3f3f</span>);<span class="comment">//&#x80CC;&#x5305;&#x8981;&#x6C42;&#x88C5;&#x6EE1;</span></span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">W -= k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i){<span class="comment">//&#x5B8C;&#x5168;&#x80CC;&#x5305;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= W; ++j){</span><br><span class="line">dp[j] = max(dp[j], dp[j-i]+a[i]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, dp[W]+a[<span class="number">0</span>]*k);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥-分考场</title>
      <link href="/2020/07/05/%E8%93%9D%E6%A1%A5-%E5%88%86%E8%80%83%E5%9C%BA/"/>
      <url>/2020/07/05/%E8%93%9D%E6%A1%A5-%E5%88%86%E8%80%83%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>&#x611F;&#x8C22;&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#x94FE;&#x63A5;&#xFF1A;<a href="https://blog.csdn.net/weixin_45483201/article/details/104233687" target="_blank">[&#x84DD;&#x6865;&#x676F;2017&#x51B3;&#x8D5B;]&#x5206;&#x8003;&#x573A;&#x3001;OpenJudge:&#x5206;&#x6210;&#x4E92;&#x8D28;&#x6570;</a></p><p>&#x4E4D;&#x4E00;&#x770B;&#x9898;&#x76EE;&#x4EE5;&#x4E3A;&#x662F;&#x5E76;&#x67E5;&#x96C6;&#xFF0C;&#x8FD8;&#x662F;&#x6211;&#x592A;&#x5E74;&#x8F7B;&#x4E86;~<br><strong>&#x89E3;&#x9898;&#x601D;&#x60F3;</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> rm[<span class="number">105</span>], rp[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, ans = <span class="number">105</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Judge</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> room)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= rm[room]; ++i){</span><br><span class="line"><span class="keyword">if</span>(a[pos][rp[room][i]])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> num)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(num &gt;= ans)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(pos == n+<span class="number">1</span>){</span><br><span class="line">ans = min(ans, num);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; ++i){</span><br><span class="line"><span class="keyword">if</span>(Judge(pos, i)){</span><br><span class="line">rp[i][++rm[i]] = pos;</span><br><span class="line">Dfs(pos+<span class="number">1</span>, num);</span><br><span class="line">rm[i]--;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">rp[num+<span class="number">1</span>][++rm[num+<span class="number">1</span>]] = pos;</span><br><span class="line">Dfs(pos+<span class="number">1</span>, num+<span class="number">1</span>);</span><br><span class="line">rm[num+<span class="number">1</span>]--;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span>(m--){</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">a[x][y] = <span class="number">1</span>; a[y][x] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">Dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> 蓝桥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>·【蓝桥】·带分数</title>
      <link href="/2020/06/30/%E8%93%9D%E6%A1%A5-%E5%B8%A6%E5%88%86%E6%95%B0/"/>
      <url>/2020/06/30/%E8%93%9D%E6%A1%A5-%E5%B8%A6%E5%88%86%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>Dfs&#x6DF1;&#x641C;&#x53EF;&#x89E3;&#xFF0C;&#x4F46;&#x9898;&#x76EE;&#x6709;&#x5751;&#x7684;&#x5730;&#x65B9;&#x3002;<br>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="http://lx.lanqiao.cn/problem.page?gpid=T26" target="_blank">&#xB7;&#x3010;&#x84DD;&#x6865;&#x3011;&#xB7;&#x5E26;&#x5206;&#x6570;</a></p><a id="more"></a><blockquote><p>&#x95EE;&#x9898;&#x63CF;&#x8FF0;<br>100 &#x53EF;&#x4EE5;&#x8868;&#x793A;&#x4E3A;&#x5E26;&#x5206;&#x6570;&#x7684;&#x5F62;&#x5F0F;&#xFF1A;100 = 3 + 69258 / 714&#x3002;<br>&#x8FD8;&#x53EF;&#x4EE5;&#x8868;&#x793A;&#x4E3A;&#xFF1A;100 = 82 + 3546 / 197&#x3002;<br>&#x6CE8;&#x610F;&#x7279;&#x5F81;&#xFF1A;&#x5E26;&#x5206;&#x6570;&#x4E2D;&#xFF0C;&#x6570;&#x5B57;1<del>9&#x5206;&#x522B;&#x51FA;&#x73B0;&#x4E14;&#x53EA;&#x51FA;&#x73B0;&#x4E00;&#x6B21;&#xFF08;&#x4E0D;&#x5305;&#x542B;0&#xFF09;&#x3002;<br>&#x7C7B;&#x4F3C;&#x8FD9;&#x6837;&#x7684;&#x5E26;&#x5206;&#x6570;&#xFF0C;100 &#x6709; 11 &#x79CD;&#x8868;&#x793A;&#x6CD5;&#x3002;<br>&#x8F93;&#x5165;&#x683C;&#x5F0F;<br>&#x4ECE;&#x6807;&#x51C6;&#x8F93;&#x5165;&#x8BFB;&#x5165;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N (N&lt;1000*1000)<br>&#x8F93;&#x51FA;&#x683C;&#x5F0F;<br>&#x7A0B;&#x5E8F;&#x8F93;&#x51FA;&#x8BE5;&#x6570;&#x5B57;&#x7528;&#x6570;&#x7801;1</del>9&#x4E0D;&#x91CD;&#x590D;&#x4E0D;&#x9057;&#x6F0F;&#x5730;&#x7EC4;&#x6210;&#x5E26;&#x5206;&#x6570;&#x8868;&#x793A;&#x7684;&#x5168;&#x90E8;&#x79CD;&#x6570;&#x3002;<br>&#x6CE8;&#x610F;&#xFF1A;&#x4E0D;&#x8981;&#x6C42;&#x8F93;&#x51FA;&#x6BCF;&#x4E2A;&#x8868;&#x793A;&#xFF0C;&#x53EA;&#x7EDF;&#x8BA1;&#x6709;&#x591A;&#x5C11;&#x8868;&#x793A;&#x6CD5;&#xFF01;<br>&#x6837;&#x4F8B;&#x8F93;&#x5165;1<br>100<br>&#x6837;&#x4F8B;&#x8F93;&#x51FA;1<br>11<br>&#x6837;&#x4F8B;&#x8F93;&#x5165;2<br>105<br>&#x6837;&#x4F8B;&#x8F93;&#x51FA;2<br>6</p></blockquote><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>Dfs&#x5BF9;1~9&#x8FDB;&#x884C;&#x5168;&#x6392;&#x5217;&#xFF0C;&#x5C06;&#x6BCF;&#x7EC4;&#x6570;&#x5206;&#x6210;&#x4E09;&#x6BB5;&#xFF08;&#x4E24;&#x91CD;&#x5FAA;&#x73AF;&#x6807;&#x8BB0;&#xFF09;&#xFF0C; &#x6EE1;&#x8DB3;<code>a+b/c==m &amp;&amp; b%c==0</code>&#x5C31;&#x8BB0;&#x4F5C;&#x4E00;&#x7EC4;&#x89E3;&#x3002;</p><ul><li>&#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5F88;&#x5BB9;&#x6613;&#x60F3;&#x5230;&#xFF0C;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x65F6;&#x6709;&#x5751;&#x7684;&#x5730;&#x65B9;&#x8981;&#x6CE8;&#x610F;&#x3002;</li></ul><h3 id="C-&#x7684;next-permutation&#x5B9E;&#x73B0;&#x5168;&#x6392;&#x5217;"><a href="#C-&#x7684;next-permutation&#x5B9E;&#x73B0;&#x5168;&#x6392;&#x5217;" class="headerlink" title="C++&#x7684;next_permutation&#x5B9E;&#x73B0;&#x5168;&#x6392;&#x5217;"></a>C++&#x7684;next_permutation&#x5B9E;&#x73B0;&#x5168;&#x6392;&#x5217;</h3><ul><li>&#x5C06;&#x6BCF;&#x7EC4;&#x7ED3;&#x679C;&#x5206;&#x6BB5;&#x7684;&#x8FC7;&#x7A0B;&#x6D89;&#x53CA;&#x5230;&#x5B50;&#x4E32;&#x67E5;&#x627E;&#xFF1B;</li></ul><p>***&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x5730;&#x65B9;&#x5728;&#x4E8E;&#xFF1A;&#x5F53;&#x7A0B;&#x5E8F;&#x9700;&#x8981;&#x8FC7;&#x591A;&#x67E5;&#x627E;&#x5B50;&#x4E32;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x4E0D;&#x8981;&#x7528;string&#xFF08;&#x5982;&#x4E0B;&#x9762;&#x4EE3;&#x7801;&#x4E2D;&#x6CE8;&#x91CA;&#x6389;&#x7684;&#x5185;&#x5BB9;&#xFF09;&#xFF0C;&#x4F7F;&#x7528;const char *&#x6548;&#x7387;&#x6700;&#x9AD8;&#x3002;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">toInt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">int</span> pos, <span class="keyword">int</span> len)</span></span>{</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>, t = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = pos+len<span class="number">-1</span>; i &gt;= pos; i--){</span><br><span class="line">ans += (str[i]-<span class="string">&apos;0&apos;</span>)*t;</span><br><span class="line">t *= <span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// for(int i = 0; i &lt; len; ++i){</span></span><br><span class="line"><span class="comment">// ans = 10*ans+(str[pos++]-&apos;0&apos;);</span></span><br><span class="line"><span class="comment">// }</span></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="built_in">string</span> str = <span class="string">&quot;123456789&quot;</span>;</span><br><span class="line"><span class="keyword">do</span>{</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *s = str.c_str();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; ++i){</span><br><span class="line"><span class="comment">//string a = str.substr(0, i);</span></span><br><span class="line"><span class="comment">//int a1 = toInt(a);</span></span><br><span class="line"><span class="keyword">int</span> a1 = toInt(s, <span class="number">0</span>, i);<span class="comment">//&#x7B2C;&#x4E00;&#x4E2A;&#x6570;a</span></span><br><span class="line"><span class="keyword">if</span>(a1 &gt;= m)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">9</span>-i<span class="number">-1</span>; ++j){</span><br><span class="line"><span class="comment">//string b = str.substr(i, j);</span></span><br><span class="line"><span class="comment">//string c = str.substr(i+j);</span></span><br><span class="line"><span class="comment">//int b1 = toInt(b);</span></span><br><span class="line"><span class="comment">//int c1 = toInt(c);</span></span><br><span class="line"><span class="keyword">int</span> b1 = toInt(s, i, j);<span class="comment">//&#x7B2C;&#x4E8C;&#x4E2A;&#x6570;b</span></span><br><span class="line"><span class="keyword">int</span> c1 = toInt(s, i+j, <span class="number">9</span>-i-j);<span class="comment">//&#x7B2C;&#x4E09;&#x4E2A;&#x6570;c</span></span><br><span class="line"><span class="keyword">if</span>(b1%c1==<span class="number">0</span> &amp;&amp; (a1+b1/c1)==m){</span><br><span class="line">sum++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}<span class="keyword">while</span>(next_permutation(str.begin(), str.end()));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x624B;&#x5199;Dfs&#x5B9E;&#x73B0;&#x5168;&#x6392;&#x5217;"><a href="#&#x624B;&#x5199;Dfs&#x5B9E;&#x73B0;&#x5168;&#x6392;&#x5217;" class="headerlink" title="&#x624B;&#x5199;Dfs&#x5B9E;&#x73B0;&#x5168;&#x6392;&#x5217;"></a>&#x624B;&#x5199;Dfs&#x5B9E;&#x73B0;&#x5168;&#x6392;&#x5217;</h3><ul><li>&#x624B;&#x5199;&#x4E00;&#x4E2A;&#x6CA1;&#x6709;&#x591A;&#x96BE;&#x561B;&#xFF0C;&#x4F46;&#x540C;&#x65F6;&#x8981;&#x6CE8;&#x610F;&#x4E0A;&#x9762;&#x63D0;&#x5230;&#x7684;const char *&#x95EE;&#x9898;</li><li>&#x5F53;&#x8981;&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x4E0E;&#x6570;&#x503C;&#x62FC;&#x63A5;&#xFF0C;C++&#x5C31;&#x6709;&#x70B9;&#x8BA8;&#x538C;&#x4E86;&#xFF0C;&#x53EA;&#x4F1A;&#x7528; stringstream<br><code>stringstream ss;</code><br><code>ss &lt;&lt; str &lt;&lt; i;</code></li></ul><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>, m;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">toInt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">int</span> pos, <span class="keyword">int</span> len)</span></span>{</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>, t = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = pos+len<span class="number">-1</span>; i &gt;= pos; i--){</span><br><span class="line">ans += (str[i]-<span class="string">&apos;0&apos;</span>)*t;</span><br><span class="line">t *= <span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="built_in">string</span> str, <span class="keyword">int</span> step)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(step &gt;= <span class="number">9</span>){</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *s = str.c_str();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; ++i){</span><br><span class="line"><span class="keyword">int</span> a1 = toInt(s, <span class="number">0</span>, i);</span><br><span class="line"><span class="keyword">if</span>(a1 &gt;= m)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">9</span>-i<span class="number">-1</span>; ++j){</span><br><span class="line"><span class="keyword">int</span> b1 = toInt(s, i, j);</span><br><span class="line"><span class="keyword">int</span> c1 = toInt(s, i+j, <span class="number">9</span>-i-j);</span><br><span class="line"><span class="keyword">if</span>(b1%c1==<span class="number">0</span> &amp;&amp; (a1+b1/c1)==m){</span><br><span class="line">sum++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i){</span><br><span class="line"><span class="keyword">if</span>(visit[i] == <span class="number">0</span>){</span><br><span class="line">visit[i] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line">ss &lt;&lt; str &lt;&lt; i; <span class="comment">//&#x5B9E;&#x73B0;str+i</span></span><br><span class="line">Dfs(ss.str(), step+<span class="number">1</span>);</span><br><span class="line">visit[i] = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">Dfs(str, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> 蓝桥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树专题</title>
      <link href="/2020/06/28/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2020/06/28/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>&#x672C;&#x6587;&#x5C06;&#x4EE5;<strong>&#x5355;&#x70B9;&#x66F4;&#x65B0;&#x3001;&#x533A;&#x95F4;&#x6C42;&#x548C;</strong>&#x5F00;&#x542F;&#x7EBF;&#x6BB5;&#x6811;&#x7684;&#x65B0;&#x4E16;&#x754C;&#x3002;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x6301;&#x7EED;&#x66F4;&#x65B0;~&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><a id="more"></a><p>&#x53E6;&#x5916;&#x6587;&#x672B;&#x4F1A;&#x6709;&#x94FE;&#x63A5;&#x4F20;&#x9001;&#xFF0C;&#x4E13;&#x95E8;&#x6BD4;&#x8F83;&#x7EBF;&#x6BB5;&#x6811;&#x548C;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x3002;</p><blockquote><p>&#x611F;&#x8C22;&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#xFF08;&#x8BB2;&#x8FF0;&#x5DF2;&#x5341;&#x5206;&#x8BE6;&#x5C3D;&#xFF0C;&#x8FD9;&#x91CC;&#x53EA;&#x7A0D;&#x4F5C;&#x603B;&#x7ED3;&#xFF09;&#xFF1A;<br><a href="https://blog.csdn.net/zearot/article/details/52280189" target="_blank" rel="noopener">&#x7EBF;&#x6BB5;&#x6811;&#x4ECE;&#x96F6;&#x5F00;&#x59CB;</a><br><a href="https://www.cnblogs.com/AC-King/p/7789013.html" target="_blank" rel="noopener">&#x7EBF;&#x6BB5;&#x6811;&#x8BE6;&#x89E3;</a></p></blockquote><ul><li>&#x7EBF;&#x6BB5;&#x6811;&#x662F;&#x4E00;&#x79CD;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#xFF0C;&#x7EF4;&#x62A4;&#x4E0B;&#x6807;&#x4E3A;1,2,..,n&#x7684;n&#x4E2A;&#x6309;&#x987A;&#x5E8F;&#x6392;&#x5217;&#x7684;&#x6570;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x8FD9;&#x4E9B;&#x6570;&#x7EC4;&#x5408;&#x8D77;&#x6765;&#x5C31;&#x662F;[1:n]&#x7684;&#x4E00;&#x4E2A;&#x533A;&#x95F4;&#x3002;</li><li>&#x6839;&#x7ED3;&#x70B9;&#x8868;&#x793A;&#x7684;&#x5C31;&#x662F;&#x533A;&#x95F4;[1,n]&#xFF0C;&#x7136;&#x540E;&#x6298;&#x534A;&#x8FDB;&#x884C;&#x5206;&#x89E3;&#xFF0C;&#x76F4;&#x5230;&#x4E0D;&#x80FD;&#x5206;&#x89E3;&#xFF0C;&#x6BCF;&#x4E2A;&#x533A;&#x95F4;&#x4EE3;&#x8868;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;&#xFF0C;&#x6BCF;&#x4E2A;&#x7ED3;&#x70B9;&#x5B58;&#x653E;&#x5404;&#x81EA;&#x7684;&#x4FE1;&#x606F;&#xFF08;&#x5982;&#x5BF9;&#x4E8E;&#x533A;&#x95F4;&#x6C42;&#x548C;&#xFF0C;&#x6BCF;&#x4E2A;&#x7ED3;&#x70B9;&#x5B58;&#x653E;&#x7740;&#x5404;&#x533A;&#x95F4;&#x7684;&#x548C;&#xFF09;&#x3002;</li><li>&#x7EBF;&#x6BB5;&#x6811;&#x540C;&#x65F6;&#x662F;&#x4E00;&#x68F5;&#x5E73;&#x8861;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x7528;&#x6570;&#x7EC4;&#x6A21;&#x62DF;&#x6811;&#x5F62;&#x7ED3;&#x6784;&#xFF0C;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E00;&#x4E2A;&#x975E;&#x53F6;&#x5B50;&#x7ED3;&#x70B9;[a,b],&#x5176;&#x5DE6;&#x513F;&#x5B50;&#x8868;&#x793A;&#x7684;&#x533A;&#x95F4;[a, (a+b)/2]&#xFF0C;&#x53F3;&#x513F;&#x5B50;&#x8868;&#x793A;&#x7684;&#x533A;&#x95F4;&#x662F;[(a+b)/2+1, b]&#x3002;</li><li>&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x6811;&#x5F62;&#x7ED3;&#x6784;&#x67E5;&#x8BE2;&#x3001;&#x4FEE;&#x6539;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x90FD;&#x662F;O(n log n)</li></ul><h3 id="&#x7EBF;&#x6BB5;&#x6811;&#x5B9E;&#x73B0;&#x5355;&#x70B9;&#x66F4;&#x65B0;&#x3001;&#x533A;&#x95F4;&#x6C42;&#x548C;"><a href="#&#x7EBF;&#x6BB5;&#x6811;&#x5B9E;&#x73B0;&#x5355;&#x70B9;&#x66F4;&#x65B0;&#x3001;&#x533A;&#x95F4;&#x6C42;&#x548C;" class="headerlink" title="&#x7EBF;&#x6BB5;&#x6811;&#x5B9E;&#x73B0;&#x5355;&#x70B9;&#x66F4;&#x65B0;&#x3001;&#x533A;&#x95F4;&#x6C42;&#x548C;"></a>&#x7EBF;&#x6BB5;&#x6811;&#x5B9E;&#x73B0;&#x5355;&#x70B9;&#x66F4;&#x65B0;&#x3001;&#x533A;&#x95F4;&#x6C42;&#x548C;</h3><ol><li>&#x7EBF;&#x6BB5;&#x6811;&#x6784;&#x5EFA;</li></ol><ul><li>a[]&#x5B58;&#x653E;&#x539F;&#x6570;&#x636E;&#xFF0C;&#x4E3A;&#x4FBF;&#x4E8E;&#x4F7F;&#x7528;&#xFF0C;&#x9996;&#x4F4D;&#x7684;&#x503C;&#x7F6E;&#x4E8E;0&#xFF1B; sum[]&#x6784;&#x5EFA;&#x7EBF;&#x6BB5;&#x6811;&#xFF0C;&#x6570;&#x7EC4;&#x957F;&#x5EA6;&#x53EF;&#x7ED9;&#x5230; 4n</li><li>&#x4ECE;&#x6839;&#x7ED3;&#x70B9;&#x5F00;&#x59CB;&#x9012;&#x5F52;&#xFF0C;&#x5C06;[1, n]&#x7684;&#x533A;&#x95F4;&#x4E24;&#x4E24;&#x5206;&#x89E3;&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x975E;&#x53F6;&#x5B50;&#x7ED3;&#x70B9;&#x8868;&#x793A;&#x7684;&#x533A;&#x95F4;&#x548C;&#xFF0C;&#x81EA;&#x7136;&#x662F;&#x5DE6;&#x3001;&#x53F3;&#x513F;&#x5B50;&#x7684;&#x533A;&#x95F4;&#x548C;&#x76F8;&#x52A0;&#xFF1B;</li><li>&#x6811;&#x7684;&#x6700;&#x6DF1;&#x5C42;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x53F6;&#x5B50;&#x7ED3;&#x70B9;&#x5B58;&#x653E;&#x539F;&#x6570;&#x636E;a[]<ul><li>BuildUp()&#x6784;&#x5EFA;&#x7EBF;&#x6BB5;&#x6811;</li><li>PushUp()&#x66F4;&#x65B0;&#x6BCF;&#x4E2A;&#x7ED3;&#x70B9;</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100007</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>, a[<span class="number">11</span>] = {<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>};</span><br><span class="line"><span class="keyword">int</span> sum[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> rt)</span></span>{</span><br><span class="line">sum[rt] = sum[rt&lt;&lt;<span class="number">1</span>] + sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]; </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildUp</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span>{<span class="comment">//&#x521D;&#x59CB;l=1, r=n, rt=1;</span></span><br><span class="line"><span class="keyword">if</span>(l == r){<span class="comment">//&#x9012;&#x5F52;&#x51FA;&#x53E3;</span></span><br><span class="line">sum[rt] = a[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;<span class="comment">//&#x6298;&#x534A;</span></span><br><span class="line">BuildUp(l, m, rt&lt;&lt;<span class="number">1</span>);<span class="comment">//&#x4ECE;&#x5DE6;&#x513F;&#x5B50;&#x5F00;&#x59CB;&#x9012;&#x5F52;</span></span><br><span class="line">BuildUp(m+<span class="number">1</span>, r, rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);<span class="comment">//&#x4ECE;&#x53F3;&#x513F;&#x5B50;&#x5F00;&#x59CB;&#x9012;&#x5F52;</span></span><br><span class="line">PushUp(rt);<span class="comment">//&#x5206;&#x800C;&#x6CBB;&#x4E4B;</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol start="2"><li>&#x7EBF;&#x6BB5;&#x6811;&#x66F4;&#x65B0;</li></ol><ul><li>&#x521D;&#x59CB;&#x5316;&#x5B8C;&#x6BD5;&#xFF0C;&#x5982;&#x679C;&#x8981;&#x5BF9;&#x67D0;&#x4E2A;&#x503C;&#x8FDB;&#x884C;&#x66F4;&#x65B0;&#xFF08;&#x5982;&#x5B9E;&#x73B0; a[index]+=temp&#xFF09;&#xFF1B;</li><li>&#x81EA;&#x7136;&#x4E5F;&#x8981;&#x4ECE;&#x6839;&#x7ED3;&#x70B9;&#x5F00;&#x59CB;&#xFF0C;&#x53EA;&#x626B;&#x63CF;index&#x5305;&#x542B;&#x7684;&#x533A;&#x95F4;&#x7ED3;&#x70B9;&#x5373;&#x53EF;&#xFF1B;</li><li>&#x5BF9;&#x4E8E;&#x67D0;&#x4E00;&#x975E;&#x53F6;&#x5B50;&#x7ED3;&#x70B9;&#xFF0C;&#x8981;&#x4E48;&#x4ECE;&#x5DE6;&#x513F;&#x5B50;&#x51FA;&#x53D1;&#x7EE7;&#x7EED;&#x626B;&#x63CF;&#xFF0C;&#x8981;&#x4E48;&#x4ECE;&#x53F3;&#x513F;&#x5B50;&#x51FA;&#x53D1;&#x7EE7;&#x7EED;&#x626B;&#x63CF;</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> temp, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span>{<span class="comment">//&#x5B9E;&#x73B0;a[index] += temp</span></span><br><span class="line"><span class="keyword">if</span>(l == r){<span class="comment">//&#x6700;&#x6DF1;&#x5C42;&#xFF0C;&#x5B58;&#x653E;a[]&#x7684;&#x4F4D;&#x7F6E;</span></span><br><span class="line">sum[rt] += temp;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(index &lt;= m)<span class="comment">//index&#x5728;&#x5DE6;&#x513F;&#x5B50;&#x7684;&#x533A;&#x95F4;&#x4E2D;</span></span><br><span class="line">Update(index, temp, l, m, rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span><span class="comment">//&#x53CD;&#x4E4B;&#xFF0C;&#x5728;&#x53F3;&#x513F;&#x5B50;&#x533A;&#x95F4;&#x4E2D;</span></span><br><span class="line">Update(index, temp, m+<span class="number">1</span>, r, rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">PushUp(rt);<span class="comment">//&#x626B;&#x63CF;&#x5230;&#x7684;&#x533A;&#x95F4;&#x90FD;&#x8981;&#x66F4;&#x65B0;</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol><li>&#x7EBF;&#x6BB5;&#x6811;&#x6C42;&#x533A;&#x95F4;&#x548C;<br>&#x6C42;&#x533A;&#x95F4;[l, r]&#x7684;&#x548C;&#xFF0C;&#x540C;&#x6837;&#x4ECE;&#x6839;&#x7ED3;&#x70B9;&#x51FA;&#x53D1;&#xFF0C;&#x626B;&#x63CF;&#x7684;&#x8FC7;&#x7A0B;&#x5C31;&#x4E0D;&#x662F;if&#x2026;else&#x4E86;&#xFF0C;&#x56E0;&#x4E3A;&#x6240;&#x8981;&#x67E5;&#x8BE2;&#x7684;&#x533A;&#x95F4;[l, r]&#x53EF;&#x80FD;&#x65E2;&#x5305;&#x542B;&#x4E8E;&#x5DE6;&#x513F;&#x5B50;&#x7684;&#x533A;&#x95F4;&#xFF0C;&#x53C8;&#x5305;&#x542B;&#x4E8E;&#x53F3;&#x513F;&#x5B50;&#x6240;&#x5728;&#x7684;&#x533A;&#x95F4;&#x3002;</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span>{<span class="comment">//&#x6C42;sum[l,r]</span></span><br><span class="line"><span class="keyword">if</span>(l&gt;=L &amp;&amp; r&lt;=R){</span><br><span class="line"><span class="keyword">return</span> sum[rt];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L)</span><br><span class="line">ans += Query(L, R, l, m, rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(m &lt; R)</span><br><span class="line">ans += Query(L, R, m+<span class="number">1</span>, r, rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x7EBF;&#x6BB5;&#x6811;&#x5B9E;&#x73B0;&#x533A;&#x95F4;&#x66F4;&#x65B0;&#x3001;&#x533A;&#x95F4;&#x6C42;&#x548C;"><a href="#&#x7EBF;&#x6BB5;&#x6811;&#x5B9E;&#x73B0;&#x533A;&#x95F4;&#x66F4;&#x65B0;&#x3001;&#x533A;&#x95F4;&#x6C42;&#x548C;" class="headerlink" title="&#x7EBF;&#x6BB5;&#x6811;&#x5B9E;&#x73B0;&#x533A;&#x95F4;&#x66F4;&#x65B0;&#x3001;&#x533A;&#x95F4;&#x6C42;&#x548C;"></a>&#x7EBF;&#x6BB5;&#x6811;&#x5B9E;&#x73B0;&#x533A;&#x95F4;&#x66F4;&#x65B0;&#x3001;&#x533A;&#x95F4;&#x6C42;&#x548C;</h3><p>&#x524D;&#x9762;&#x7684;&#x90FD;&#x8FD8;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x4E0B;&#x9762;&#x9700;&#x8981;&#x7528;&#x5230;&#x7684;&#x61D2;&#x6807;&#x8BB0;&#xFF0C;&#x662F;&#x8BA9;&#x6211;&#x5934;&#x75BC;&#x4E86;&#x8BB8;&#x591A;&#x5929;&#x90FD;&#x6CA1;&#x89E3;&#x51B3;&#x7684;&#x95EE;&#x9898;&#x3002;<br><strong>&#x533A;&#x95F4;&#x66F4;&#x65B0;&#x65F6;&#x4F7F;&#x7528;&#x61D2;&#x6807;&#x8BB0;</strong></p><ol><li>&#x5982;&#x679C;&#x6309;&#x7167;&#x5355;&#x70B9;&#x66F4;&#x65B0;&#x7684;&#x505A;&#x6CD5;&#xFF0C;&#x8981;&#x626B;&#x63CF;&#x5230;&#x6700;&#x6DF1;&#x5C42;&#xFF0C;&#x5BF9;&#x533A;&#x95F4;[L,R]&#x7684;&#x6BCF;&#x4E2A;&#x70B9;&#x66F4;&#x65B0;&#xFF1B;<br>&#x5176;&#x5B9E;&#x5F53;&#x67D0;&#x7ED3;&#x70B9;&#x6240;&#x626B;&#x63CF;&#x7684;&#x533A;&#x95F4;[l,r]&#x5305;&#x542B;&#x5728;[L,R]&#x5185;&#xFF0C;&#x5C31;&#x4E0D;&#x7528;&#x5411;&#x4E0B;&#x626B;&#x63CF;&#x4E86;&#xFF0C;&#x76F4;&#x63A5;&#x5BF9;&#x8FD9;&#x4E2A;&#x533A;&#x95F4;&#x8FDB;&#x884C;&#x66F4;&#x65B0;&#x3002;<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R){<span class="comment">//&#x626B;&#x63CF;&#x7684;&#x533A;&#x95F4;&#x5305;&#x542B;&#x5728;[L,R]&#x4E2D;&#xFF0C;&#x61D2;&#x6807;&#x8BB0;&#xFF0C;&#x4E0D;&#x518D;&#x5411;&#x4E0B;&#x626B;&#x63CF;</span></span><br><span class="line">lazy[rt] += temp;</span><br><span class="line">sum[rt] += temp*(r-l+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ol><p>&#x7136;&#x800C;&#xFF0C;&#x8FD9;&#x6837;&#x5728;&#x66F4;&#x65B0;&#x65F6;&#x867D;&#x7136;&#x53EF;&#x4EE5;&#x51CF;&#x5C11;&#x9012;&#x5F52;&#x7684;&#x6DF1;&#x5EA6;&#xFF0C;&#x5F88;&#x5BB9;&#x6613;&#x60F3;&#x5230;&#x67E5;&#x8BE2;&#x65F6;&#x4F1A;&#x51FA;&#x73B0;&#x95EE;&#x9898;&#xFF08;&#x4E0B;&#x9762;&#x7684;&#x7ED3;&#x70B9;sum[]&#x6CA1;&#x6709;&#x66F4;&#x65B0;&#xFF09;&#x3002;<br>2. &#x61D2;&#x6807;&#x8BB0;&#x7684;&#x5F15;&#x5165;&#xFF0C;lazy[]&#x6807;&#x8BB0;&#x5404;&#x7ED3;&#x70B9;&#xFF0C;&#x521D;&#x59CB;&#x4E3A;0&#xFF0C;&#x8868;&#x793A;&#x672A;&#x88AB;&#x6807;&#x8BB0;&#x8FC7;&#x3002;</p><ul><li>&#x61D2;&#x6807;&#x8BB0;&#x5B58;&#x5728;&#x7684;&#x610F;&#x4E49;&#xFF1A;&#x672C;&#x7ED3;&#x70B9;&#x7684;&#x7EDF;&#x8BA1;&#x4FE1;&#x606F;&#x5DF2;&#x7ECF;&#x6839;&#x636E;&#x6807;&#x8BB0;&#x66F4;&#x65B0;&#x8FC7;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x672C;&#x7ED3;&#x70B9;&#x7684;&#x5B50;&#x7ED3;&#x70B9;&#x4ECD;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x66F4;&#x65B0;&#x3002;</li><li>&#x6240;&#x4EE5;&#x65E0;&#x8BBA;&#x662F;&#x66F4;&#x65B0;&#x8FD8;&#x662F;&#x533A;&#x95F4;&#x6C42;&#x548C;&#xFF0C;&#x90FD;&#x8981;PushDown()&#x5224;&#x65AD;&#x4E00;&#x4E0B;lazy[rt]&#xFF0C;&#x5982;&#x679C;&#x88AB;&#x6807;&#x8BB0;&#x8FC7;&#xFF0C;&#x9700;&#x8981;&#x66F4;&#x65B0;&#x5DE6;&#x53F3;&#x5B50;&#x6811;</li></ul><p>&#x61D2;&#x6807;&#x8BB0;&#x5F15;&#x5165;&#x540E;&#x9700;&#x8981;&#x589E;&#x52A0;&#x7684;&#x4EE3;&#x7801;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> lazy[maxn&lt;&lt;<span class="number">2</span>]; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> ln, <span class="keyword">int</span> rn)</span></span>{<span class="comment">//&#x66F4;&#x65B0;&#x5B50;&#x7ED3;&#x70B9;&#xFF0C;ln rn&#x5206;&#x522B;&#x4E3A;&#x5DE6;&#x5B50;&#x6811; &#x53F3;&#x5B50;&#x6811;&#x533A;&#x95F4;&#x957F;&#x5EA6;</span></span><br><span class="line"><span class="keyword">if</span>(lazy[rt]){</span><br><span class="line">lazy[rt&lt;&lt;<span class="number">1</span>] += lazy[rt];</span><br><span class="line">lazy[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += lazy[rt];</span><br><span class="line">sum[rt&lt;&lt;<span class="number">1</span>] += lazy[rt]*ln;</span><br><span class="line">sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += lazy[rt]*rn;</span><br><span class="line">lazy[rt] = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> temp, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span>{<span class="comment">//&#x5B9E;&#x73B0; a[L,R] += temp;</span></span><br><span class="line"><span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R){<span class="comment">//&#x626B;&#x63CF;&#x7684;&#x533A;&#x95F4;&#x5305;&#x542B;&#x5728;[L,R]&#x4E2D;&#xFF0C;&#x61D2;&#x6807;&#x8BB0;&#xFF0C;&#x4E0D;&#x518D;&#x5411;&#x4E0B;&#x626B;&#x63CF;</span></span><br><span class="line">lazy[rt] += temp;</span><br><span class="line">sum[rt] += temp*(r-l+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">PushDown(rt, m-l+<span class="number">1</span>, r-m);<span class="comment">//&#x5224;&#x65AD;&#x4E00;&#x4E0B;&#x662F;&#x5426;&#x6807;&#x8BB0;&#x8FC7;</span></span><br><span class="line"><span class="keyword">if</span>(L &lt;= m)</span><br><span class="line">Update(L, R, temp, l, m, rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(R &gt; m)</span><br><span class="line">Update(L, R, temp, m+<span class="number">1</span>, r, rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">PushUp(rt);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(l&gt;=L &amp;&amp; r&lt;=R){</span><br><span class="line"><span class="keyword">return</span> sum[rt];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> m = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">PushDown(rt, m-l+<span class="number">1</span>, r-m);<span class="comment">//&#x5224;&#x65AD;&#x4E00;&#x4E0B;&#x662F;&#x5426;&#x6807;&#x8BB0;&#x8FC7;</span></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L)</span><br><span class="line">ans += Query(L, R, l, m, rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(m &lt; R)</span><br><span class="line">ans += Query(L, R, m+<span class="number">1</span>, r, rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆序数</title>
      <link href="/2020/06/28/%E9%80%86%E5%BA%8F%E6%95%B0/"/>
      <url>/2020/06/28/%E9%80%86%E5%BA%8F%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>&#x6700;&#x521D;&#x63A5;&#x89E6;&#x5230;&#x9006;&#x5E8F;&#x6570;&#x662F;&#x5728;&#x79BB;&#x6563;&#x6570;&#x5B66;&#x4E2D;&#xFF0C;&#x9006;&#x5E8F;&#x6570;&#x7684;&#x6982;&#x5FF5;&#x5982;&#x4E0B;&#xFF1A;</p><blockquote><p>&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x6709;N&#x4E2A;&#x6570;&#x7684;&#x5E8F;&#x5217;&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x5BF9;&#x6570;&#x4E2D;&#x524D;&#x9762;&#x7684;&#x6570;&#x5927;&#x4E8E;&#x540E;&#x9762;&#x7684;&#x6570;&#xFF0C;&#x90A3;&#x4E48;&#x5B83;&#x4EEC;&#x5C31;&#x79F0;&#x4E3A;&#x4E00;&#x4E2A;&#x9006;&#x5E8F;&#x3002;&#x4E00;&#x4E2A;&#x5E8F;&#x5217;&#x4E2D;&#x9006;&#x5E8F;&#x7684;&#x603B;&#x6570;&#x5C31;&#x79F0;&#x4E3A;&#x8FD9;&#x4E2A;&#x6392;&#x5217;&#x7684;&#x9006;&#x5E8F;&#x6570;&#x3002;<br>&#x5982;&#x5E8F;&#x5217; 2 4 3 1 &#x7684;&#x9006;&#x5E8F;&#x6570;&#x4E3A;4&#xFF08;2&#x548C;1&#xFF0C;4&#x548C;3&#xFF0C;4&#x548C;1&#xFF0C;3&#x548C;1&#xFF09;</p></blockquote><a id="more"></a><p>&#x9006;&#x5E8F;&#x6570;&#x7684;&#x89E3;&#x6CD5;&#x6709;&#x591A;&#x79CD;&#xFF0C;&#x8FD9;&#x91CC;&#x4ECB;&#x7ECD;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x3001;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5747;&#x4E3A;O(n log n)<br>[TOC]</p><h3 id="&#x5F52;&#x5E76;&#x6C42;&#x89E3;&#x9006;&#x5E8F;&#x6570;"><a href="#&#x5F52;&#x5E76;&#x6C42;&#x89E3;&#x9006;&#x5E8F;&#x6570;" class="headerlink" title="&#x5F52;&#x5E76;&#x6C42;&#x89E3;&#x9006;&#x5E8F;&#x6570;"></a>&#x5F52;&#x5E76;&#x6C42;&#x89E3;&#x9006;&#x5E8F;&#x6570;</h3><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong></p><ul><li>&#x4ECE;&#x95EE;&#x9898;&#x7684;&#x6E90;&#x5934;&#x51FA;&#x53D1;&#xFF0C;&#x5982;&#x679C;&#x524D;&#x9762;&#x5927;&#x4E8E;&#x540E;&#x9762;&#xFF0C;&#x5C31;&#x6784;&#x6210;&#x4E00;&#x7EC4;&#x9006;&#x5E8F;&#xFF0C;&#x800C;&#x8FD9;&#x5C31;&#x662F;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x4E2D;&#x4EA4;&#x6362;&#x4E24;&#x4E2A;&#x6570;&#x7684;&#x6761;&#x4EF6;&#xFF1B;</li><li>&#x7ED3;&#x6784;&#x4F53;a[].val&#x5B58;&#x50A8;&#x503C;&#xFF0C; a[].num&#x5B58;&#x50A8;&#x9006;&#x5E8F;&#x7EC4;&#x6570;</li><li>&#x56E0;&#x4E3A;&#x53EA;&#x8BA1;&#x7B97;&#x9006;&#x5E8F;&#x6570;&#xFF0C;&#x5BF9;&#x4E8E;&#x4E00;&#x7EC4;&#x9006;&#x5E8F;&#x53EA;&#x7528;&#x6807;&#x8BB0;1&#x6B21;&#x5373;&#x53EF;&#xFF0C;&#x8FD9;&#x91CC;&#x5C06;&#x5BF9;&#x8F83;&#x5927;&#x7684;&#x6570;&#x8FDB;&#x884C;&#x8BB0;&#x5F55;&#x3002;</li></ul><blockquote><p>&#x5982;&#x5BF9;&#x4E8E; 2 4 3 1 &#x53EA;&#x6807;&#x8BB0;&#x8F83;&#x5927;&#x6570;&#xFF0C;&#x9006;&#x5E8F;&#x8BB0;&#x5F55;&#x4E3A; 1 2 1 0<br>&#x5F52;&#x5E76;&#x540E;&#x7684;&#x7ED3;&#x679C;&#xFF1A;<br>a[].val  1 2 3 4<br>a[].num  0 1 1 2</p></blockquote><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5F00;&#x59CB;&#x5F52;&#x5E76;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span>{</span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> num;<span class="comment">//&#x9006;&#x5E8F; </span></span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span> <span class="title">a</span>[<span class="title">maxn</span>], <span class="title">b</span>[<span class="title">maxn</span>];</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span></span>{</span><br><span class="line"><span class="keyword">int</span> i = l, j = mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> k = l;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r){</span><br><span class="line"><span class="keyword">if</span>(a[i].val &lt;= a[j].val){</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">b[k<span class="number">-1</span>].num += (j-mid<span class="number">-1</span>);</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line"><span class="comment">//b[k-1].num += (mid-i+1);</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid){</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">b[k<span class="number">-1</span>].num += (r-mid);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(j &lt;= r){</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(k = l; k &lt;= r; ++k){</span><br><span class="line">a[k] = b[k];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(l &lt; r){</span><br><span class="line"><span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">MergeSort(l, mid);</span><br><span class="line">MergeSort(mid+<span class="number">1</span>, r);</span><br><span class="line">Merge(l, mid, r);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i){</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i].val;</span><br><span class="line">}</span><br><span class="line">MergeSort(<span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i){<span class="comment">//&#x9006;&#x5E8F;&#x6570;&#x5373;&#x9006;&#x5E8F;&#x7684;&#x7EC4;&#x6570;&#x7D2F;&#x52A0;</span></span><br><span class="line">ans += a[i].num;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x5176;&#x5B9E;&#x8BB0;&#x5F55;&#x9006;&#x5E8F;&#x7684;&#x8FC7;&#x7A0B;&#x6709;&#x52A9;&#x4E8E;&#x5BF9;&#x5F52;&#x5E76;&#x8FC7;&#x7A0B;&#x7684;&#x52A0;&#x6DF1;&#x7406;&#x89E3;&#xFF1B;<br>&#x89E3;&#x91CA;&#x4E00;&#x4E0B;Merge()&#x4E2D;&#x7684;&#x8FD9;&#x4E24;&#x884C;&#x5427;&#xFF1A;<br><code>b[k-1].num += (r-mid);</code><br><code>b[k-1].num += (j-mid-1);</code><br>&#x6B63;&#x56E0;&#x4E3A;Merge()&#x662F;&#x5BF9;&#x4E24;&#x7EC4;&#x6709;&#x5E8F;&#x7684;&#x5E8F;&#x5217;&#x5408;&#x5E76;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x4E24;&#x884C;&#x8BB0;&#x5F55;&#x7684;&#x662F;&#xFF0C;a[i].val&#x540E;&#x9762;&#x6BD4;&#x5B83;&#x5C0F;&#x7684;&#x6709;&#x591A;&#x5C11;&#xFF1B;</p><ul><li>***&#x6CE8;&#xFF1A;&#x5982;&#x679C;&#x8981;&#x6C42;&#x51FA;&#x9006;&#x5E8F;&#x5BF9;&#xFF0C;&#x90A3;&#x4E48;&#x65E2;&#x8981;&#x8BB0;&#x5F55;a[i].val&#x540E;&#x9762;&#x6BD4;&#x5B83;&#x5C0F;&#x7684;&#x7EC4;&#x6570;&#xFF0C;&#x8FD8;&#x8981;&#x8BB0;&#x5F55;&#x524D;&#x9762;&#x6BD4;&#x5B83;&#x5927;&#x7684;&#x7EC4;&#x6570;&#xFF1B;<br>&#x5176;&#x5B9E;&#x53EA;&#x52A0;&#x4E00;&#x884C;&#x4EE3;&#x7801;&#x5373;&#x53EF;&#xFF0C;&#x5C31;&#x662F;&#x6CE8;&#x91CA;&#x6389;&#x7684;&#x90A3;&#x53E5;<br><code>//b[k-1].num += (mid-i+1);</code><br>&#x540C;&#x6837;&#x5BF9;&#x4E8E; 2 4 3 1 &#x5404;&#x7EC4;&#x9006;&#x5E8F;&#x5BF9;&#x7ED3;&#x679C;&#xFF1A;<br>1 2 1 0<br>0 0 1 3<br>&#x5F52;&#x5E76;&#x540E;&#x7684;&#x7ED3;&#x679C;&#x4E3A;&#xFF1A;<br>a[].val 1 2 3 4<br>a[].num 3 1 2 3</li></ul><h3 id="&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x6C42;&#x89E3;&#x9006;&#x5E8F;&#x6570;"><a href="#&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x6C42;&#x89E3;&#x9006;&#x5E8F;&#x6570;" class="headerlink" title="&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x6C42;&#x89E3;&#x9006;&#x5E8F;&#x6570;"></a>&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x6C42;&#x89E3;&#x9006;&#x5E8F;&#x6570;</h3><ul><li>&#x540C;&#x6837;&#x4ECE;&#x95EE;&#x9898;&#x7684;&#x6E90;&#x5934;&#x51FA;&#x53D1;&#xFF0C;&#x8FD8;&#x662F;&#x5BF9;&#x4E8E;&#x4E00;&#x7EC4;&#x9006;&#x5E8F;&#xFF0C;&#x8FD9;&#x91CC;&#x53EA;&#x5BF9;&#x8F83;&#x5927;&#x7684;&#x6570;&#x8FDB;&#x884C;&#x6807;&#x8BB0;</li><li>&#x8BB0;&#x5F55;a[i]&#x540E;&#x9762;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#x5C0F;&#x4E8E;&#x5B83;&#x7684;&#x6570;&#xFF0C;&#x663E;&#x7136;&#x8FD9;&#x9700;&#x8981;&#x4ECE;&#x540E;&#x5F80;&#x524D;&#x904D;&#x5386;<br>&#x5BF9;&#x4E8E; 2 4 3 1 &#x4ECE;&#x540E;&#x5F80;&#x524D;&#x8BB0;&#x5F55;&#x9006;&#x5E8F; 1 2 1 0<br>&#x7C97;&#x66B4;&#x7684;&#x65B9;&#x6CD5;&#x5F53;&#x7136;&#x662F;&#x4E24;&#x5C42;&#x5FAA;&#x73AF;&#x4E86;&#xFF0C;&#x53EF;&#x4EE5;&#x7ED3;&#x5408;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x7684;&#x597D;&#x5904;&#xFF08;&#x5355;&#x70B9;&#x66F4;&#x65B0;&#x3001;&#x533A;&#x95F4;&#x6C42;&#x548C;&#xFF09;&#x8FDB;&#x884C;&#x6539;&#x8FDB;<br>&#x6709;&#x5173;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x7684;&#x4ECB;&#x7ECD;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x6211;&#x7684;&#x53E6;&#x4E00;&#x7BC7;&#x535A;&#x5BA2;&#xFF1A;<br><a></a></li></ul><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong></p><ol><li>&#x6784;&#x5EFA;C[1:n]&#x7684;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#xFF08;&#x8003;&#x8651;&#x5230;a[]&#x53EF;&#x80FD;&#x6570;&#x636E;&#x8FC7;&#x5927;&#xFF0C;&#x53EF;&#x4EE5;&#x79BB;&#x6563;&#x5316;&#x4E00;&#x4E0B;&#xFF0C;&#x540E;&#x9762;&#x4F1A;&#x6709;&#x4ECB;&#x7ECD;&#xFF09;&#xFF0C;&#x521D;&#x59CB;&#x5316;&#x4E3A;0</li><li>&#x4ECE;&#x540E;&#x5F80;&#x524D;&#x904D;&#x5386;&#x65F6;&#xFF0C;&#x5355;&#x503C;&#x66F4;&#x65B0;a[i]+1&#xFF0C;&#x533A;&#x95F4;&#x52A0;1&#x5373;&#x53EF;&#xFF0C;&#x6BCF;&#x6B21;&#x5355;&#x503C;&#x67E5;&#x8BE2;&#x5373;&#x53EF;</li></ol><p>&#x8FD8;&#x539F;&#x4E00;&#x4E0B;&#x9006;&#x5E8F;&#x904D;&#x5386;2 4 3 1&#x8FC7;&#x7A0B;&#x4E2D;&#x5F55;&#x5165;C[]&#x7684;&#x539F;&#x6570;&#x636E; A[]&#x7684;&#x53D8;&#x5316;&#x5427;</p><blockquote><p>C[]&#x7684;&#x539F;&#x6570;&#x636E; A[]:<br>A[1] A[2] A[3] A[4]<br> 0    1    0    0<br> 0    1    0    1<br> 0    1    0    1<br> 0    1    1    1<br>&#x5355;&#x70B9;&#x66F4;&#x65B0;&#x5373;&#x53EF;&#xFF0C;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x5BF9;&#x5176;&#x533A;&#x95F4;&#x6C42;&#x548C;&#x4F9D;&#x6B21;&#x4E3A;0 1 2 1&#xFF0C;&#x6700;&#x540E;&#x7D2F;&#x52A0;&#x5F97;&#x5230;&#x9006;&#x5E8F;&#x6570;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p></blockquote><pre><code class="c++"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;<span class="keyword">int</span> n;<span class="keyword">int</span> tree[maxn], Hash[maxn];<span class="keyword">int</span> data[maxn];<span class="class"><span class="keyword">struct</span> <span class="title">note</span>{</span>    <span class="keyword">int</span> value;    <span class="keyword">int</span> index;}a[maxn];<span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(struct note x, struct note y)</span></span>{    <span class="keyword">return</span> x.value &lt; y.value;}<span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>{    <span class="keyword">return</span> x&amp;(-x);}<span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> temp)</span></span>{    <span class="keyword">while</span>(i &lt;= n){        tree[i] += temp;        i += lowbit(i);    }}<span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> i)</span></span>{    <span class="keyword">int</span> res = <span class="number">0</span>;    <span class="keyword">while</span>(i &gt; <span class="number">0</span>){        res += tree[i];        i -= lowbit(i);    }    <span class="keyword">return</span> res;}<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{    <span class="built_in">cin</span> &gt;&gt; n;    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i){        <span class="built_in">cin</span> &gt;&gt; a[i].value;        a[i].index = i;    }<span class="comment">//&#x79BB;&#x6563;&#x5316;</span>    sort(a+<span class="number">1</span>, a+n+<span class="number">1</span>, comp);    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i){        <span class="keyword">if</span>(i != <span class="number">1</span> &amp;&amp; a[i].value == a[i<span class="number">-1</span>].value)            Hash[a[i].index] = Hash[a[i<span class="number">-1</span>].index];        <span class="keyword">else</span>            Hash[a[i].index] = i;    }    <span class="keyword">int</span> ans = <span class="number">0</span>;    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i){        <span class="comment">//cout &lt;&lt; getsum(Hash[i]) &lt;&lt;&quot; &quot;;</span>        ans += getsum(Hash[i]);        <span class="keyword">if</span>(Hash[i] != n){            updata(Hash[i]+<span class="number">1</span>, <span class="number">1</span>);        }    }    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;    <span class="keyword">return</span> <span class="number">0</span>;}</code></pre><p>***&#x6CE8;&#xFF1A;&#x4E0D;&#x5C31;&#x662F;&#x5355;&#x70B9;&#x66F4;&#x65B0;&#xFF0C;&#x533A;&#x95F4;&#x6C42;&#x548C;&#x5417;&#xFF0C;&#x7EBF;&#x6BB5;&#x6811;&#x4E5F;&#x53EF;&#x4EE5;&#x641E;&#x5B9A;&#xFF0C;&#x4F46;&#x8FD8;&#x662F;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x8D77;&#x6765;&#x7B80;&#x5355;&#x4E9B;</p><h3 id="&#xB7;&#x3010;&#x84DD;&#x6865;&#x3011;&#xB7;&#x5C0F;&#x670B;&#x53CB;&#x6392;&#x961F;"><a href="#&#xB7;&#x3010;&#x84DD;&#x6865;&#x3011;&#xB7;&#x5C0F;&#x670B;&#x53CB;&#x6392;&#x961F;" class="headerlink" title="&#xB7;&#x3010;&#x84DD;&#x6865;&#x3011;&#xB7;&#x5C0F;&#x670B;&#x53CB;&#x6392;&#x961F;"></a>&#xB7;&#x3010;&#x84DD;&#x6865;&#x3011;&#xB7;&#x5C0F;&#x670B;&#x53CB;&#x6392;&#x961F;</h3>]]></content>
      
      
      <categories>
          
          <category> 数学知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组专题</title>
      <link href="/2020/06/27/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
      <url>/2020/06/27/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>&#x672C;&#x6587;&#x5C06;&#x4EE5;<strong>&#x5355;&#x70B9;&#x66F4;&#x65B0;&#x3001;&#x533A;&#x95F4;&#x6C42;&#x548C;</strong>&#x5F00;&#x542F;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x7684;&#x65B0;&#x4E16;&#x754C;&#x3002;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x6301;&#x7EED;&#x66F4;&#x65B0;~&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><a id="more"></a><p>&#x540C;&#x6837;&#x662F;&#x6570;&#x7EC4;&#x6A21;&#x62DF;&#x6811;&#x5F62;&#x7ED3;&#x6784;&#xFF0C;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x5E38;&#x548C;&#x7EBF;&#x6BB5;&#x6811;&#x6BD4;&#x8F83;&#x4F18;&#x52A3;&#xFF0C;&#x653E;&#x5FC3;&#xFF0C;&#x4E0B;&#x9762;&#x4FDD;&#x8BC1;&#x4E00;&#x5B57;&#x4E0D;&#x63D0;&#x7EBF;&#x6BB5;&#x6811;&#xFF0C;&#x6587;&#x672B;&#x4F1A;&#x6709;&#x94FE;&#x63A5;&#x4F20;&#x9001;&#xFF0C;&#x4E13;&#x95E8;&#x6BD4;&#x8F83;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x548C;&#x7EBF;&#x6BB5;&#x6811;&#x3002;</p><blockquote><p>&#x8FD8;&#x662F;&#x5148;&#x611F;&#x8C22;&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#xFF08;&#x5199;&#x7684;&#x5341;&#x5206;&#x8BE6;&#x7EC6;&#x4E86;&#xFF0C;&#x8FD9;&#x91CC;&#x53EA;&#x4F5C;&#x603B;&#x7ED3;&#xFF09;&#xFF1A;<br><a href="https://www.cnblogs.com/xenny/p/9739600.html" target="_blank" rel="noopener">&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x8BE6;&#x89E3;</a></p></blockquote><h3 id="&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x5355;&#x70B9;&#x66F4;&#x65B0;&#x3001;&#x533A;&#x95F4;&#x6C42;&#x548C;"><a href="#&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x5355;&#x70B9;&#x66F4;&#x65B0;&#x3001;&#x533A;&#x95F4;&#x6C42;&#x548C;" class="headerlink" title="&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x5355;&#x70B9;&#x66F4;&#x65B0;&#x3001;&#x533A;&#x95F4;&#x6C42;&#x548C;"></a>&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x5355;&#x70B9;&#x66F4;&#x65B0;&#x3001;&#x533A;&#x95F4;&#x6C42;&#x548C;</h3><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong></p><ol><li>&#x6570;&#x7EC4;A[]&#x8BB0;&#x5F55;&#x539F;&#x6570;&#x636E;&#xFF0C; C[]&#x8868;&#x793A;&#x6211;&#x4EEC;&#x7684;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#xFF08;&#x6570;&#x7EC4;&#x957F;&#x5EA6;&#x548C; A[]&#x76F8;&#x540C;&#xFF09;&#xFF0C;&#x6570;&#x7EC4;&#x7684;&#x9996;&#x4F4D;&#x90FD;&#x9057;&#x5F03;<br>&#x56E0;&#x4E3A;C[]&#x7684;&#x6784;&#x5EFA;&#x548C;&#x4E8C;&#x8FDB;&#x5236;&#x5BC6;&#x5207;&#x76F8;&#x5173;&#xFF0C;&#x4E0B;&#x9762;&#x7684;&#x6570;&#x5747;&#x7528;<strong>&#x4E8C;&#x8FDB;&#x5236;</strong>&#x8868;&#x793A;</li><li>&#x6784;&#x5EFA;&#x8FC7;&#x7A0B;&#xFF1A;<ul><li>C[1] = A[1];</li><li>C[10] = A[1] + A[10];</li><li>C[11] = A[11];</li><li>C[100] = A[1] + A[10] + A[11] + A[100];</li><li>C[101] = A[101];</li><li>C[110] = A[101] + A[110];</li><li>C[111] = A[111];</li><li>C[1000] = A[1] + A[10] + A[11] + A[100] + A[101] + A[110] + A[111] + A[1000];</li></ul></li></ol><p>&#x597D;&#x4E86;&#x7528;&#x4E8C;&#x8FDB;&#x5236;&#x786E;&#x5B9E;&#x9EBB;&#x70E6;&#xFF0C;&#x540E;&#x9762;&#x8FD8;&#x662F;&#x56DE;&#x5F52;&#x5341;&#x8FDB;&#x5236;&#x8868;&#x793A;&#x3002;&#x8FD9;&#x5176;&#x5B9E;&#x662F;&#x6709;&#x89C4;&#x5F8B;&#x7684;&#xFF0C;&#x76F4;&#x63A5;ctrl+v&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#x91CC;&#x7684;&#x4E86;</p><ul><li>$C[i] = A[i - 2^k+1] + A[i - 2^k+2] + &#x2026; + A[i];$ //k&#x4E3A;i&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x4E2D;&#x4ECE;&#x6700;&#x4F4E;&#x4F4D;&#x5230;&#x9AD8;&#x4F4D;&#x8FDE;&#x7EED;&#x96F6;&#x7684;&#x957F;&#x5EA6;</li><li>&#x5982;&#x5BF9;&#x4E8E;C[6],&#x4E8C;&#x8FDB;&#x5236;110&#x4F4E;&#x4F4D;&#x5F00;&#x59CB;&#x6709;&#x4E00;&#x4E2A;&#x8FDE;&#x7EED;&#x96F6;&#xFF0C;k&#x53D6;1&#xFF0C;C[6]=A[5]+A[6]</li><li>&#x6211;&#x4EEC;&#x5148;&#x628A;k&#x7684;&#x95EE;&#x9898;&#x653E;&#x4E00;&#x8FB9;&#xFF0C;&#x5047;&#x8BBE;C[]&#x5DF2;&#x7ECF;&#x6784;&#x5EFA;&#x597D;&#x4E86;&#xFF0C;&#x524D;i&#x9879;&#x7684;&#x548C; Sum[i]&#x8FD9;&#x6837;&#x5F97;&#x5230;&#xFF1A;<br>$$Sum[i] = C[i] + C[i-2^{k1}] + C[(i - 2^{k1}) - 2^{k2}] + &#x2026;$$<br>&#x540C;&#x6837;&#x5982;Sum[6]&#xFF0C;&#x4E8C;&#x8FDB;&#x5236;110&#x7684;k&#x53D6;1&#xFF0C; &#x4E8C;&#x8FDB;&#x5236;100&#x7684;k&#x53D6;3&#xFF0C;Sum[6] = C[6]+ C[4];</li><li>&#x5982;&#x4F55;&#x5BF9;C[i]&#x6C42;&#x5BF9;&#x5E94;&#x7684;k&#x662F;&#x5173;&#x952E;&#xFF0C;k&#x7684;&#x5F15;&#x5165;&#x8BA9;&#x4EBA;&#x4E0D;&#x4EC5;&#x8D5E;&#x7F8E;&#x4F4D;&#x8FD0;&#x7B97;&#x7684;&#x4F18;&#x96C5;&#x3002;</li></ul><ol start="3"><li>lowbit(int i)&#x8BA1;&#x7B97;C[i]&#x5BF9;&#x5E94;&#x7684;$2^k$&#xFF08;&#x4E8E;&#x662F;lowbit&#x53D6;i&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x4E2D;&#x4ECE;&#x4F4E;&#x4F4D;&#x5230;&#x9AD8;&#x4F4D;&#x9996;&#x6B21;&#x51FA;&#x73B0;1&#x7684;&#x4F4D;&#x7F6E;&#xFF09;</li></ol><ul><li>&#x5148;&#x7ED9;&#x51FA;&#x6700;&#x4F18;&#x7B54;&#x6848;<code>i&amp;(-i)</code></li><li>&#x4ECD;&#x7136;&#x4E3E;C[6]&#x7684;&#x4F8B;&#x5B50;&#xFF0C;&#x4E8C;&#x8FDB;&#x5236;110&#x5BF9;&#x5E94;&#x7684;$2^k$&#x4E3A;010&#xFF0C;&#x5176;&#x5B9E;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x8981;&#x6C42;&#x63A8;&#x51FA;&#x6765;;<br>&#x53EA;&#x9700;&#x4FDD;&#x7559;&#x4F4E;&#x4F4D;&#x5230;&#x9AD8;&#x4F4D;&#x9996;&#x6B21;&#x51FA;&#x73B0;&#x7684;1&#x5373;&#x53EF;&#xFF1A;<code>i&amp;(~(i-1))</code><br>&#x56E0;&#x4E3A;-i&#x5C31;&#x662F;i-1&#x518D;&#x53D6;&#x53CD;&#xFF08;&#x8D1F;&#x6570;&#x7684;&#x8865;&#x7801;&#x77E5;&#x8BC6;&#xFF0C;&#x8BBE;&#x60F3;&#x4E00;&#x4E0B;&#x5168;&#x4E3A;1&#x65F6;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x8868;&#x793A;-1&#xFF09;&#xFF0C;&#x6240;&#x4EE5;&#x5F97;&#x5230;&#x6700;&#x4F18;&#x7B54;&#x6848;<code>i&amp;(-i)</code><br>&#x641E;&#x5B9A;&#x4E86;lowbit()&#x79BB;&#x6210;&#x529F;&#x5C31;&#x4E0D;&#x8FDC;&#x4E86;~&#xFF08;&#x8D39;&#x8FD9;&#x4E48;&#x5927;&#x52B2;&#x6C42;&#x4E2A;&#x533A;&#x95F4;&#x548C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5FC5;&#x987B;O(log n)&#xFF09;</li></ul><p>***&#x6CE8;&#xFF1A;&#x66F4;&#x65B0;A[i]&#x65F6;&#x6839;&#x636E;&#x516C;&#x5F0F;&#x66F4;&#x65B0;C[],&#x8BA1;&#x7B97; Sum[i]&#x65F6;&#x4E5F;&#x8981;&#x5229;&#x7528;lowbit()<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x6838;&#x5FC3;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>], c[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>{</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> temp)</span></span>{<span class="comment">//i&#x7684;&#x4F4D;&#x7F6E;&#x4E0A;&#x589E;&#x52A0;&#x503C;temp</span></span><br><span class="line"><span class="keyword">while</span>(i &lt;= n){</span><br><span class="line">c[i] += temp;</span><br><span class="line">i += lowbit(i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> i)</span></span>{<span class="comment">//&#x6C42;Sum(i)</span></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &gt; <span class="number">0</span>){</span><br><span class="line">res += c[i];</span><br><span class="line">i -= lowbit(i);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x4EE3;&#x7801;&#x5F88;&#x77ED;&#xFF0C;&#x5B9E;&#x73B0;&#x4E86;&#x5355;&#x70B9;&#x66F4;&#x65B0;&#xFF0C;&#x533A;&#x95F4;&#x67E5;&#x8BE2;[x,y]&#x76F4;&#x63A5;<code>Sum(y)-Sum(x-1)</code>&#x5373;&#x53EF;&#x3002;</p><h3 id="&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x533A;&#x95F4;&#x66F4;&#x65B0;&#x3001;&#x533A;&#x95F4;&#x6C42;&#x548C;"><a href="#&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x533A;&#x95F4;&#x66F4;&#x65B0;&#x3001;&#x533A;&#x95F4;&#x6C42;&#x548C;" class="headerlink" title="&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x533A;&#x95F4;&#x66F4;&#x65B0;&#x3001;&#x533A;&#x95F4;&#x6C42;&#x548C;"></a>&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x533A;&#x95F4;&#x66F4;&#x65B0;&#x3001;&#x533A;&#x95F4;&#x6C42;&#x548C;</h3><ul><li>&#x4E0A;&#x9762;&#x7684;update()&#x53EA;&#x662F;&#x9488;&#x5BF9;&#x5355;&#x70B9;&#x66F4;&#x65B0;&#xFF0C;&#x5982;&#x679C;&#x8981;&#x5BF9;&#x67D0;&#x4E2A;&#x533A;&#x95F4;&#x7684;&#x503C;&#x66F4;&#x65B0;&#xFF08;&#x5982;&#x5168;&#x52A0;&#x4E0A;&#x67D0;&#x4E2A;&#x503C;&#x3001;&#x51CF;&#x53BB;&#x67D0;&#x4E2A;&#x503C;&#xFF09;&#xFF0C;&#x9700;&#x8981;&#x5F15;&#x5165;&#x5DEE;&#x5206;&#x7684;&#x601D;&#x60F3;&#xFF0C;D[]&#x4E0D;&#x65AD;&#x505A;&#x5DEE;&#x5206; D[i] = A[i] - A[i-1]&#xFF1B;</li></ul><p>&#x76F4;&#x63A5;&#x501F;&#x7528;&#x4EBA;&#x5BB6;&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#x7684;&#x4F8B;&#x5B50;&#x5427;&#xFF1A;</p><blockquote><p>A[] = 1 2 3 5 6 9<br>D[] = 1 1 1 2 1 3<br>&#x5982;&#x679C;&#x6211;&#x4EEC;&#x628A;[2,5]&#x533A;&#x95F4;&#x5185;&#x503C;&#x52A0;&#x4E0A;1&#xFF0C;&#x5219;&#x53D8;&#x6210;&#x4E86;<br>A[] = 1 3 4 6 7 9<br>D[] = 1 2 1 2 1 2<br>&#x4EC5;&#x6539;&#x53D8;D[2]&#x548C;D[6]&#x7684;&#x4F4D;&#x7F6E;&#x5373;&#x53EF;</p></blockquote><ul><li><p>&#x4E8E;&#x662F;&#x4E4B;&#x524D;&#x5199;&#x7684;&#x4EE3;&#x7801;&#x90FD;&#x8FD8;&#x6709;&#x7528;&#xFF0C;&#x53EA;&#x662F;&#x7528;D[]&#x66FF;&#x6362;&#x4E86; A[],&#x5728;&#x5F00;&#x59CB;&#x8F93;&#x5165; A[]&#x66F4;&#x65B0;&#x65F6;&#x7684;<code>update(i, a[i])</code>&#x6539;&#x4E3A;<code>update(i, a[i]-a[i-1])</code>&#xFF0C; &#x5BF9;&#x4E8E;&#x8981;&#x66F4;&#x65B0;&#x7684;&#x533A;&#x95F4;[x,y]&#x589E;&#x52A0;<br><code>update(x, temp); update(y+1, -temp);</code></p></li><li><p>&#x663E;&#x7136;&#x6B64;&#x65F6;Sum(i)&#x6C42;&#x7684;&#x662F;&#x66F4;&#x65B0;&#x540E;&#x5355;&#x4E2A;A[i]&#x7684;&#x503C;&#x4E86;&#xFF0C;&#x4F46;&#x5DF2;&#x7ECF;O(log n)&#x5B9E;&#x73B0;&#x4E86;&#x533A;&#x95F4;&#x66F4;&#x65B0;&#x3001;&#x5355;&#x503C;&#x67E5;&#x8BE2;&#x4E86;</p></li><li><p>&#x8981;&#x533A;&#x95F4;&#x6C42;&#x548C;&#x8FD8;&#x9700;&#x7EE7;&#x7EED;&#x5229;&#x7528;&#x5DEE;&#x5206;&#xFF0C;&#x540E;&#x9762;&#x5C31;&#x662F;&#x7EAF;&#x516C;&#x5F0F;&#x63A8;&#x5BFC;&#x4E86;</p></li></ul><p>$Sum(n) = A[1] + A[2] + &#x2026; + A[n]<br>= (D[1]) + (D[1]+D[2]) + &#x2026; + (D[1]+D[2]+&#x2026;+D[n])<br>= n<em>D[1] + (n-1)<em>D[2] + &#x2026; + 1</em>D[n]<br>= n</em>(D[1]+D[2]+&#x2026;+D[n]) - (0<em>D[1]+1<em>D[2]+&#x2026;+(n-1)</em>D[n])<br>= n\sum_{i=1}^{n}{D[i]} - \sum_{i=1}^{n}{D[i]</em>(i-1)}$</p><p>&#x4E8E;&#x662F;&#x53C8;&#x7528;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;sum1[] sum2[]&#x66FF;&#x4EE3;&#x4E86; D[]<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll sum1[<span class="number">500005</span>];<span class="comment">//D[1]+D[2]+...+D[N]</span></span><br><span class="line">ll sum2[<span class="number">500005</span>];<span class="comment">//0*D[1] + 1*D[2] + ... + (n-1)*D[n]</span></span><br><span class="line">ll a[<span class="number">500005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>{</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i, ll temp)</span></span>{</span><br><span class="line"><span class="keyword">int</span> x = i;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= n){</span><br><span class="line">sum1[i] += temp;</span><br><span class="line">sum2[i] += (x<span class="number">-1</span>)*temp;</span><br><span class="line">i += lowbit(i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function">ll <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> i)</span></span>{</span><br><span class="line">ll res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x = i;</span><br><span class="line"><span class="keyword">while</span>(i &gt; <span class="number">0</span>){</span><br><span class="line">res += (x*sum1[i] - sum2[i]);<span class="comment">//sum[i]</span></span><br><span class="line">i -= lowbit(i);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i){</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">update(i, a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(m--){</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; getsum(y)-getsum(x<span class="number">-1</span>) &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown数学公式及符号汇总</title>
      <link href="/2020/06/27/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%8F%8A%E7%AC%A6%E5%8F%B7/"/>
      <url>/2020/06/27/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%8F%8A%E7%AC%A6%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>&#x5199;&#x535A;&#x5BA2;&#x65F6;&#xFF0C;&#x6BCF;&#x6B21;&#x60F3;&#x7528;&#x67D0;&#x4E2A;&#x6570;&#x5B66;&#x516C;&#x5F0F;&#x90FD;&#x8981;&#x53BB;&#x7FFB;&#x522B;&#x4EBA;&#x6C47;&#x603B;&#x7684;&#x535A;&#x5BA2;&#xFF0C;&#x6709;&#x7684;&#x603B;&#x7ED3;&#x7684;&#x786E;&#x5B9E;&#x5F88;&#x8BE6;&#x7EC6;&#xFF0C;&#x4F46;&#x90FD;&#x53EF;&#x4EE5;&#x5B8C;&#x5584;&#x4E00;&#x4E0B;&#xFF0C;&#x5E72;&#x8106;&#x81EA;&#x5DF1;&#x6C47;&#x603B;&#x4E00;&#x4E2A;&#x5427;&#xFF0C;&#x6301;&#x7EED;&#x66F4;&#x65B0;~</p><a id="more"></a><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br>&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#x94FE;&#x63A5;&#xFF1A;<br><a href="https://www.cnblogs.com/YanQing1998/p/10986911.html" target="_blank">&#x5982;&#x4F55;&#x4F7F;&#x7528;Typora&#x7F16;&#x8F91;&#x6570;&#x5B66;&#x516C;&#x5F0F;&#xFF1F;</a></p><p><a href="https://www.cnblogs.com/zongmin/p/11519918.html" target="_blank">Markdown &#x590D;&#x6742;&#x516C;&#x5F0F;&amp;&#x5E38;&#x7528;&#x7B26;&#x53F7;</a></p><p><a href="https://www.jianshu.com/p/d01d2c5c7406" target="_blank">&#x5728;Markdown&#x4E2D;&#x8F93;&#x5165;&#x6570;&#x5B66;&#x516C;&#x5F0F;(MathJax)</a><br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><p>[TOC]</p><h3 id="&#x516C;&#x5F0F;&#x683C;&#x5F0F;"><a href="#&#x516C;&#x5F0F;&#x683C;&#x5F0F;" class="headerlink" title="&#x516C;&#x5F0F;&#x683C;&#x5F0F;"></a>&#x516C;&#x5F0F;&#x683C;&#x5F0F;</h3><ul><li>&#x884C;&#x5185;&#x516C;&#x5F0F;<ul><li>&#x8F93;&#x5165;<code>$a+b=c$</code>&#xFF1B;</li><li>&#x6548;&#x679C;&#xFF1A; $a+b=c$</li></ul></li><li>&#x5757;&#x7EA7;&#x516C;&#x5F0F;&#xFF08;&#x5355;&#x72EC;&#x6210;&#x884C;&#xFF09;<ul><li>&#x8F93;&#x5165;<code>$$a+b=c$$</code></li><li>&#x6548;&#x679C;&#xFF1A;$$a+b=c$$</li></ul></li></ul><p>***&#x6CE8;&#xFF1A;&#x540E;&#x9762;&#x7684;&#x8F93;&#x5165;&#x9ED8;&#x8BA4;&#x683C;&#x5F0F;&#x4E3A;<code>$...$</code></p><h3 id="&#x5E38;&#x7528;&#x7B26;&#x53F7;"><a href="#&#x5E38;&#x7528;&#x7B26;&#x53F7;" class="headerlink" title="&#x5E38;&#x7528;&#x7B26;&#x53F7;"></a>&#x5E38;&#x7528;&#x7B26;&#x53F7;</h3><table><thead><tr><th>&#x8F93;&#x5165;</th><th>&#x6548;&#x679C;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>x_1</td><td>$x_1$</td><td>&#x4E0B;&#x89D2;&#x6807;</td></tr><tr><td>x_{a1}</td><td>$x_{a1}$</td><td>&#x540C;&#x4E0A;</td></tr><tr><td>x^2</td><td>$x^2$</td><td>&#x4E0A;&#x89D2;&#x6807;</td></tr><tr><td>x^{a1}</td><td>$x^{a1}$</td><td>&#x540C;&#x4E0A;</td></tr><tr><td>\left( x \right)</td><td>$\left( x \right)$</td><td>&#x5C0F;&#x62EC;&#x53F7;</td></tr><tr><td>\lbrace x \rbrace</td><td>$\lbrace x \rbrace$</td><td>&#x4E2D;&#x62EC;&#x53F7;</td></tr><tr><td>\left[ x \right]</td><td>$\left[ x \right]$</td><td>&#x5927;&#x62EC;&#x53F7;</td></tr><tr><td>\cdots</td><td>$\cdots$</td><td>&#x7701;&#x7565;</td></tr><tr><td>\a \quad b</td><td>$a \quad b$</td><td>&#x7A7A;&#x683C;</td></tr><tr><td>\mid</td><td>$\mid$</td><td></td></tr><tr><td>\cdot</td><td>$\cdot$</td><td></td></tr><tr><td>\circ</td><td>$\circ$</td><td></td></tr><tr><td>\uparrow</td><td>$\uparrow$</td><td></td></tr><tr><td>\downarrow</td><td>$\downarrow$</td><td></td></tr><tr><td>\rightarrow</td><td>$\rightarrow$</td><td></td></tr><tr><td>\leftarrow</td><td>$\leftarrow$</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="&#x5E38;&#x7528;&#x6570;&#x5B66;&#x7B26;&#x53F7;"><a href="#&#x5E38;&#x7528;&#x6570;&#x5B66;&#x7B26;&#x53F7;" class="headerlink" title="&#x5E38;&#x7528;&#x6570;&#x5B66;&#x7B26;&#x53F7;"></a>&#x5E38;&#x7528;&#x6570;&#x5B66;&#x7B26;&#x53F7;</h3><table><thead><tr><th>&#x8F93;&#x5165;</th><th>&#x6548;&#x679C;</th><th>&#x8BF4;&#x660E;</th></tr></thead><tbody><tr><td>\div</td><td>$\div$</td><td>&#x9664;</td></tr><tr><td>\times</td><td>$\times$</td><td>&#x4E58;</td></tr><tr><td>\leq</td><td>$\leq$</td><td>&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;</td></tr><tr><td>\geq</td><td>$\geq$</td><td>&#x5927;&#x4E8E;&#x7B49;&#x4E8E;</td></tr><tr><td>\neq</td><td>$\neq$</td><td>&#x4E0D;&#x7B49;&#x4E8E;</td></tr><tr><td>\pm</td><td>$\pm$</td><td>&#x52A0;&#x51CF;</td></tr><tr><td>\equiv</td><td>$\equiv$</td><td>&#x6052;&#x7B49;&#x4E8E;</td></tr><tr><td>\forall</td><td>$\forall$</td><td>&#x4EFB;&#x610F;</td></tr><tr><td>\exists</td><td>$\exists$</td><td>&#x5B58;&#x5728;</td></tr><tr><td>\in</td><td>$\in$</td><td>&#x5C5E;&#x4E8E;</td></tr><tr><td>\notin</td><td>$\notin$</td><td>&#x4E0D;&#x5C5E;&#x4E8E;</td></tr><tr><td>\subset</td><td>$\subset$</td><td>&#x5B50;&#x96C6;</td></tr><tr><td>\subseteq</td><td>$\subseteq$</td><td>&#x771F;&#x5B50;&#x96C6;</td></tr><tr><td>\bigcap</td><td>$\bigcap$</td><td>&#x5E76;</td></tr><tr><td>\bigcup</td><td>$\bigcup$</td><td>&#x4EA4;</td></tr><tr><td>\bigwedge</td><td>$\bigwedge$</td><td>&#x4E0E;</td></tr><tr><td>\bigvee</td><td>$\bigvee$</td><td>&#x6216;</td></tr><tr><td>\emptyset</td><td>$\emptyset$</td><td>&#x7A7A;&#x96C6;</td></tr><tr><td>\infty</td><td>$\infty$</td><td>&#x65E0;&#x7A77;</td></tr><tr><td>\because</td><td>$\because$</td><td></td></tr><tr><td>\therefore</td><td>$\therefore$</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="&#x5E38;&#x7528;&#x6570;&#x5B66;&#x516C;&#x5F0F;"><a href="#&#x5E38;&#x7528;&#x6570;&#x5B66;&#x516C;&#x5F0F;" class="headerlink" title="&#x5E38;&#x7528;&#x6570;&#x5B66;&#x516C;&#x5F0F;"></a>&#x5E38;&#x7528;&#x6570;&#x5B66;&#x516C;&#x5F0F;</h3><table><thead><tr><th>&#x8F93;&#x5165;</th><th>&#x6548;&#x679C;</th></tr></thead><tbody><tr><td>\frac{1}{2}</td><td>$\frac{1}{2}$</td></tr><tr><td>\sqrt{2}</td><td>$\sqrt{2}$</td></tr><tr><td>\sqrt[3]{2}</td><td>$\sqrt[3]{2}$</td></tr><tr><td>\vec{a}</td><td>$\vec{a}$</td></tr><tr><td>\int{x}dx</td><td>$\int{x}dx$</td></tr><tr><td>\int_{1}^{2}{x}dx</td><td>$\int_{1}^{2}{x}dx$</td></tr><tr><td>\sum{a}</td><td>$\sum{a}$</td></tr><tr><td>\sum_{i=1}^{100}{a_n}</td><td>$\sum_{i=1}^{100}{a_n}$</td></tr><tr><td>\prod{x}</td><td>$\prod{x}$</td></tr><tr><td>\prod_{i=1}^{100}{x_n}</td><td>$\prod_{i=1}^{100}{x_n}$</td></tr><tr><td>\mathtt{x}`</td><td>$\mathtt{x}`$</td></tr><tr><td>\sin</td><td>$\sin$</td></tr><tr><td>\cos</td><td>$cos$</td></tr><tr><td>\tan</td><td>$\tan$</td></tr><tr><td>\ln e</td><td>$\ln e$</td></tr><tr><td>\log_2 10</td><td>$log_2 10$</td></tr><tr><td>\lg 2</td><td>$lg 2$</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><ul><li><p>&#x82B1;&#x62EC;&#x53F7;</p><p>&#x8F93;&#x5165;&#xFF1A;<code>y(x)=\begin{cases}1,x=0\  0,x\neq0\end{cases}</code></p><p>&#x6548;&#x679C;&#xFF1A;$y(x)=\begin{cases} 1,x=0\ 0,x\neq 0 \end{cases}$</p></li><li><p>&#x6781;&#x9650;</p><p>&#x8F93;&#x5165;&#xFF1A;<code>\lim_{n\to + \infty}</code></p><p>&#x6548;&#x679C;&#xFF1A; $\lim_{n\to + \infty}$</p></li></ul><h3 id="&#x5E38;&#x7528;&#x5E0C;&#x814A;&#x5B57;&#x6BCD;"><a href="#&#x5E38;&#x7528;&#x5E0C;&#x814A;&#x5B57;&#x6BCD;" class="headerlink" title="&#x5E38;&#x7528;&#x5E0C;&#x814A;&#x5B57;&#x6BCD;"></a>&#x5E38;&#x7528;&#x5E0C;&#x814A;&#x5B57;&#x6BCD;</h3><table><thead><tr><th>&#x8F93;&#x5165;</th><th>&#x6548;&#x679C;</th></tr></thead><tbody><tr><td>\alpha</td><td>$\alpha$</td></tr><tr><td>\beta</td><td>$\beta$</td></tr><tr><td>\gamma</td><td>$\gamma$</td></tr><tr><td>\pi</td><td>$\pi$</td></tr><tr><td>\delta</td><td>$\delta$</td></tr><tr><td>\varepsilon</td><td>$\varepsilon$</td></tr><tr><td>\mu</td><td>$\mu$</td></tr><tr><td>\upsilon</td><td>$\upsilon$</td></tr><tr><td>\lambda</td><td>$\lambda$</td></tr><tr><td>\phi</td><td>$\phi$</td></tr><tr><td>\varphi</td><td>$\varphi$</td></tr><tr><td>\omega</td><td>$\omega$</td></tr><tr><td>\zeta</td><td>$\zeta$</td></tr><tr><td>\theta</td><td>$\theta$</td></tr><tr><td>\eta</td><td>$\eta$</td></tr><tr><td>\xi</td><td>$\xi$</td></tr><tr><td>\Omega</td><td>$\Omega$</td></tr><tr><td>\Delta</td><td>$\Delta$</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>·【蓝桥】·买不到的数目</title>
      <link href="/2020/06/19/%E8%93%9D%E6%A1%A5-%E4%B9%B0%E4%B8%8D%E5%88%B0%E7%9A%84%E6%95%B0%E7%9B%AE/"/>
      <url>/2020/06/19/%E8%93%9D%E6%A1%A5-%E4%B9%B0%E4%B8%8D%E5%88%B0%E7%9A%84%E6%95%B0%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>&#x9898;&#x76EE;&#x6765;&#x6E90;&#xFF1A;<a href="http://lx.lanqiao.cn/problem.page?gpid=T31" target="_blank">&#x4E70;&#x4E0D;&#x5230;&#x7684;&#x6570;&#x76EE;</a><br>&#x603B;&#x7ED3;&#x8BE5;&#x9898;&#x6709;&#x4E09;&#x79CD;&#x89E3;&#x6CD5;&#xFF1A;<br>[TOC]</p><a id="more"></a><blockquote><p>&#x95EE;&#x9898;&#x63CF;&#x8FF0;<br>&#x5C0F;&#x660E;&#x5F00;&#x4E86;&#x4E00;&#x5BB6;&#x7CD6;&#x679C;&#x5E97;&#x3002;&#x4ED6;&#x522B;&#x51FA;&#x5FC3;&#x88C1;&#xFF1A;&#x628A;&#x6C34;&#x679C;&#x7CD6;&#x5305;&#x6210;4&#x9897;&#x4E00;&#x5305;&#x548C;7&#x9897;&#x4E00;&#x5305;&#x7684;&#x4E24;&#x79CD;&#x3002;&#x7CD6;&#x679C;&#x4E0D;&#x80FD;&#x62C6;&#x5305;&#x5356;&#x3002;<br>&#x5C0F;&#x670B;&#x53CB;&#x6765;&#x4E70;&#x7CD6;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4ED6;&#x5C31;&#x7528;&#x8FD9;&#x4E24;&#x79CD;&#x5305;&#x88C5;&#x6765;&#x7EC4;&#x5408;&#x3002;&#x5F53;&#x7136;&#x6709;&#x4E9B;&#x7CD6;&#x679C;&#x6570;&#x76EE;&#x662F;&#x65E0;&#x6CD5;&#x7EC4;&#x5408;&#x51FA;&#x6765;&#x7684;&#xFF0C;&#x6BD4;&#x5982;&#x8981;&#x4E70; 10 &#x9897;&#x7CD6;&#x3002;<br>&#x4F60;&#x53EF;&#x4EE5;&#x7528;&#x8BA1;&#x7B97;&#x673A;&#x6D4B;&#x8BD5;&#x4E00;&#x4E0B;&#xFF0C;&#x5728;&#x8FD9;&#x79CD;&#x5305;&#x88C5;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6700;&#x5927;&#x4E0D;&#x80FD;&#x4E70;&#x5230;&#x7684;&#x6570;&#x91CF;&#x662F;17&#x3002;&#x5927;&#x4E8E;17&#x7684;&#x4EFB;&#x4F55;&#x6570;&#x5B57;&#x90FD;&#x53EF;&#x4EE5;&#x7528;4&#x548C;7&#x7EC4;&#x5408;&#x51FA;&#x6765;&#x3002;<br>&#x672C;&#x9898;&#x7684;&#x8981;&#x6C42;&#x5C31;&#x662F;&#x5728;&#x5DF2;&#x77E5;&#x4E24;&#x4E2A;&#x5305;&#x88C5;&#x7684;&#x6570;&#x91CF;&#x65F6;&#xFF0C;&#x6C42;&#x6700;&#x5927;&#x4E0D;&#x80FD;&#x7EC4;&#x5408;&#x51FA;&#x7684;&#x6570;&#x5B57;&#x3002;<br>&#x8F93;&#x5165;&#x683C;&#x5F0F;<br>&#x4E24;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x8868;&#x793A;&#x6BCF;&#x79CD;&#x5305;&#x88C5;&#x4E2D;&#x7CD6;&#x7684;&#x9897;&#x6570;(&#x90FD;&#x4E0D;&#x591A;&#x4E8E;1000)<br>&#x8F93;&#x51FA;&#x683C;&#x5F0F;<br>&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x8868;&#x793A;&#x6700;&#x5927;&#x4E0D;&#x80FD;&#x4E70;&#x5230;&#x7684;&#x7CD6;&#x6570;<br>&#x6837;&#x4F8B;&#x8F93;&#x5165;1<br>4 7<br>&#x6837;&#x4F8B;&#x8F93;&#x51FA;1<br>17<br>&#x6837;&#x4F8B;&#x8F93;&#x5165;2<br>3 5<br>&#x6837;&#x4F8B;&#x8F93;&#x51FA;2<br>7</p></blockquote><h3 id="&#x6570;&#x5B66;&#x77E5;&#x8BC6;"><a href="#&#x6570;&#x5B66;&#x77E5;&#x8BC6;" class="headerlink" title="&#x6570;&#x5B66;&#x77E5;&#x8BC6;"></a>&#x6570;&#x5B66;&#x77E5;&#x8BC6;</h3><ul><li><p>&#x5178;&#x578B;&#x7684;Ax+By=C&#x95EE;&#x9898;&#xFF08;A&#x3001;B&#x53CA;&#x4E24;&#x4E2A;&#x5305;&#x88C5;&#x7CD6;&#x6570;&#x91CF;&#xFF0C;C&#x662F;&#x603B;&#x7CD6;&#x6570;&#xFF09;&#xFF0C;C&#x672A;&#x77E5;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8BA8;&#x8BBA;&#x4E0D;&#x5B9A;&#x65B9;&#x7A0B;&#x7684;&#x89E3;&#x548C;C&#x7684;&#x53D6;&#x503C;&#x7684;&#x5173;&#x7CFB;&#xFF0C;&#x6211;&#x7684;&#x53E6;&#x4E00;&#x7BC7;&#x535A;&#x5BA2;&#x4E0A;&#x6709;&#x8BE6;&#x7EC6;&#x603B;&#x7ED3;&#xFF1A;<br><a href target="_blank">Ax+By=C&#x7684;&#x89E3;&#x7684;&#x8BA8;&#x8BBA;(&#x4EC5;A,B&#x4E3A;&#x5E38;&#x6570;)</a></p></li><li><p>&#x8BE5;&#x9898;&#x6C42;&#x6700;&#x5927;&#x4E0D;&#x80FD;&#x7EC4;&#x5408;&#x51FA;&#x7684;&#x6570;&#x5B57;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x6C42;&#x5BFC;&#x81F4;Ax+By=C&#x65E0;&#x89E3;&#x7684;C&#x7684;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x4E8E;&#x662F;&#x53EF;&#x4EE5;&#x5F97;&#x51FA;&#x4E00;&#x4E9B;&#x9690;&#x542B;&#x6761;&#x4EF6;&#xFF1A;<br>&#x2460;&#x65B9;&#x7A0B;&#x5B58;&#x5728;&#x65E0;&#x89E3;&#xFF0C;&#x4E14;&#x65E0;&#x89E3;&#x7684;&#x4E2A;&#x6570;&#x6709;&#x9650; &#x2461;&#x8003;&#x8651;&#x5B9E;&#x9645;&#x60C5;&#x51B5;x&#x3001;y&#x5747;&#x975E;&#x8D1F;</p></li><li><p>&#x4E8E;&#x662F;&#x7531;&#x6570;&#x5B66;&#x77E5;&#x8BC6;&#x5F97;&#xFF1A;<br>&#x6240;&#x6709;&#x8F93;&#x5165;&#x6837;&#x4F8B;&#x5747;&#x6EE1;&#x8DB3;A&#x3001;B&#x4E92;&#x8D28;&#xFF0C;&#x7EE7;&#x800C;&#x76F4;&#x63A5;&#x8F93;&#x51FA;&#x7ED3;&#x679C;<code>cout &lt;&lt; A*B-(A+B)</code></p></li></ul><h3 id="&#x679A;&#x4E3E;"><a href="#&#x679A;&#x4E3E;" class="headerlink" title="&#x679A;&#x4E3E;"></a>&#x679A;&#x4E3E;</h3><p>&#x5982;&#x679C;&#x4E0D;&#x77E5;&#x9053;&#x4E0A;&#x9762;&#x7684;&#x6570;&#x5B66;&#x77E5;&#x8BC6;&#xFF0C;&#x4EC0;&#x4E48;A&#x3001;B&#x4E92;&#x8D28;&#x7684;&#xFF0C;&#x672C;&#x9898;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x679A;&#x4E3E;&#x6C42;&#x89E3;<br><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong></p><ul><li>&#x65E2;&#x7136;&#x5BFC;&#x81F4;&#x4E0D;&#x5B9A;&#x65B9;&#x7A0B;&#x65E0;&#x89E3;&#x7684;C&#x6709;&#x6700;&#x5927;&#x503C;max&#xFF0C;&#x90A3;&#x4E48;&#x53EF;&#x4EE5;&#x786E;&#x5B9A;&#x4E00;&#x4E2A;C&#x7684;&#x4E0A;&#x754C;MAX&#xFF0C;&#x7136;&#x540E;&#x679A;&#x4E3E;x&#x548C;y&#xFF0C;&#x628A;&#x5C0F;&#x4E8E;&#x8FD9;&#x4E2A;&#x4E0A;&#x754C;MAX&#x7684;&#x53EF;&#x884C;&#x89E3;&#x90FD;&#x679A;&#x4E3E;&#x51FA;&#x6765;&#xFF0C;&#x6700;&#x540E;&#x4ECE;&#x5927;&#x5F80;&#x5C0F;&#x7684;&#x7B5B;&#x9009;&#x5373;&#x53EF;&#x3002;</li><li>&#x5982;&#x4F55;&#x786E;&#x5B9A;&#x8FD9;&#x4E2A;&#x4E0A;&#x754C;MAX? A&#x548C;B&#x65E2;&#x7136;&#x90FD;&#x4E0D;&#x5927;&#x4E8E;1000&#xFF0C;&#x90A3;&#x5C31;&#x76F4;&#x63A5;&#x4EE4;<code>MAX=A*B</code>&#x5427;&#x3002;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; c;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a&gt;&gt; b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; a*x &lt;= a*b; ++x){<span class="comment">//&#x4E0A;&#x9650;a*b</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; a*x+b*y &lt;= a*b; ++y){</span><br><span class="line">c.insert(a*x+b*y);<span class="comment">//&#x7528;set&#x5C06;&#x53EF;&#x884C;&#x7684;c&#x90FD;&#x679A;&#x4E3E;&#x51FA;&#x6765;</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = a*b; k &gt;= <span class="number">0</span>; --k){<span class="comment">//&#x4ECE;&#x5927;&#x5F80;&#x5C0F;&#x7684;&#x7B5B;&#x9009;&#xFF0C;&#x627E;&#x7B2C;&#x4E00;&#x4E2A;&#x4E0D;&#x5B58;&#x5728;</span></span><br><span class="line"><span class="keyword">if</span>(c.find(k) == c.end()){</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; k &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><h3 id="&#x52A8;&#x6001;&#x89C4;&#x5212;"><a href="#&#x52A8;&#x6001;&#x89C4;&#x5212;" class="headerlink" title="&#x52A8;&#x6001;&#x89C4;&#x5212;"></a>&#x52A8;&#x6001;&#x89C4;&#x5212;</h3><p>&#x52A8;&#x6001;&#x89C4;&#x5212;&#x53C8;&#x662F;&#x5BF9;&#x4E0A;&#x9762;&#x679A;&#x4E3E;&#x7684;&#x9AD8;&#x5EA6;&#x603B;&#x7ED3;&#xFF1A;</p><ul><li>&#x6570;&#x7EC4;dp&#x7684;&#x957F;&#x5EA6;&#x6CBF;&#x7528;&#x4E86;&#x4E0A;&#x754C;MAX&#xFF1B;</li><li>dp[i]&#x4E3A;1&#xFF0C;&#x8868;&#x793A;C&#x53D6;i&#x662F;&#x6709;&#x89E3;&#xFF0C;&#x53CD;&#x4E4B;&#x4E3A;0&#xFF0C;&#x65E0;&#x89E3;&#xFF1B;</li><li>&#x76F4;&#x63A5;&#x4E0A;dp&#x65B9;&#x7A0B;&#x5427;&#xFF1A;dp[i] = (dp[i-a]||dp[i-b]) ? 1 : 0</li></ul><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">dp[a] = <span class="number">1</span>; dp[b] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = max(a, b)+<span class="number">1</span>; i &lt; a*b; ++i){</span><br><span class="line">dp[i] = (dp[i-a] || dp[i-b]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = a*b<span class="number">-1</span>; i &gt; <span class="number">0</span>; --i){<span class="comment">//&#x540C;&#x6837;&#x4ECE;&#x5927;&#x5F80;&#x5C0F;&#x7684;&#x7B5B;&#x9009;&#xFF0C;&#x627E;&#x7B2C;&#x4E00;&#x4E2A;&#x4E3A;0&#x7684;</span></span><br><span class="line"><span class="keyword">if</span>(!dp[i]){</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 蓝桥 </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的遍历（邻接矩阵、邻接表）</title>
      <link href="/2020/06/17/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
      <url>/2020/06/17/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h3 id="&#x90BB;&#x63A5;&#x77E9;&#x9635;"><a href="#&#x90BB;&#x63A5;&#x77E9;&#x9635;" class="headerlink" title="&#x90BB;&#x63A5;&#x77E9;&#x9635;"></a>&#x90BB;&#x63A5;&#x77E9;&#x9635;</h3><p>&#x521D;&#x59CB;&#x5316;&#xFF1A;&#x7ED3;&#x70B9;i&#x5230;i&#x7684;&#x8DDD;&#x79BB;&#x81EA;&#x7136;&#x662F;0&#xFF0C;&#x5176;&#x4ED6;&#x90FD;&#x662F;<code>const int INF=0x3f3f3f3f</code>;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(i == j)</span><br><span class="line">edge[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">edge[i][j] = INF;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x8F93;&#x5165;&#x7684;&#x65F6;&#x5019;&#x4EE5;&#x6B64;&#x5F55;&#x5165;&#x5373;&#x53EF;&#xFF0C;&#x904D;&#x5386;&#x5C31;&#x662F;&#x4E24;&#x5C42;for&#x5FAA;&#x73AF;&#x4E86;&#xFF0C;&#x8FD9;&#x91CC;&#x4E0D;&#x518D;&#x8D58;&#x8FF0;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span>&gt;&gt;s&gt;&gt;e&gt;&gt;value;</span><br><span class="line">edge[s][e]=value;</span><br></pre></td></tr></table></figure><h3 id="&#x90BB;&#x63A5;&#x8868;"><a href="#&#x90BB;&#x63A5;&#x8868;" class="headerlink" title="&#x90BB;&#x63A5;&#x8868;"></a>&#x90BB;&#x63A5;&#x8868;</h3><p>&#x90BB;&#x63A5;&#x8868;&#x7684;&#x51FA;&#x73B0;&#x662F;&#x56E0;&#x4E3A;&#x5F88;&#x591A;&#x7ED3;&#x70B9;&#x4E4B;&#x95F4;&#x6CA1;&#x6709;&#x5173;&#x8054;&#xFF0C;&#x4F7F;&#x7528;INF&#x592A;&#x8822;&#x4E86;&#xFF0C;&#x5B8C;&#x5168;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x94FE;&#x8868;&#x7684;&#x5F62;&#x5F0F;<br><photos></photos></p><h4 id="vector&#x5B9E;&#x73B0;&#x90BB;&#x63A5;&#x8868;"><a href="#vector&#x5B9E;&#x73B0;&#x90BB;&#x63A5;&#x8868;" class="headerlink" title="vector&#x5B9E;&#x73B0;&#x90BB;&#x63A5;&#x8868;"></a>vector&#x5B9E;&#x73B0;&#x90BB;&#x63A5;&#x8868;</h4><p>&#x94FE;&#x8868;&#x4E2D;&#x7684;data&#x3001;next&#x4F7F;&#x7528;&#x7ED3;&#x6784;&#x4F53;&#x5B58;&#x50A8;&#xFF0C;vector&#x5C06;&#x5B83;&#x4EEC;&#x5173;&#x8054;&#x8D77;&#x6765;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> to, cost;</span><br><span class="line">};</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; G[<span class="number">100</span>];</span><br></pre></td></tr></table></figure><p>&#x8F93;&#x5165;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;start, &amp;point, &amp;weight);</span><br><span class="line">G[start].push_back({point, weight});</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x8FD9;&#x6837;&#x8F93;&#x51FA;&#x65F6;&#xFF0C;&#x5185;&#x5C42;&#x904D;&#x5386;&#x7ED3;&#x70B9;i&#x65F6;&#x53EA;&#x9700;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; G[i].size(); ++j)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, G[i][j].to, G[i][j].cost);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x90BB;&#x63A5;&#x8868;"><a href="#&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x90BB;&#x63A5;&#x8868;" class="headerlink" title="&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x90BB;&#x63A5;&#x8868;"></a>&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x90BB;&#x63A5;&#x8868;</h4><p>&#x65E2;&#x7136;&#x6709;&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x94FE;&#x8868;&#xFF08;http:&#xFF09;&#xFF0C;&#x81EA;&#x7136;&#x4E5F;&#x6709;&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x90BB;&#x63A5;&#x8868;&#x4E86;&#xFF1B;<br>&#x867D;&#x7136;&#x5173;&#x8054;&#x7ED3;&#x70B9;&#x65F6;&#x9700;&#x8981;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;first[] Next[]&#x5B9E;&#x73B0;&#xFF0C;&#x4F46;&#x6CA1;&#x6709;&#x63D2;&#x5165;&#x3001;&#x5220;&#x9664;&#x64CD;&#x4F5C;<br>&#x65E2;&#x7136;&#x662F;&#x6570;&#x7EC4;&#x80AF;&#x5B9A;&#x8981;&#x5148;&#x7ED9;&#x4E2A;&#x8303;&#x56F4;&#x4E86;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Max_m&#x8FB9;&#xFF0C;Max_n&#x70B9;</span></span><br><span class="line"><span class="keyword">int</span> start[Max_m+<span class="number">1</span>], point[Max_m+<span class="number">1</span>], weight[Max_m+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> first[Max_n+<span class="number">1</span>], Next[Max_n+<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p><span style="color:#cc33cc"></span><br>&#x603B;&#x7ED3;&#x4E00;&#x4E0B;&#x4E0A;&#x9762;&#x90BB;&#x63A5;&#x77E9;&#x9635;&#x548C;vecotor&#x7684;&#x5B9E;&#x73B0;&#xFF0C;&#x53EA;&#x9700;&#x7ED9;&#x67D0;&#x4E2A;&#x7ED3;&#x70B9;&#xFF0C;&#x5C31;&#x80FD;&#x904D;&#x5386;&#x5230;&#x548C;&#x8FD9;&#x4E2A;&#x70B9;&#x6709;&#x5173;&#x8054;&#x7684;&#x7ED3;&#x70B9;&#xFF0C;&#x5E76;&#x8F93;&#x51FA;&#x6743;&#x503C;&#xFF1B;</p><p><strong>&#x7B97;&#x6CD5;&#x5B9E;&#x73B0;</strong><br>&#x5BF9;&#x4E8E;&#x67D0;&#x4E2A;&#x7ED3;&#x70B9;&#xFF0C;&#x53EA;&#x9700;&#x77E5;&#x9053;&#x5B83;<strong>&#x4F5C;&#x4E3A;&#x8D77;&#x70B9;&#x5728;&#x5F55;&#x5165;&#x65F6;&#x7684;&#x6B21;&#x5E8F;</strong>&#x5373;&#x53EF;&#x5F97;&#x5230;&#x76F8;&#x5E94;&#x7684;&#x503C;&#xFF0C;&#x540E;&#x9762;&#x6211;&#x90FD;&#x5C06;&#x8FD9;<strong>&#x4F5C;&#x4E3A;&#x8D77;&#x70B9;&#x5F55;&#x5165;&#x65F6;&#x7684;&#x6B21;&#x5E8F;</strong>&#x7B80;&#x79F0;&#x4E3A;&#x7D22;&#x5F15;&#xFF08;&#x5982;&#x679C;&#x80FD;&#x5F97;&#x5230;&#x7D22;&#x5F15;&#xFF0C;&#x987A;&#x7740;start[i],point[i],weight[i]&#x5C31;&#x90FD;&#x80FD;&#x5F97;&#x5230;&#x4E86;&#xFF09;&#xFF0C;&#x663E;&#x7136;&#x5982;&#x679C;&#x67D0;&#x7ED3;&#x70B9;&#x4E0E;&#x591A;&#x4E2A;&#x7ED3;&#x70B9;&#x76F8;&#x5173;&#x8054;&#xFF0C;&#x5B83;&#x7684;&#x7D22;&#x5F15;&#x6709;&#x5F88;&#x591A;&#xFF0C;&#x8FD9;&#x6837;&#x95EE;&#x9898;&#x5C31;&#x6307;&#x5411;&#x4E86;&#x5982;&#x4F55;&#x627E;&#x5230;&#x67D0;&#x7ED3;&#x70B9;&#x7684;&#x6240;&#x6709;&#x7D22;&#x5F15;&#x3002;</p><ul><li>first[]&#x6700;&#x7EC8;&#x5B58;&#x653E;&#x5404;&#x7ED3;&#x70B9;&#x7684;&#x6700;&#x540E;&#x7D22;&#x5F15;&#xFF08;&#x901A;&#x8FC7;&#x7ED3;&#x70B9;&#x627E;&#x7D22;&#x5F15;&#xFF09;</li><li>Next[]&#x5B58;&#x653E;&#x5404;&#x7D22;&#x5F15;&#x7684;&#x7ED3;&#x70B9;&#x7684;&#x524D;&#x4E00;&#x4E2A;&#x7D22;&#x5F15;&#xFF08;&#x901A;&#x8FC7;&#x7D22;&#x5F15;&#x627E;&#x7D22;&#x5F15;&#xFF09;<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">first[i]=<span class="number">-1</span>;<span class="comment">//first[]&#x521D;&#x59CB;&#x5316;-1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;start[i]&gt;&gt;point[i]&gt;&gt;weight[i];</span><br><span class="line">Next[i]=first[start[i]];</span><br><span class="line">first[start[i]]=i;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><photos>&#x904D;&#x5386;&#x5230;&#x67D0;&#x4E2A;&#x7ED3;&#x70B9;i&#x65F6;&#xFF0C;&#x8FD9;&#x6837;&#x627E;&#x5B83;&#x7684;&#x6240;&#x6709;&#x7D22;&#x5F15;<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">k=first[i];</span><br><span class="line"><span class="keyword">while</span>(k!=<span class="number">-1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>,start[k], point[k], weight[k]);</span><br><span class="line">k=Next[k];</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x6700;&#x540E;&#xFF0C;&#x5982;&#x679C;&#x7406;&#x89E3;&#x4E86;&#x8FD9;&#x4E00;&#x8FC7;&#x7A0B;&#x5C31;&#x4E0D;&#x96BE;&#x53D1;&#x73B0;&#xFF0C;&#x8F93;&#x51FA;&#x7684;i&#x76F8;&#x5173;&#x8054;&#x7684;&#x7ED3;&#x70B9;&#x7684;&#x987A;&#x5E8F;&#xFF0C;&#x662F;&#x9006;&#x5E8F;&#x7684;&#x3002;&#xFF08;&#x4ECE;&#x6700;&#x540E;&#x7684;&#x7D22;&#x5F15;&#x4E00;&#x4E2A;&#x4E00;&#x4E2A;&#x5F80;&#x524D;&#x627E;&#x7684;&#x8FC7;&#x7A0B;&#xFF09;</p></photos>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>·【蓝桥】·小朋友排队（归并、树状数组）</title>
      <link href="/2020/06/17/%E8%93%9D%E6%A1%A5-%E5%B0%8F%E6%9C%8B%E5%8F%8B%E6%8E%92%E9%98%9F/"/>
      <url>/2020/06/17/%E8%93%9D%E6%A1%A5-%E5%B0%8F%E6%9C%8B%E5%8F%8B%E6%8E%92%E9%98%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="http://lx.lanqiao.cn/problem.page?gpid=T123" target="_blank">&#xB7;&#x3010;&#x84DD;&#x6865;&#x3011;&#xB7;&#x5C0F;&#x670B;&#x53CB;&#x6392;&#x961F;</a></p></blockquote><a id="more"></a><blockquote><p>&#x95EE;&#x9898;&#x63CF;&#x8FF0;<br>&#x3000;&#x3000;n &#x4E2A;&#x5C0F;&#x670B;&#x53CB;&#x7AD9;&#x6210;&#x4E00;&#x6392;&#x3002;&#x73B0;&#x5728;&#x8981;&#x628A;&#x4ED6;&#x4EEC;&#x6309;&#x8EAB;&#x9AD8;&#x4ECE;&#x4F4E;&#x5230;&#x9AD8;&#x7684;&#x987A;&#x5E8F;&#x6392;&#x5217;&#xFF0C;&#x4F46;&#x662F;&#x6BCF;&#x6B21;&#x53EA;&#x80FD;&#x4EA4;&#x6362;&#x4F4D;&#x7F6E;&#x76F8;&#x90BB;&#x7684;&#x4E24;&#x4E2A;&#x5C0F;&#x670B;&#x53CB;&#x3002;<br>&#x3000;&#x3000;&#x6BCF;&#x4E2A;&#x5C0F;&#x670B;&#x53CB;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x4E0D;&#x9AD8;&#x5174;&#x7684;&#x7A0B;&#x5EA6;&#x3002;&#x5F00;&#x59CB;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6240;&#x6709;&#x5C0F;&#x670B;&#x53CB;&#x7684;&#x4E0D;&#x9AD8;&#x5174;&#x7A0B;&#x5EA6;&#x90FD;&#x662F;0&#x3002;<br>&#x3000;&#x3000;&#x5982;&#x679C;&#x67D0;&#x4E2A;&#x5C0F;&#x670B;&#x53CB;&#x7B2C;&#x4E00;&#x6B21;&#x88AB;&#x8981;&#x6C42;&#x4EA4;&#x6362;&#xFF0C;&#x5219;&#x4ED6;&#x7684;&#x4E0D;&#x9AD8;&#x5174;&#x7A0B;&#x5EA6;&#x589E;&#x52A0;1&#xFF0C;&#x5982;&#x679C;&#x7B2C;&#x4E8C;&#x6B21;&#x8981;&#x6C42;&#x4ED6;&#x4EA4;&#x6362;&#xFF0C;&#x5219;&#x4ED6;&#x7684;&#x4E0D;&#x9AD8;&#x5174;&#x7A0B;&#x5EA6;&#x589E;&#x52A0;2&#xFF08;&#x5373;&#x4E0D;&#x9AD8;&#x5174;&#x7A0B;&#x5EA6;&#x4E3A;3&#xFF09;&#xFF0C;&#x4F9D;&#x6B21;&#x7C7B;&#x63A8;&#x3002;&#x5F53;&#x8981;&#x6C42;&#x67D0;&#x4E2A;&#x5C0F;&#x670B;&#x53CB;&#x7B2C;k&#x6B21;&#x4EA4;&#x6362;&#x65F6;&#xFF0C;&#x4ED6;&#x7684;&#x4E0D;&#x9AD8;&#x5174;&#x7A0B;&#x5EA6;&#x589E;&#x52A0;k&#x3002;<br>&#x3000;&#x3000;&#x8BF7;&#x95EE;&#xFF0C;&#x8981;&#x8BA9;&#x6240;&#x6709;&#x5C0F;&#x670B;&#x53CB;&#x6309;&#x4ECE;&#x4F4E;&#x5230;&#x9AD8;&#x6392;&#x961F;&#xFF0C;&#x4ED6;&#x4EEC;&#x7684;&#x4E0D;&#x9AD8;&#x5174;&#x7A0B;&#x5EA6;&#x4E4B;&#x548C;&#x6700;&#x5C0F;&#x662F;&#x591A;&#x5C11;&#x3002;<br>&#x3000;&#x3000;&#x5982;&#x679C;&#x6709;&#x4E24;&#x4E2A;&#x5C0F;&#x670B;&#x53CB;&#x8EAB;&#x9AD8;&#x4E00;&#x6837;&#xFF0C;&#x5219;&#x4ED6;&#x4EEC;&#x8C01;&#x7AD9;&#x5728;&#x8C01;&#x524D;&#x9762;&#x662F;&#x6CA1;&#x6709;&#x5173;&#x7CFB;&#x7684;&#x3002;<br>&#x8F93;&#x5165;&#x683C;&#x5F0F;<br>&#x3000;&#x3000;&#x8F93;&#x5165;&#x7684;&#x7B2C;&#x4E00;&#x884C;&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x6574;&#x6570;n&#xFF0C;&#x8868;&#x793A;&#x5C0F;&#x670B;&#x53CB;&#x7684;&#x4E2A;&#x6570;&#x3002;<br>&#x3000;&#x3000;&#x7B2C;&#x4E8C;&#x884C;&#x5305;&#x542B; n &#x4E2A;&#x6574;&#x6570; H1 H2 &#x2026; Hn&#xFF0C;&#x5206;&#x522B;&#x8868;&#x793A;&#x6BCF;&#x4E2A;&#x5C0F;&#x670B;&#x53CB;&#x7684;&#x8EAB;&#x9AD8;&#x3002;<br>&#x8F93;&#x51FA;&#x683C;&#x5F0F;<br>&#x3000;&#x3000;&#x8F93;&#x51FA;&#x4E00;&#x884C;&#xFF0C;&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x8868;&#x793A;&#x5C0F;&#x670B;&#x53CB;&#x7684;&#x4E0D;&#x9AD8;&#x5174;&#x7A0B;&#x5EA6;&#x548C;&#x7684;&#x6700;&#x5C0F;&#x503C;&#x3002;<br>&#x6837;&#x4F8B;&#x8F93;&#x5165;<br>3<br>3 2 1<br>&#x6837;&#x4F8B;&#x8F93;&#x51FA;<br>9<br>&#x6837;&#x4F8B;&#x8BF4;&#x660E;<br>&#x3000;&#x3000;&#x9996;&#x5148;&#x4EA4;&#x6362;&#x8EAB;&#x9AD8;&#x4E3A;3&#x548C;2&#x7684;&#x5C0F;&#x670B;&#x53CB;&#xFF0C;&#x518D;&#x4EA4;&#x6362;&#x8EAB;&#x9AD8;&#x4E3A;3&#x548C;1&#x7684;&#x5C0F;&#x670B;&#x53CB;&#xFF0C;&#x518D;&#x4EA4;&#x6362;&#x8EAB;&#x9AD8;&#x4E3A;2&#x548C;1&#x7684;&#x5C0F;&#x670B;&#x53CB;&#xFF0C;&#x6BCF;&#x4E2A;&#x5C0F;&#x670B;&#x53CB;&#x7684;&#x4E0D;&#x9AD8;&#x5174;&#x7A0B;&#x5EA6;&#x90FD;&#x662F;3&#xFF0C;&#x603B;&#x548C;&#x4E3A;9&#x3002;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br>&#x53C2;&#x8003;&#x6211;&#x7684;&#x53E6;&#x4E00;&#x7BC7;&#x535A;&#x5BA2;&#xFF1A;<br>&#x7A0D;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x662F;&#xFF0C;&#x8FD9;&#x91CC;&#x6C42;&#x7684;&#x662F;&#x9006;&#x5E8F;&#x5BF9;&#xFF0C;&#x4E00;&#x7EC4;&#x9006;&#x5E8F;&#x8BB0;&#x5F55;&#x4E24;&#x6B21;&#xFF08;&#x65E2;&#x8981;&#x8BB0;&#x5F55;a[i].val&#x540E;&#x9762;&#x6BD4;&#x5B83;&#x5C0F;&#x7684;&#x7EC4;&#x6570;&#xFF0C;&#x8FD8;&#x8981;&#x8BB0;&#x5F55;&#x524D;&#x9762;&#x6BD4;&#x5B83;&#x5927;&#x7684;&#x7EC4;&#x6570;&#xFF09;<br>&#x5982;&#x5BF9;&#x4E8E; 2 4 3 1 &#x5404;&#x7EC4;&#x9006;&#x5E8F;&#x5BF9;&#x7ED3;&#x679C;&#xFF1A;<br>1 2 1 0<br>0 0 1 3<br>&#x7D2F;&#x52A0;&#x540E;&#x4E3A; 1 2 2 3<br>&#x7136;&#x540E;&#x5404;&#x7EC4; &#x524D;n&#x9879;&#x548C;&#x516C;&#x5F0F;&#x7D2F;&#x52A0;&#x5F97;&#x5230;&#x6700;&#x7EC8;&#x7ED3;&#x679C;</p></blockquote><p><strong>&#x89E3;&#x9898;&#x601D;&#x8DEF;</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span>{</span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">}; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span> <span class="title">a</span>[<span class="title">maxn</span>], <span class="title">b</span>[<span class="title">maxn</span>];</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span></span>{</span><br><span class="line"><span class="keyword">int</span> i = l, j = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> k = l;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=r){</span><br><span class="line"><span class="keyword">if</span>(a[i].val &lt;= a[j].val){</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">b[k<span class="number">-1</span>].num += (j-mid<span class="number">-1</span>);</span><br><span class="line"><span class="comment">//a[i].val&#x540E;&#x9762;&#x6BD4;&#x5B83;&#x5C0F;&#x7684;&#x6709;&#x591A;&#x5C11; </span></span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">b[k<span class="number">-1</span>].num += (mid-i+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//a[j].val&#x524D;&#x9762;&#x6BD4;&#x5B83;&#x5927;&#x7684;&#x6709;&#x591A;&#x5C11; </span></span><br><span class="line">}</span><br><span class="line">} </span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid){</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">b[k<span class="number">-1</span>].num += (r-mid);</span><br><span class="line"><span class="comment">//a[i].val&#x540E;&#x9762;&#x6BD4;&#x5B83;&#x5C0F;&#x7684;&#x6709;&#x591A;&#x5C11; </span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(j&lt;=r){</span><br><span class="line">b[k++] = a[j++]; </span><br><span class="line"><span class="comment">//b[k-1].num += (mid-i+1);</span></span><br><span class="line"><span class="comment">//a[j].val&#x524D;&#x9762;&#x6BD4;&#x5B83;&#x5927;&#x7684;&#x6709;&#x591A;&#x5C11; </span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(k = l; k &lt;= r; ++k)</span><br><span class="line">a[k] = b[k];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge_sort</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(l &gt;= r){</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">Merge_sort(l, mid);</span><br><span class="line">Merge_sort(mid+<span class="number">1</span>, r);</span><br><span class="line">merge(l, mid, r);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i){</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i].val;</span><br><span class="line">}</span><br><span class="line">Merge_sort(<span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">ans += (ll)(a[i].num+<span class="number">1</span>)*a[i].num/ <span class="number">2</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 蓝桥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路径专题（Dijkstra、Floyd、Bellman-Ford即优化）</title>
      <link href="/2020/06/11/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
      <url>/2020/06/11/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><table><thead><tr><th align="center"></th><th align="center">Flody</th><th>Dijkstra</th><th align="center">&#x5806;&#x4F18;&#x5316;&#x7684;Dijkstra</th><th align="center">Bellman-Ford</th><th align="center">&#x961F;&#x5217;&#x4F18;&#x5316;&#x7684;Bellman-Ford</th></tr></thead><tbody><tr><td align="center">&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;</td><td align="center">O($N^3$)</td><td>O($N^2$)</td><td align="center">O((M+N)logN)</td><td align="center">O(MN)</td><td align="center">&#x6700;&#x574F;O(MN)</td></tr><tr><td align="center">&#x9002;&#x7528;&#x60C5;&#x51B5;</td><td align="center">&#x7A20;&#x5BC6;&#x56FE;<br>&#x548C;&#x9876;&#x70B9;&#x5173;&#x7CFB;&#x5BC6;&#x5207;</td><td>&#x7A20;&#x5BC6;&#x56FE;<br>&#x548C;&#x5B9A;&#x70B9;&#x5173;&#x7CFB;&#x5BC6;&#x5207;</td><td align="center">&#x7A20;&#x5BC6;&#x56FE;<br>&#x548C;&#x5B9A;&#x70B9;&#x5173;&#x7CFB;&#x5BC6;&#x5207;</td><td align="center">&#x7A00;&#x758F;&#x56FE;<br>&#x548C;&#x8FB9;&#x5173;&#x7CFB;&#x5BC6;&#x5207;</td><td align="center">&#x7A00;&#x758F;&#x56FE;<br>&#x548C;&#x8FB9;&#x5173;&#x7CFB;&#x5BC6;&#x5207;</td></tr><tr><td align="center">&#x8D1F;&#x6743;</td><td align="center">&#x53EF;&#x4EE5;&#x89E3;&#x51B3;&#x8D1F;&#x6743;</td><td>&#x4E0D;&#x80FD;&#x89E3;&#x51B3;&#x8D1F;&#x6743;</td><td align="center">&#x4E0D;&#x80FD;&#x89E3;&#x51B3;&#x8D1F;&#x6743;</td><td align="center">&#x53EF;&#x4EE5;&#x89E3;&#x51B3;&#x8D1F;&#x6743;</td><td align="center">&#x53EF;&#x4EE5;&#x89E3;&#x51B3;&#x8D1F;&#x6743;</td></tr></tbody></table><h3 id="&#x4E94;&#x884C;&#x4EE3;&#x7801;&#x7684;Flody"><a href="#&#x4E94;&#x884C;&#x4EE3;&#x7801;&#x7684;Flody" class="headerlink" title="&#x4E94;&#x884C;&#x4EE3;&#x7801;&#x7684;Flody"></a>&#x4E94;&#x884C;&#x4EE3;&#x7801;&#x7684;Flody</h3><p>&#x770B;&#x5230;$N^3$&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E0D;&#x8981;&#x4E00;&#x8138;&#x77A7;&#x4E0D;&#x8D77;&#xFF0C;&#x4EBA;&#x5BB6;&#x7B97;&#x7684;&#x53EF;&#x662F;&#x4EFB;&#x610F;&#x4E24;&#x70B9;&#x95F4;&#x7684;&#x6700;&#x77ED;&#x8DDD;&#x79BB;&#x3002;<br><strong>&#x7B97;&#x6CD5;&#x5206;&#x6790;</strong><br>edge[i][j]&#x9996;&#x5148;&#x8868;&#x793A;i&#x53F7;&#x9876;&#x70B9;&#x5230;j&#x53F7;&#x9876;&#x70B9;&#x7684;&#x8DEF;&#x7A0B;&#xFF0C;&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x6700;&#x7EC8;&#x5B83;&#x5B58;&#x50A8;&#x7684;&#x662F;i&#x5230;j&#x7684;&#x6700;&#x77ED;&#x8DDD;&#x79BB;<br>&#x5982;&#x679C;&#x53EA;&#x5141;&#x8BB8;&#x7ECF;&#x8FC7;1&#x53F7;&#x70B9;&#xFF0C;&#x6C42;i&#x5230;j&#x7684;&#x6700;&#x77ED;&#x8DDD;&#x79BB;&#xFF0C;&#x90A3;&#x4E48;&#x53EA;&#x9700;i&#xFF0C;j&#x90FD;&#x904D;&#x5386;1~m&#x6B21;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=m; ++i)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=m; ++j)</span><br><span class="line">        <span class="keyword">if</span>(edge[i][j] &gt; edge[i][<span class="number">1</span>]+edge[<span class="number">1</span>][j])</span><br><span class="line">            edge[i][j] = edge[i][<span class="number">1</span>]+edge[<span class="number">1</span>][j];</span><br></pre></td></tr></table></figure><p>&#x5982;&#x679C;&#x53EA;&#x628A;1&#x53F7;&#x6362;&#x6210;2&#x53F7;&#x70B9;&#xFF0C;&#x518D;&#x6267;&#x884C;&#x4E00;&#x904D;&#x4E0A;&#x9762;&#x7684;&#x7A0B;&#x5E8F;&#xFF0C;&#x5F97;&#x5230;&#x7684;&#x5C31;&#x662F;&#x53EA;&#x5141;&#x8BB8;&#x7ECF;&#x8FC7;1&#x53F7;&#x3001;2&#x53F7;&#x4E24;&#x4E2A;&#x9876;&#x70B9;i&#x5230;j&#x7684;&#x6700;&#x77ED;&#x8DDD;&#x79BB;&#xFF1B;<br>&#x90A3;&#x4E48;&#x6267;&#x884C;m&#x6B21;&#xFF0C;&#x5C31;&#x5F97;&#x5230;i&#x5230;j&#x7684;&#x6700;&#x77ED;&#x8DDD;&#x79BB;&#x4E86;&#xFF1F;<br>&#x5047;&#x8BBE;i&#x5230;j&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x7ECF;&#x4E3A;i&#x3001;d&#x3001;k&#x3001;m&#x3001;j&#xFF1B;<br>Flody&#x7528;&#x5230;&#x4E86;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x601D;&#x60F3;&#xFF1A;</p><ul><li>&#x91CD;&#x590D;&#x5B50;&#x95EE;&#x9898;&#xFF1A;&#x6C42;i&#x5230;j&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x9700;&#x8981;&#x77E5;&#x9053;i&#x5230;m&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x3001;&#x6C42;i&#x5230;m&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x9700;&#x8981;i&#x5230;k&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x2026;&#x2026;</li><li>&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#xFF1A;&#x6700;&#x77ED;&#x8DEF;&#xFF08;i,j&#xFF09;=&#x6700;&#x77ED;&#x8DEF;&#xFF08;i&#xFF0C;m&#xFF09;+edge[m,j]<br>&#x4E8E;&#x662F;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7528;&#x4E00;&#x6BB5;&#x8BDD;&#x6982;&#x62EC;Flody&#x7684;&#x7B97;&#x6CD5;&#x601D;&#x60F3;&#x4E86;&#x3002;</li></ul><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x6700;&#x5F00;&#x59CB;&#x53EA;&#x5141;&#x8BB8;&#x7ECF;&#x8FC7;1&#x53F7;&#x9876;&#x70B9;&#x8FDB;&#x884C;&#x4E2D;&#x8F6C;&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x5141;&#x8BB8;&#x7ECF;&#x8FC7;1&#x53F7;&#x548C;2&#x53F7;&#x9876;&#x70B9;&#x8FDB;&#x884C;&#x4E2D;&#x8F6C;&#x2026;&#x2026;<br>&#x5141;&#x8BB8;&#x7ECF;&#x8FC7;1~n&#x53F7;&#x6240;&#x6709;&#x9876;&#x70B9;&#x8FDB;&#x884C;&#x4E2D;&#x8F6C;&#xFF0C;&#x6C42;&#x5F97;&#x4EFB;&#x610F;&#x4E24;&#x70B9;&#x95F4;&#x7684;&#x6700;&#x77ED;&#x8DDD;&#x79BB;&#x3002;<br>Flody&#x6838;&#x5FC3;&#x4EE3;&#x7801;&#xFF1A;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;=m; k++)</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line"><span class="keyword">if</span>(edge[i][j]&gt;edge[i][k]+edge[k][j])</span><br><span class="line">edge[i][j]=edge[i][k]+edge[k][j];</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Floyd</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i,k,j,m,n,s,e,value;</span><br><span class="line"><span class="keyword">int</span> edge[M][M];</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;  <span class="comment">//&#x70B9;&#x6570;m&#xFF0C;&#x8FB9;&#x6570;n</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(i==j)</span><br><span class="line">edge[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">edge[i][j]=INF;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s&gt;&gt;e&gt;&gt;value;</span><br><span class="line">edge[s][e]=value;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;=m; k++)</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(edge[i][j]&gt;edge[i][k]+edge[k][j])</span><br><span class="line">edge[i][j]=edge[i][k]+edge[k][j];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(edge[i][j]&lt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&#x8D1F;&#x5708;\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,edge[i][j]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><p>Dijkstra&#x6C42;&#x89E3;&#x7684;&#x662F;&#x5355;&#x6E90;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x95EE;&#x9898;<br><strong>&#x7B97;&#x6CD5;&#x5206;&#x6790;</strong><br>&#x4F7F;&#x7528;dis[]&#x6570;&#x7EC4;&#x8868;&#x793A;&#x6E90;&#x70B9;&#x5230;&#x5176;&#x4F59;&#x5404;&#x70B9;&#x7684;&#x8DEF;&#x7A0B;&#xFF0C;&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x6700;&#x7EC8;&#x5B58;&#x50A8;&#x6E90;&#x70B9;&#x5230;&#x5404;&#x4E2A;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#xFF1B;<br>Dijkstra&#x540C;&#x6837;&#x5229;&#x7528;&#x4E86;&#x6700;&#x4F18;&#x5B50;&#x7ED3;&#x6784;&#x8FD9;&#x4E00;&#x8981;&#x70B9;&#xFF1A;<br>&#x5373;&#x5047;&#x8BBE;i&#x5230;j&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x7ECF;&#x4E3A;i&#x3001;d&#x3001;k&#x3001;m&#x3001;j&#xFF1B;<br>&#x90A3;&#x4E48;<code>dis[j] = dis[m] + edge[m][j]</code>;<br>&#x4E8E;&#x662F;&#x9996;&#x5148;&#x627E;&#x8DDD;&#x79BB;i&#x6700;&#x8FD1;&#x7684;&#x70B9;&#xFF0C;&#x5047;&#x8BBE;&#x8BB0;&#x4E3A;t&#xFF0C;&#x575A;&#x4FE1;i&#x5230;t&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x5DF2;&#x7ECF;&#x5F97;&#x5230;&#x4E86;&#xFF08;dis[t]&#x4E0D;&#x7528;&#x66F4;&#x65B0;&#x4E86;&#xFF09;&#xFF1B;<br>&#x6807;&#x8BB0;&#x4E00;&#x4E0B;<code>count = t</code>&#xFF0C;&#x4EE5;t&#x4E3A;&#x9876;&#x70B9;&#x5F00;&#x59CB;&#x5BF9;&#x5176;&#x4ED6;&#x70B9;&#x8FDB;&#x884C;&#x677E;&#x5F1B;:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(k = <span class="number">1</span>; k &lt;= m; k++)<span class="comment">//&#x5F00;&#x59CB;&#x677E;&#x5F1B; </span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(edge[count][k] &lt; INF &amp;&amp; dis[k] &gt; dis[count]+edge[count][k])</span><br><span class="line">dis[k] = dis[count] + edge[count][k];</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>dis[] &#x56E0;&#x4E3A;dis[t]&#x66F4;&#x65B0;&#x4E86;&#x4E00;&#x904D;&#xFF0C;&#x63A5;&#x7740;&#x518D;&#x627E;&#x8DDD;&#x79BB;i&#x6700;&#x8FD1;&#x7684;&#x70B9;&#xFF0C;&#x518D;&#x677E;&#x5F1B;&#x2026;&#x2026;<br>&#x95EE;&#xFF1A;&#x4E3A;&#x4F55;&#x5982;&#x6B64;&#x575A;&#x4FE1;&#x4E00;&#x65E6;&#x627E;&#x5230;&#x8DDD;&#x79BB;i&#x6700;&#x8FD1;&#x7684;&#x70B9;t&#xFF0C;dis[t]&#x5C31;&#x662F;i&#x5230;t&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x4E86;&#xFF1F;<br>&#x7B54;&#xFF1A;&#x5047;&#x8BBE;&#x6B64;&#x523B;&#x7684;dis[t]&#x4E0D;&#x662F;&#x6700;&#x77ED;&#x7684;&#xFF0C;&#x8FD8;&#x6709;&#x53E6;&#x4E00;&#x6761;&#x8DEF;&#x53EF;&#x4EE5;&#x5230;t&#x4E14;&#x6700;&#x77ED;&#xFF0C;&#x90A3;&#x4E48;&#x627E;&#x5BFB;&#x8DDD;&#x79BB;i&#x6700;&#x8FD1;&#x7684;&#x70B9;&#x65F6;&#x6839;&#x672C;&#x4E0D;&#x4F1A;&#x662F;t&#xFF01;<br>&#x7531;&#x6B64;&#x53EF;&#x4EE5;&#x770B;&#x5230;Dijksta&#x662F;&#x57FA;&#x4E8E;BFS&#xFF0C;&#x677E;&#x5F1B;&#x7684;&#x64CD;&#x4F5C;&#x6709;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x548C;&#x8D2A;&#x5FC3;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x7528;&#x4E00;&#x6BB5;&#x8BDD;&#x6982;&#x62EC;Dijkstra&#x7684;&#x7B97;&#x6CD5;&#x601D;&#x60F3;&#x3002;</p><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong></p><ol><li>&#x6BCF;&#x6B21;&#x5BFB;&#x627E;&#x672A;&#x8BBF;&#x95EE;&#x7684;&#x3001;&#x79BB;&#x6E90;&#x70B9;&#x6700;&#x8FD1;&#x7684;&#x4E00;&#x4E2A;&#x9876;&#x70B9;&#xFF0C;&#x6807;&#x8BB0;&#x4E3A;&#x5DF2;&#x8BBF;&#x95EE;&#xFF0C;&#x7136;&#x540E;&#x4EE5;&#x8BE5;&#x9876;&#x70B9;&#x4E3A;&#x4E2D;&#x5FC3;&#x5BF9;&#x5176;&#x4ED6;&#x70B9;&#x8FDB;&#x884C;&#x677E;&#x5F1B;</li><li>&#x91CD;&#x590D;&#x6B65;&#x9AA4;1&#xFF0C;&#x76F4;&#x5230;&#x6240;&#x6709;&#x70B9;&#x5747;&#x8BBF;&#x95EE;&#x5B8C;&#xFF0C;&#x6700;&#x7EC8;&#x5F97;&#x5230;&#x6E90;&#x70B9;&#x5230;&#x5176;&#x4F59;&#x6240;&#x6709;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DDD;&#x79BB;</li></ol><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x6838;&#x5FC3;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Difkstra</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="keyword">int</span> edge[M][M], dis[M], visit[M];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> st)</span><span class="comment">//&#x6E90;&#x70B9;st</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">dis[i] = edge[st][i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">visit[i] = <span class="number">0</span>;</span><br><span class="line">visit[st] = <span class="number">1</span>;<span class="comment">//&#x6E90;&#x70B9;&#x5230;&#x81EA;&#x8EAB;&#x7684;&#x6700;&#x77ED;&#x8DDD;&#x79BB;&#x4E3A;0 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> count, min = INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)<span class="comment">//&#x627E;dis[]&#x4E2D;&#x672A;&#x8BBF;&#x95EE;&#x8FC7;&#x7684;&#x3001;&#x79BB;&#x6E90;&#x70B9;&#x6700;&#x8FD1;&#x7684;&#x70B9;</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(visit[j] == <span class="number">0</span> &amp;&amp; dis[j] &lt; min)</span><br><span class="line">{</span><br><span class="line">min = dis[j];</span><br><span class="line">count = j;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">visit[count] = <span class="number">1</span>;<span class="comment">//&#x4ECE;&#x8BE5;&#x9876;&#x70B9;&#x51FA;&#x53D1;&#x66F4;&#x65B0;&#x76F8;&#x90BB;&#x9876;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DDD;&#x79BB; </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; k++)<span class="comment">//&#x5F00;&#x59CB;&#x677E;&#x5F1B; </span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(edge[count][k] &lt; INF &amp;&amp; dis[k] &gt; dis[count]+edge[count][k])</span><br><span class="line">dis[k] = dis[count] + edge[count][k];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; k++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[k]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x5806;&#x4F18;&#x5316;&#x7684;Dijkstra"><a href="#&#x5806;&#x4F18;&#x5316;&#x7684;Dijkstra" class="headerlink" title="&#x5806;&#x4F18;&#x5316;&#x7684;Dijkstra"></a>&#x5806;&#x4F18;&#x5316;&#x7684;Dijkstra</h3><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5806;&#x4F18;&#x5316;&#x7684;Dijkstra&#x5C31;&#x662F;&#x6BCF;&#x6B21;&#x627E;dis[]&#x4E2D;&#x6700;&#x5C0F;&#x503C;&#xFF08;&#x672A;&#x8BBF;&#x95EE;&#x8FC7;&#x7684;&#xFF09;&#x8FDB;&#x884C;&#x7684;&#x4F18;&#x5316;</p><p>&#x540C;&#x65F6;&#x8FD9;&#x91CC;&#x4F7F;&#x7528;&#x4E86;C++&#x7684;vector&#x5B9E;&#x73B0;&#x4E86;&#x90BB;&#x63A5;&#x8868;&#xFF0C;priority_queue&#x5B9E;&#x73B0;&#x4E86;&#x5806;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Difkstra&#x4F18;&#x5316;</span></span><br><span class="line"><span class="comment">//vector+&#x4F18;&#x5148;&#x961F;&#x5217; </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>{</span></span><br><span class="line"><span class="keyword">int</span> point, weight;</span><br><span class="line">}Edge;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Pair;<span class="comment">//first&#x662F;&#x6700;&#x77ED;&#x8DDD;&#x79BB;,second&#x662F;&#x9876;&#x70B9;&#x7F16;&#x53F7; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max_m=<span class="number">1001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[Max_m];</span><br><span class="line"><span class="keyword">int</span> dis[Max_m];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//&#x6307;&#x5B9A;greater&#x53C2;&#x6570;,&#x5806;&#x6309;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x987A;&#x5E8F;&#x53D6;&#x51FA; </span></span><br><span class="line">priority_queue&lt;Pair, <span class="built_in">vector</span>&lt;Pair&gt;, greater&lt;Pair&gt; &gt; que;</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">dis[st]=<span class="number">0</span>;</span><br><span class="line">que.push(Pair(<span class="number">0</span>,st));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">{</span><br><span class="line">Pair p = que.top();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">int</span> v = p.second;<span class="comment">//&#x9876;&#x70B9;&#x7F16;&#x53F7; </span></span><br><span class="line"><span class="keyword">if</span>(dis[v] &lt; p.first)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[v].size(); i++)</span><br><span class="line">{</span><br><span class="line">Edge e = G[v][i];</span><br><span class="line"><span class="keyword">if</span>(dis[e.point] &gt; dis[v] + e.weight)</span><br><span class="line">{</span><br><span class="line">dis[e.point] = dis[v] + e.weight;</span><br><span class="line">que.push(Pair(dis[e.point], e.point));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i,k,j,m,n,count,min,s,e,value;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">{</span><br><span class="line">Edge g;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s&gt;&gt;e&gt;&gt;value;</span><br><span class="line">g.point=e;</span><br><span class="line">g.weight=value;</span><br><span class="line">G[s].push_back(g);</span><br><span class="line">}</span><br><span class="line">Dijkstra(<span class="number">1</span>);<span class="comment">//&#x6B64;&#x523B;&#x6C42;&#x89E3;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x662F;&#x5C06;1&#x53F7;&#x4F5C;&#x4E3A;&#x6E90;&#x70B9;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dis[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="4&#x884C;&#x4EE3;&#x7801;&#x7684;Bellman-Ford"><a href="#4&#x884C;&#x4EE3;&#x7801;&#x7684;Bellman-Ford" class="headerlink" title="4&#x884C;&#x4EE3;&#x7801;&#x7684;Bellman-Ford"></a>4&#x884C;&#x4EE3;&#x7801;&#x7684;Bellman-Ford</h3><p>&#x4EE5;&#x4E0A;&#x7684;&#x7B97;&#x6CD5;&#x4F7F;&#x7528;&#x4E8E;&#x7A20;&#x5BC6;&#x56FE;&#xFF0C;Bellman-Ford&#x9002;&#x7528;&#x4E8E;&#x8FB9;&#x5BC6;&#x5207;&#x7684;&#x56FE;&#x6C42;&#x89E3;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#xFF1B;<br>&#x4E8E;&#x662F;&#x4E0D;&#x518D;&#x4F9D;&#x636E;&#x70B9;&#x6765;&#x5B58;&#x50A8;&#x8FB9;&#xFF0C;&#x800C;&#x662F;&#x4F9D;&#x636E;&#x8FB9;&#x7684;&#x4E2A;&#x6570;N&#x6765;&#x5B58;&#x50A8;&#x3002;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> s,e,value;<span class="comment">//&#x5373;edge[s][e] = value;</span></span><br><span class="line">};</span><br><span class="line">edge E[N];</span><br></pre></td></tr></table></figure><p><strong>&#x7B97;&#x6CD5;&#x5206;&#x6790;</strong><br>&#x548C;Dijkstra&#x4E00;&#x6837;&#x4F7F;&#x7528;dis[]&#x5B58;&#x653E;&#x6700;&#x77ED;&#x8DDD;&#x79BB;&#xFF0C;&#x4E0D;&#x540C;&#x7684;&#x662F;&#xFF0C;Dijkstra&#x662F;&#x9010;&#x4E2A;&#x70B9;&#x7684;&#x786E;&#x5B9A;&#x4E86;&#x6700;&#x77ED;&#x8DEF;<br>Bellman-Ford&#x6CE8;&#x91CD;&#x4E8E;n&#x6761;&#x8FB9;&#x7684;&#x53D8;&#x5316;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">if</span>(dis[E[i].e]&gt;dis[E[i].s]+E[i].value)</span><br><span class="line">dis[E[i].e]=dis[E[i].s]+E[i].value;</span><br></pre></td></tr></table></figure><p>&#x663E;&#x7136;&#x8FD9;&#x5E76;&#x6CA1;&#x6709;&#x4E13;&#x6CE8;&#x4E8E;&#x67D0;&#x4E2A;&#x9876;&#x70B9;&#xFF0C;&#x800C;&#x662F;&#x5BF9;&#x6240;&#x6709;&#x8FB9;&#x8FDB;&#x884C;&#x4E86;&#x4E00;&#x6B21;&#x677E;&#x5F1B;&#xFF0C;&#x7ECF;&#x8FC7;&#x8FD9;&#x4E00;&#x8F6E;&#x7684;&#x677E;&#x5F1B;&#xFF0C;&#x66F4;&#x65B0;&#x7684;dis[]&#x8868;&#x793A;&#xFF1A;<br>&#x53EA;&#x7ECF;&#x8FC7;&#x4E00;&#x6761;&#x8FB9;&#xFF0C;&#x4ECE;&#x6E90;&#x70B9;&#x5230;&#x4EFB;&#x610F;&#x9876;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x957F;&#xFF1B;<br>&#x6309;&#x7167;&#x8FD9;&#x4E2A;&#x601D;&#x8DEF;&#xFF0C;&#x6C42;&#x6E90;&#x70B9;&#x5230;&#x4EFB;&#x610F;&#x9876;&#x70B9;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x53EA;&#x9700;&#x677E;&#x5F1B;m-1&#x6B21;&#x5373;&#x53EF;&#xFF01;&#xFF08;&#x4E24;&#x70B9;&#x95F4;&#x6700;&#x591A;&#x7ECF;&#x8FC7;m-1&#x6761;&#x8FB9;&#xFF09;<br>&#x4E8E;&#x662F;&#x7528;&#x4E00;&#x53E5;&#x8BDD;&#x6982;&#x62EC;Bellman-Ford&#x7684;&#x7B97;&#x6CD5;&#x601D;&#x60F3;&#x3002;<br><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5BF9;&#x6240;&#x6709;&#x8FB9;&#x8FDB;&#x884C;m-1&#x6B21;&#x677E;&#x5F1B;&#x64CD;&#x4F5C;<br>&#x6838;&#x5FC3;&#x4EE3;&#x7801;&#xFF1A;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;=m<span class="number">-1</span>; k++)</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">if</span>(dis[E[i].e]&gt;dis[E[i].s]+E[i].value)</span><br><span class="line">dis[E[i].e]=dis[E[i].s]+E[i].value;</span><br></pre></td></tr></table></figure><p>&#x52A0;&#x4E86;&#x5224;&#x65AD;&#x8D1F;&#x73AF;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5982;&#x679C;&#x7B2C;m&#x6B21;&#x8FD8;&#x5728;&#x66F4;&#x65B0;&#xFF0C;&#x8BF4;&#x660E;&#x6709;&#x8D1F;&#x73AF;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Bellman-Ford</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> s,e,value;</span><br><span class="line">};</span><br><span class="line">edge E[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i,j,k,m,n;</span><br><span class="line"><span class="keyword">int</span> dis[M];</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;E[i].s&gt;&gt;E[i].e&gt;&gt;E[i].value;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">dis[i]=INF;</span><br><span class="line">dis[<span class="number">1</span>]=<span class="number">0</span>;<span class="comment">//&#x8FD9;&#x91CC;&#x5C31;&#x628A;1&#x53F7;&#x4F5C;&#x4E3A;&#x6E90;&#x70B9;</span></span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;=m; k++)</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">if</span>(dis[E[i].e]&gt;dis[E[i].s]+E[i].value)</span><br><span class="line">{</span><br><span class="line">dis[E[i].e]=dis[E[i].s]+E[i].value;</span><br><span class="line"><span class="keyword">if</span>(k==m)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&#x8D1F;&#x5708;\n&quot;</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x961F;&#x5217;&#x4F18;&#x5316;&#x7684;Bellman-Ford"><a href="#&#x961F;&#x5217;&#x4F18;&#x5316;&#x7684;Bellman-Ford" class="headerlink" title="&#x961F;&#x5217;&#x4F18;&#x5316;&#x7684;Bellman-Ford"></a>&#x961F;&#x5217;&#x4F18;&#x5316;&#x7684;Bellman-Ford</h3><p>&#x961F;&#x5217;&#x4F18;&#x5316;&#x7684;Bellman-Ford&#x76F8;&#x6BD4;&#x5806;&#x4F18;&#x5316;&#x7684;Dijkstra&#x5C31;&#x4E0D;&#x90A3;&#x4E48;&#x597D;&#x7406;&#x89E3;&#x4E86;</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 队列 </tag>
            
            <tag> 堆 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>n皇后问题</title>
      <link href="/2020/06/04/n%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
      <url>/2020/06/04/n%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>n&#x7687;&#x540E;&#x662F;&#x4E00;&#x4E2A;&#x7ECF;&#x5178;&#x7684;&#x9012;&#x5F52;&#x56DE;&#x6EAF;&#x95EE;&#x9898;&#xFF0C;&#x4EE5;&#x516B;&#x7687;&#x540E;&#x95EE;&#x9898;&#x4E3A;&#x4F8B;&#x63D0;&#x4F9B;&#x4E09;&#x79CD;&#x89E3;&#x6CD5;&#xFF1A;&#x9012;&#x5F52;&#x3001;&#x975E;&#x9012;&#x5F52;&#x3001;&#x4F4D;&#x8FD0;&#x7B97;&#x3002;<br>&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#x94FE;&#x63A5;1&#xFF1A;<a href="https://www.jianshu.com/p/d16707207de8" target="_blank" rel="noopener">https://www.jianshu.com/p/d16707207de8</a><br>&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#x94FE;&#x63A5;2&#xFF1A;<a href="https://blog.csdn.net/xiexinxinlove/article/details/38797227" target="_blank" rel="noopener">https://blog.csdn.net/xiexinxinlove/article/details/38797227</a></p><a id="more"></a><blockquote><p>&#x95EE;&#x9898;&#x63CF;&#x8FF0;<br>&#x516B;&#x7687;&#x540E;&#x95EE;&#x9898;&#x662F;&#x5728;&#x4E00;&#x4E2A; 8<em>8 &#x7684;&#x68CB;&#x76D8;&#x4E0A;&#x653E;&#x7F6E;&#x7687;&#x540E;&#xFF0C;&#x8981;&#x6C42;&#x5176;&#x653E;&#x7F6E;&#x540E;&#x6EE1;&#x8DB3;*</em>&#x540C;&#x4E00;&#x884C;&#xFF0C;&#x540C;&#x4E00;&#x5217;&#xFF0C;&#x540C;&#x4E00;&#x659C;&#x7EBF;&#x4E0A;**&#x6CA1;&#x6709;&#x91CD;&#x590D;&#x7684;&#x7687;&#x540E;&#x51FA;&#x73B0;&#x3002;<br>&#x8BD5;&#x95EE;&#x6709;&#x591A;&#x5C11;&#x79CD;&#x6446;&#x76D8;&#x65B9;&#x5F0F;&#xFF1F;</p></blockquote><h3 id="&#x9012;&#x5F52;&#x56DE;&#x6EAF;"><a href="#&#x9012;&#x5F52;&#x56DE;&#x6EAF;" class="headerlink" title="&#x9012;&#x5F52;&#x56DE;&#x6EAF;"></a>&#x9012;&#x5F52;&#x56DE;&#x6EAF;</h3><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x9012;&#x5F52;&#x7684;&#x601D;&#x8DEF;&#x5F88;&#x6E05;&#x6670;&#xFF1A;</p><ol><li>&#x5C31;&#x662F;&#x5BF9;&#x6BCF;&#x4E00;&#x884C;&#x7684;8&#x5217;&#x9010;&#x4E2A;&#x8FDB;&#x884C;&#x5224;&#x65AD;&#xFF0C;&#x5982;&#x679C;&#x53EF;&#x4EE5;&#x653E;&#x7F6E;&#x5C31;&#x8FDB;&#x884C;&#x4E0B;&#x4E00;&#x884C;&#x7684;&#x5C1D;&#x8BD5;&#xFF1B;</li><li>&#x5982;&#x679C;&#x4E00;&#x884C;&#x90FD;&#x4E0D;&#x80FD;&#x653E;&#x7F6E;&#xFF0C;&#x5219;&#x9000;&#x56DE;&#x4E0A;&#x4E00;&#x884C;&#xFF08;&#x56DE;&#x6EAF;&#xFF09;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x4F1A;&#x56DE;&#x5230;&#x4E0A;&#x4E00;&#x884C;&#x7EE7;&#x7EED;&#x68C0;&#x7D22;&#x5269;&#x4F59;&#x5217;</li></ol><p>**<em>&#x6CE8;&#xFF1A;&#x5F88;&#x5BB9;&#x6613;&#x60F3;&#x5230;&#x9700;&#x8981;&#x4E00;&#x4E2A;8</em>8&#x7684;&#x77E9;&#x9635;&#x6765;&#x5B58;&#x653E;&#x7687;&#x540E;&#xFF0C;&#x8FD9;&#x91CC;&#x53EF;&#x4EE5;&#x4F18;&#x5316;&#x4E00;&#x4E0B;</p><ul><li>&#x56E0;&#x4E3A;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E00;&#x4E2A;&#x53EF;&#x884C;&#x89E3;&#xFF0C;&#x540C;&#x4E00;&#x884C;&#x4EC5;&#x4E00;&#x4E2A;&#x7687;&#x540E;&#x5B58;&#x653E;</li><li>&#x6240;&#x4EE5;&#x7528;n&#x5143;&#x7EC4;x[1:n]&#x8868;&#x793A;n&#x540E;&#x95EE;&#x9898;&#x7684;&#x89E3;&#xFF0C;x[i]&#x8868;&#x793A;&#x7687;&#x540E;i&#x653E;&#x5728;&#x7B2C;i&#x884C;&#x7684;&#x7B2C;x[i]&#x5217;</li><li>&#x7531;&#x4E8E;&#x4EFB;&#x610F;&#x4E24;&#x4E2A;&#x7687;&#x540E;&#x4E0D;&#x5728;&#x540C;&#x4E00;&#x5217;&#xFF0C;&#x6240;&#x4EE5;&#x89E3;&#x5411;&#x91CF;x[i]&#x4E92;&#x4E0D;&#x76F8;&#x540C;</li></ul><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br>Dfs()&#x9012;&#x5F52;&#xFF0C;Judge()&#x5224;&#x65AD;&#x53EF;&#x884C;&#x89E3;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> step)</span></span>{ <span class="comment">//n=8,&#x8FD9;&#x91CC;&#x5F00;&#x59CB;step=1&#xFF0C;&#x9012;&#x5F52;&#x5230;step=9&#x7ED3;&#x675F;</span></span><br><span class="line"><span class="keyword">if</span>(step&gt;n){</span><br><span class="line">sum++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i){</span><br><span class="line">a[step] = i;</span><br><span class="line"><span class="keyword">if</span>(Judge(step))</span><br><span class="line">Dfs(step+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x5173;&#x952E;&#x662F;Judge()&#x5224;&#x65AD;&#x53EF;&#x884C;&#x89E3;&#x4E86;&#xFF0C;&#x82E5;&#x4E24;&#x4E2A;&#x7687;&#x540E;&#x7684;&#x4F4D;&#x7F6E;&#x5206;&#x522B;&#x662F;(i,j)&#x548C;(k,l)</p><ul><li>&#x540C;&#x884C;&#x4E0D;&#x91CD;&#x590D;&#xFF1A;x[i]&#x8868;&#x793A;&#x7684;&#x5C31;&#x662F;&#x4E0D;&#x540C;&#x884C;&#x7684;</li><li>&#x540C;&#x5217;&#x4E0D;&#x91CD;&#x590D;&#xFF1A;x[i]&amp;&amp;x[k]</li><li>&#x540C;&#x5BF9;&#x89D2;&#x7EBF;&#x4E0D;&#x91CD;&#x590D;&#xFF1A;<ul><li>&#x82E5;2&#x4E2A;&#x7687;&#x540E;&#x5904;&#x4E8E;&#x540C;&#x4E00;&#x659C;&#x7EBF;,&#x5219; k-i = l-j (&#x659C;&#x7387;&#x4E3A;1&#x7684;&#x659C;&#x7EBF;)&#x6216; k-i = j-l(&#x659C;&#x7387;&#x4E3A;-1&#x7684;&#x659C;&#x7EBF;)</li><li>&#x5373; abs(i-k)$$abs(x[i]-x[k])<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Judge</span><span class="params">(<span class="keyword">int</span> k)</span></span>{  <span class="comment">//&#x5224;&#x65AD;&#x7B2C;k&#x884C;&#x7684;x[k]&#x662F;&#x5426;&#x53EF;&#x884C;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; ++i){ <span class="comment">//&#x904D;&#x5386;1~k&#x884C;&#x7684;&#x7687;&#x540E;</span></span><br><span class="line"><span class="keyword">if</span>((<span class="built_in">abs</span>(k-i)==<span class="built_in">abs</span>(a[k]-a[i]) || a[k]==a[i]))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="&#x8FED;&#x4EE3;&#x56DE;&#x6EAF;"><a href="#&#x8FED;&#x4EE3;&#x56DE;&#x6EAF;" class="headerlink" title="&#x8FED;&#x4EE3;&#x56DE;&#x6EAF;"></a>&#x8FED;&#x4EE3;&#x56DE;&#x6EAF;</h3><p>&#x8FED;&#x4EE3;&#x56DE;&#x6EAF;&#x5C31;&#x662F;&#x9012;&#x5F52;&#x8F6C;&#x975E;&#x9012;&#x5F52;&#xFF0C;Judge()&#x4E0D;&#x7528;&#x6539;&#xFF0C;Dfs()&#x6539;&#x6210;solve()&#xFF1B;<br>&#x5173;&#x4E8E;&#x8F6C;&#x6362;&#xFF0C;&#x5C5E;&#x4E8E;<strong>&#x4E0D;&#x770B;&#x7B54;&#x6848;&#x53EF;&#x80FD;&#x8FD9;&#x8F88;&#x5B50;&#x90FD;&#x60F3;&#x4E0D;&#x5230;</strong>&#x7CFB;&#x5217;&#xFF1B;<br>&#x53EA;&#x80FD;&#x8BF4;&#x591A;&#x78E8;&#x7EC3;&#x591A;&#x601D;&#x8003;&#x5427;&#x3002;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k &gt; <span class="number">0</span>){</span><br><span class="line">a[k] += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>((a[k] &lt;= n) &amp;&amp; (!Judge(k))){  <span class="comment">//&#x9000;&#x51FA;&#x7684;&#x6807;&#x5FD7;&#xFF1A;&#x627E;&#x5230;&#x8BE5;&#x884C;&#x53EF;&#x4EE5;&#x653E;&#x7F6E;&#x7684;&#x7687;&#x540E;</span></span><br><span class="line">a[k] += <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(a[k] &lt;= n){</span><br><span class="line"><span class="keyword">if</span>(k == n)  </span><br><span class="line">++sum;</span><br><span class="line"><span class="keyword">else</span>    <span class="comment">//&#x8FD8;&#x6CA1;&#x5230;&#x7B2C;n&#x884C;&#xFF0C;++k&#xFF0C;a[k]&#x4ECE;0&#x5F00;&#x59CB;</span></span><br><span class="line">a[++k] = <span class="number">0</span>;</span><br><span class="line">}<span class="keyword">else</span>{  <span class="comment">//else&#x662F;a[k]=n+1,&#x8FD9;&#x4E00;&#x884C;&#x90FD;&#x4E0D;&#x80FD;&#x653E;&#x7687;&#x540E;&#xFF0C;&#x4E8E;&#x662F;--k&#x56DE;&#x6EAF;</span></span><br><span class="line">--k;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x4F18;&#x96C5;&#x7684;&#x4F4D;&#x8FD0;&#x7B97;"><a href="#&#x4F18;&#x96C5;&#x7684;&#x4F4D;&#x8FD0;&#x7B97;" class="headerlink" title="&#x4F18;&#x96C5;&#x7684;&#x4F4D;&#x8FD0;&#x7B97;"></a>&#x4F18;&#x96C5;&#x7684;&#x4F4D;&#x8FD0;&#x7B97;</h3><p>&#x4F4D;&#x8FD0;&#x7B97;&#x786E;&#x5B9E;&#x4F18;&#x96C5;<br>&#x5173;&#x4E8E;&#x4F4D;&#x8FD0;&#x7B97;&#x7684;&#x89E3;&#x6CD5;&#xFF0C;<a href="https://www.jianshu.com/p/d16707207de8" target="_blank">&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#x94FE;&#x63A5;1</a>&#x91CC;&#x4ECB;&#x7ECD;&#x7684;&#x5F88;&#x8BE6;&#x7EC6;&#xFF0C;&#x53EA;&#x7A0D;&#x4F5C;&#x603B;&#x7ED3;<br><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5BF9;&#x4E8E;&#x5BFB;&#x627E;&#x7B2C;k&#x884C;&#x53EF;&#x653E;&#x7F6E;&#x7684;&#x7687;&#x540E;&#xFF0C;&#x7528;8&#x4F4D;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x8BB0;&#x5F55;1~k-1&#x884C;&#x4EA7;&#x751F;&#x7684;&#x51B2;&#x7A81;&#xFF1B;</p><ul><li>1&#x8868;&#x793A;&#x6709;&#x51B2;&#x7A81;&#xFF0C;&#x90A3;&#x4E48;&#x7B2C;k&#x884C;&#x4E0D;&#x80FD;&#x653E;&#x7F6E;</li><li>0&#x8868;&#x793A;&#x65E0;&#x51B2;&#x7A81;&#xFF0C;&#x7B2C;k&#x884C;&#x53EF;&#x4EE5;&#x5C1D;&#x8BD5;&#x653E;&#x7F6E;</li></ul><p>&#x5982;&#x679C;8&#x4F4D;&#x4E8C;&#x8FDB;&#x5236;&#x5168;&#x4E3A;1&#xFF0C;&#x663E;&#x7136;&#x8FD9;&#x4E00;&#x884C;&#x4E0D;&#x80FD;&#x653E;&#x4E86;&#xFF0C;&#x4E8E;&#x662F;&#x56DE;&#x6EAF;&#xFF1B;<br>&#x53C2;&#x8003;<a href="https://www.jianshu.com/p/d16707207de8" target="_blank">&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#x94FE;&#x63A5;1</a>&#x4E2D;&#x7684;&#x4F8B;&#x5B50;&#xFF0C;a&#x3001;b&#x3001;c&#x5206;&#x522B;&#x8BB0;&#x5F55;&#x540C;&#x5217;&#x51B2;&#x7A81;&#x3001;&#x53F3;&#x659C;&#x7EBF;&#x51B2;&#x7A81;&#x3001;&#x5DE6;&#x659C;&#x7EBF;&#x51B2;&#x7A81;&#xFF1B;<br><code>d = a|b|c</code>&#x5F97;&#x5230;1<del>k-1&#x884C;&#x4EA7;&#x751F;&#x7684;&#x51B2;&#x7A81;&#xFF08;&#x5982;&#x679C;&#x5BF9;d&#x53D6;&#x53CD;&#x5C31;&#x662F;&#x7B2C;k&#x53EF;&#x653E;&#x7F6E;&#x7684;&#x7687;&#x540E;&#xFF09;&#xFF1B;<br>`bit = (d+1) &amp; (</del>d)<code>&#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x53EF;&#x653E;&#x7F6E;&#x7684;&#x7687;&#x540E;&#x7684;&#x4F4D;&#x7F6E;&#xFF1B;&#x9012;&#x5F52;&#x5BFB;&#x627E;&#x4E0B;&#x4E00;&#x884C;&#x9700;&#x8981;&#x66F4;&#x65B0;a,b,c</code>a=a|bit, b=(b|bit)&gt;&gt;1, c=(c|bit)&lt;&lt;1<code>&#xFF1B;&#x5BFB;&#x627E;&#x540C;&#x4E00;&#x884C;&#x7684;&#x5176;&#x5B83;&#x7687;&#x540E;&#x9700;&#x8981;&#x53EA;&#x66F4;&#x65B0;d</code>d |= bit<code>&#xFF1B;***&#x6CE8;&#xFF1A;&#x4EE3;&#x7801;&#x4E2D;&#x7684;</code>b=limit&amp;((b|bit)&gt;&gt;1), c=limit&amp;((c|bit)&lt;&lt;1)<code></code>limit=(1&lt;&lt;n)-1`<span style="color:#33cc33">&#x4E3A;&#x4EC0;&#x4E48;&#x8981;n&#x4E2A;1&#x548C;b&#x3001;c&#x8FDB;&#x884C;&#x4E0E;&#x8FD0;&#x7B97;&#x5462;&#xFF1F;</span><br>&#x8FD9;&#x5C5E;&#x4E8E;&#x552F;&#x4E00;&#x5C1A;&#x672A;&#x660E;&#x767D;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x5148;&#x653E;&#x5728;&#x8FD9;&#x5427;~<br>&#x53E6;&#x5916;&#x5F88;&#x591A;&#x535A;&#x5BA2;&#x91CC;&#x7684;&#x4F4D;&#x8FD0;&#x7B97;&#x89E3;&#x6CD5;&#x4E0E;&#x4E0A;&#x9762;&#x7684;&#x7A0D;&#x6709;&#x4E0D;&#x540C;&#xFF0C;&#x4F46;&#x601D;&#x8DEF;&#x4E00;&#x6837;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003;<a href="https://blog.csdn.net/xiexinxinlove/article/details/38797227" target="_blank">&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#x94FE;&#x63A5;2</a><br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line"><span class="keyword">int</span> n, limit;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c,<span class="keyword">int</span> step)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(step == n){</span><br><span class="line">++sum;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> d = a | b | c;</span><br><span class="line"><span class="keyword">while</span>(d &lt; limit){   <span class="comment">//&#x5BFB;&#x627E;&#x540C;&#x4E00;&#x884C;&#x7684;&#x53EF;&#x653E;&#x7F6E;&#x7684;&#x7687;&#x540E;</span></span><br><span class="line"><span class="keyword">int</span> bit = (d +<span class="number">1</span>) &amp; (~d);</span><br><span class="line">solve(a|bit, limit&amp;((b|bit)&gt;&gt;<span class="number">1</span>), limit&amp;(c|bit)&lt;&lt;<span class="number">1</span>, step+<span class="number">1</span>);</span><br><span class="line">d |= bit;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">limit = (<span class="number">1</span> &lt;&lt; n) <span class="number">-1</span>;</span><br><span class="line">solve(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x6D1B;&#x8C37;&#xB7;P1219-USACO1-5-&#x516B;&#x7687;&#x540E;"><a href="#&#x6D1B;&#x8C37;&#xB7;P1219-USACO1-5-&#x516B;&#x7687;&#x540E;" class="headerlink" title="&#x6D1B;&#x8C37;&#xB7;P1219 [USACO1.5]&#x516B;&#x7687;&#x540E;"></a>&#x6D1B;&#x8C37;&#xB7;P1219 [USACO1.5]&#x516B;&#x7687;&#x540E;</h3><blockquote><p>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="https://www.luogu.com.cn/problem/P1219" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P1219</a></p></blockquote><p>&#x6D1B;&#x8C37;&#x7684;&#x8FD9;&#x9053;&#x5C31;&#x662F;n&#x7687;&#x540E;&#x95EE;&#x9898;&#xFF0C;n&#x7684;&#x8303;&#x56F4;[6,13]&#xFF1B;<br>&#x4EB2;&#x6D4B;&#x4F7F;&#x7528;&#x9012;&#x5F52;&#x56DE;&#x6EAF;&#x3001;&#x975E;&#x9012;&#x5F52;&#x56DE;&#x6EAF;&#x65F6;&#xFF0C;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;n=13&#x4F1A;&#x8D85;&#x65F6;&#xFF08;<del>&#x51ED;&#x5565;&#x522B;&#x4EBA;&#x5199;&#x7684;&#x9012;&#x5F52;&#x5C31;&#x80FD;&#x8FC7;</del>&#xFF09;&#xFF1B;<br>&#x4F46;&#x4F4D;&#x8FD0;&#x7B97;&#x80AF;&#x5B9A;&#x80FD;AC&#x5566;&#x3002;</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客-减成一</title>
      <link href="/2020/05/31/%E7%89%9B%E5%AE%A2-%E5%87%8F%E6%88%90%E4%B8%80/"/>
      <url>/2020/05/31/%E7%89%9B%E5%AE%A2-%E5%87%8F%E6%88%90%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>&#x770B;&#x5230;&#x8FD9;&#x9053;&#x9898;&#x7684;AC&#x4EE3;&#x7801;&#x771F;&#x7684;&#x518D;&#x4E00;&#x6B21;&#x611F;&#x53F9;&#xFF1A;&#x7B97;&#x6CD5;&#x7684;&#x7CBE;&#x5999;&#x554A;~<br>&#x9898;&#x76EE;&#x94FE;&#x63A5;&#xFF1A;<a href="https://ac.nowcoder.com/acm/contest/5758/B" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/5758/B</a></p><a id="more"></a><blockquote><p>&#x9898;&#x76EE;&#x63CF;&#x8FF0;<br>&#x5B58;&#x5728;n&#x4E2A;&#x6570;&#xFF0C;&#x6BCF;&#x6B21;&#x64CD;&#x4F5C;&#x53EF;&#x4EE5;&#x4EFB;&#x9009;&#x4E00;&#x4E2A;&#x533A;&#x95F4;&#x4F7F;&#x5F97;&#x533A;&#x95F4;&#x5185;&#x7684;&#x6240;&#x6709;&#x6570;&#x5B57;&#x51CF;&#x4E00;&#x3002;&#x95EE;&#x6700;&#x5C11;&#x591A;&#x5C11;&#x6B21;&#x64CD;&#x4F5C;&#xFF0C;&#x53EF;&#x4EE5;&#x8BA9;&#x6240;&#x6709;&#x6570;&#x90FD;&#x53D8;&#x6210;1&#x3002;<br>&#x6570;&#x636E;&#x4FDD;&#x8BC1;&#x4E00;&#x5B9A;&#x6709;&#x89E3;&#x3002;<br>&#x8F93;&#x5165;&#x63CF;&#x8FF0;:<br>&#x8F93;&#x5165;t&#xFF0C;&#x4EE3;&#x8868;&#x6709;t&#x7EC4;&#x6570;&#x636E;&#x3002;&#x6BCF;&#x7EC4;&#x6570;&#x636E;&#x8F93;&#x5165;n&#xFF0C;&#x4EE3;&#x8868;&#x6709;n&#x4E2A;&#x6570;&#x3002;&#x63A5;&#x4E0B;&#x6765;&#x4E00;&#x884C;&#x8F93;&#x5165;n&#x4E2A;&#x6570;&#xFF0C;&#x6570;&#x5B57;&#x5927;&#x5C0F;&#x5C0F;&#x4E8E;1e6&#x3002;(t&lt;=1000&#xFF0C;n&lt;1e5&#xFF0C;&#x2211;n &lt; 1e6)<br>&#x8F93;&#x51FA;&#x63CF;&#x8FF0;:<br>&#x6BCF;&#x7EC4;&#x6570;&#x636E;&#x8F93;&#x51FA;&#x4E00;&#x4E2A;&#x6574;&#x6570;&#x4EE3;&#x8868;&#x6700;&#x5C11;&#x9700;&#x8981;&#x64CD;&#x4F5C;&#x7684;&#x6B21;&#x6570;&#x3002;<br>&#x8F93;&#x5165;&#xFF1A;<br>1<br>6<br>1 3 5 2 7 1<br>&#x8F93;&#x51FA;&#xFF1A;<br>9</p></blockquote><p>&#x9898;&#x610F;&#x5F88;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x5BF9;&#x533A;&#x95F4;&#x91CC;&#x7684;&#x6570;&#x540C;&#x65F6;&#x51CF;1&#xFF0C;&#x76F4;&#x81F3;&#x6240;&#x6709;&#x6570;&#x53D8;&#x6210;1<br>9&#x6B21;&#x64CD;&#x4F5C;&#x5206;&#x522B;&#x4E3A;&#xFF1A;</p><ul><li>1 <span style="color:#00cc33">2 4 1</span> 7 1</li><li>1 <span style="color:#00cc33">1 3</span> 1 7 1</li><li>1 1 <span style="color:#00cc33">2</span> 1 7 1</li><li>1 1 1 1 <span style="color:#00cc33">6</span> 1</li><li>1 1 1 1 <span style="color:#00cc33">5</span> 1</li><li>1 1 1 1 <span style="color:#00cc33">4</span> 1</li><li>1 1 1 1 <span style="color:#00cc33">3</span> 1</li><li>1 1 1 1 <span style="color:#00cc33">2</span> 1</li><li>1 1 1 1 <span style="color:#00cc33">1</span> 1</li></ul><p>&#x5BF9;&#x4E8E;&#x4E00;&#x6BB5;&#x90FD;&#x5927;&#x4E8E;1&#x7684;&#x533A;&#x95F4;&#xFF0C;&#x5F88;&#x5BB9;&#x6613;&#x60F3;&#x5230;&#xFF0C;&#x6B21;&#x6570;&#x5C31;&#x53D6;&#x51B3;&#x4E8E;&#x6700;&#x5927;&#x7684;&#x90A3;&#x4E2A;&#x6570; &#x5982;<code>352</code>,&#x4F46;&#x8981;&#x89E3;&#x51FA;&#x6B64;&#x9898;&#x8FD8;&#x9700;&#x8981;&#x66F4;&#x5F00;&#x9614;&#x7684;&#x601D;&#x7EF4;<br><strong>&#x7B97;&#x6CD5;&#x601D;&#x8DEF;</strong><br>&#x5BF9;&#x4E8E;&#x533A;&#x95F4;a[1:n]&#x521D;&#x59CB;&#x5316;a[0]=1&#xFF1B;<br>&#x51CF;1&#x7684;&#x64CD;&#x4F5C;&#x53EF;&#x4EE5;&#x7528;<code>a[i+1]-a[i]</code>&#x6765;&#x66FF;&#x4EE3;&#xFF0C;&#x5F53;&#x7136;&#x524D;&#x63D0;&#x662F;<code>a[i]&lt;a[i+1]</code>;<br>&#x7136;&#x540E;&#x7D2F;&#x52A0;&#x5C31;&#x5F97;&#x5230;&#x7ED3;&#x679C;&#x4E86;&#x2026;&#x2026;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n--){</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i){</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        }</span><br><span class="line">        a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i){</span><br><span class="line">            <span class="keyword">if</span>(a[i] &lt; a[i+<span class="number">1</span>])</span><br><span class="line">                ans += (a[i+<span class="number">1</span>]-a[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组实现链表</title>
      <link href="/2020/05/16/%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/05/16/%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>&#x666E;&#x901A;&#x5355;&#x94FE;&#x8868;&#x7684;&#x521B;&#x5EFA;&#x6709;&#x4E9B;&#x590D;&#x6742;&#xFF0C;&#x4E8E;&#x662F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x7B80;&#x5355;&#x94FE;&#x8868;&#x7684;&#x4E00;&#x4E9B;&#x529F;&#x80FD;&#x3002;</p><a id="more"></a><p>&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#x94FE;&#x63A5;&#xFF1A;<a href="https://blog.csdn.net/Nanrdml/article/details/104136221" target="_blank" rel="noopener">https://blog.csdn.net/Nanrdml/article/details/104136221</a></p><h3 id="&#x6570;&#x7EC4;&#x6784;&#x5EFA;&#x94FE;&#x8868;"><a href="#&#x6570;&#x7EC4;&#x6784;&#x5EFA;&#x94FE;&#x8868;" class="headerlink" title="&#x6570;&#x7EC4;&#x6784;&#x5EFA;&#x94FE;&#x8868;"></a>&#x6570;&#x7EC4;&#x6784;&#x5EFA;&#x94FE;&#x8868;</h3><p>&#x5355;&#x94FE;&#x8868;&#x7684;&#x7279;&#x70B9;&#x5373;&#x8868;&#x4E2D;&#x5B58;&#x653E;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x7684;&#x540C;&#x65F6;&#xFF0C;&#x4E5F;&#x901A;&#x8FC7;&#x6307;&#x9488;&#x6307;&#x5411;&#x4E0B;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x57DF;&#xFF0C;&#x4E8E;&#x662F;&#x9700;&#x8981;</p><ul><li>&#x5EFA;&#x7ACB;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;data[] &#x5B58;&#x653E;&#x6570;&#x636E;&#xFF0C;r[] &#x5B58;&#x653E;&#x4E0B;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x7684;&#x4E0B;&#x6807;&#xFF0C;&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;0&#x53F7;&#x4E0B;&#x6807;&#x7684;&#x4F4D;&#x7F6E;&#x5C31;&#x4E0D;&#x5B58;&#x653E;&#x5143;&#x7D20;&#x4E86;&#xFF1B;</li><li>n&#x6807;&#x8BB0;&#x4E00;&#x4E0B;&#x94FE;&#x8868;&#x5B9E;&#x9645;&#x6700;&#x5927;&#x957F;&#x5EA6;&#xFF1B;</li><li>front&#x6807;&#x8BB0;&#x8868;&#x5934;&#x7ED3;&#x70B9;&#xFF0C;&#x5F00;&#x59CB;front = 1&#xFF1B;</li></ul><p>***&#x6CE8;&#x610F;&#x94FE;&#x8868;&#x4E2D;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;&#x7684;next&#x6307;&#x9488;&#x4E3A;&#x7A7A;&#xFF0C;&#x6240;&#x4EE5;&#x5C06;r[]&#x4E2D;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x7684;&#x4E0B;&#x6807;&#x8BB0;&#x4E3A;-1<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;New_List&#x7C7B;&#x7684;&#x4E00;&#x90E8;&#x5206;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> front;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span>[] data = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span>[] r = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">New_List</span><span class="params">(<span class="keyword">int</span> n)</span></span>{</span><br><span class="line"><span class="keyword">this</span>.n = n;</span><br><span class="line">front = <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5F00;&#x59CB;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x94FE;&#x8868;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">New_List L1 = <span class="keyword">new</span> New_List(n);</span><br><span class="line">init(L1, n);<span class="comment">//&#x4E0A;&#x9762;&#x4E09;&#x53E5;&#x5199;&#x5728;Main()&#x65B9;&#x6CD5;&#x4E2D;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(New_List L, <span class="keyword">int</span> n)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i){</span><br><span class="line">L.data[i] = sc.nextInt();</span><br><span class="line"><span class="keyword">if</span>(i != n)</span><br><span class="line">L.r[i] = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">L.r[i] = -<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x8F93;&#x51FA;&#x8FD9;&#x4E2A;&#x94FE;&#x8868;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> cnt = front;</span><br><span class="line"><span class="keyword">while</span>(cnt != -<span class="number">1</span>){</span><br><span class="line">System.out.print(data[cnt] +<span class="string">&quot; &quot;</span>);</span><br><span class="line">cnt = r[cnt];<span class="comment">//&#x627E;&#x4E0B;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;</span></span><br><span class="line">}</span><br><span class="line">System.out.println();</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x94FE;&#x8868;&#x7684;&#x63D2;&#x5165;"><a href="#&#x94FE;&#x8868;&#x7684;&#x63D2;&#x5165;" class="headerlink" title="&#x94FE;&#x8868;&#x7684;&#x63D2;&#x5165;"></a>&#x94FE;&#x8868;&#x7684;&#x63D2;&#x5165;</h3><p>&#x56DE;&#x987E;&#x5355;&#x94FE;&#x8868;&#x7684;&#x63D2;&#x5165;&#x64CD;&#x4F5C;<code>q-&gt;next = pre-&gt;next; pre-&gt;next = q;</code><br>&#x4E8E;&#x662F;&#x6709;&#x4E86;&#x5728;&#x7B2C;count&#x4E2A;&#x5143;&#x7D20;&#x524D;&#x6DFB;&#x52A0;&#x503C;temp<br><strong>&#x7B97;&#x6CD5;&#x5B9E;&#x73B0;</strong></p><ul><li>&#x6309;&#x7167;&#x8F93;&#x51FA;&#x94FE;&#x8868;&#x7684;&#x601D;&#x8DEF;&#xFF0C;&#x5F00;&#x59CB;&#x4EE4;<code>pre=front</code>&#xFF0C;&#x7136;&#x540E;<code>pre=r[pre]</code>&#xFF1B;</li><li>&#x6211;&#x4EEC;&#x8981;&#x627E;&#x7B2C;count&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5FAA;&#x73AF;count-1&#x6B21;&#x5373;&#x53EF;&#xFF1B;</li><li>count-1&#x6B21;&#x5373;&#x53EF;&#xFF1F;&#x8FD9;&#x6837;&#x6307;&#x5411;&#x7684;&#x8981;&#x6DFB;&#x52A0;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x6211;&#x4EEC;&#x5E94;&#x8BE5;&#x627E;&#x5230;count&#x524D;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#xFF1B;</li><li>&#x6CA1;&#x9519;&#x5C31;&#x662F;count-2&#x6B21;&#xFF1B;</li><li>&#x53E6;&#x5916;&#x9700;&#x8981;&#x7A7A;&#x51FA;&#x6765;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#x5B58;&#x653E;&#x65B0;&#x7684;&#x7ED3;&#x70B9;&#x3002;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B9E;&#x73B0;&#x8D77;&#x6765;&#x6BD4;&#x94FE;&#x8868;&#x8FD8;&#x590D;&#x6742;&#x4E9B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> count, <span class="keyword">int</span> temp)</span></span>{</span><br><span class="line">++n;<span class="comment">//&#x65B0;&#x52A0;&#x4E86;&#x7ED3;&#x70B9;&#xFF0C;&#x94FE;&#x8868;&#x6700;&#x5927;&#x957F;&#x5EA6;+1</span></span><br><span class="line"><span class="keyword">if</span>(count &gt; n)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(cnt &lt;= n){<span class="comment">//&#x5BFB;&#x627E;&#x4E00;&#x4E2A;&#x7A7A;&#x7740;&#x7684;&#x4F4D;&#x7F6E;cnt</span></span><br><span class="line"><span class="keyword">if</span>(data[cnt] == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">++cnt;</span><br><span class="line">}</span><br><span class="line">data[cnt] = temp;</span><br><span class="line"><span class="keyword">if</span>(count == <span class="number">1</span>){<span class="comment">//&#x7279;&#x522B;&#x5730;&#xFF0C;&#x5F53;&#x63D2;&#x5728;&#x5934;&#x7ED3;&#x70B9;&#x524D;&#x9762;&#xFF0C;front&#x8981;&#x6307;&#x5411;cnt</span></span><br><span class="line">r[cnt] = front;</span><br><span class="line">front = cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> pre = front;</span><br><span class="line"><span class="keyword">while</span>(count &gt; <span class="number">2</span>){</span><br><span class="line">pre = r[pre];</span><br><span class="line">--count;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(count != n){</span><br><span class="line">r[cnt] = r[pre];<span class="comment">//q-&gt;next = pre-&gt;next;</span></span><br><span class="line">r[pre] = cnt;<span class="comment">//pre-&gt;next = q;</span></span><br><span class="line">}<span class="keyword">else</span>{<span class="comment">//&#x7279;&#x522B;&#x5730;&#xFF0C;&#x672B;&#x5C3E;&#x63D2;&#x5165;&#x7ED3;&#x70B9;&#xFF0C;q-&gt;next = null;</span></span><br><span class="line">r[pre] = cnt;</span><br><span class="line">r[cnt] = -<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><h3 id="&#x94FE;&#x8868;&#x7684;&#x5220;&#x9664;"><a href="#&#x94FE;&#x8868;&#x7684;&#x5220;&#x9664;" class="headerlink" title="&#x94FE;&#x8868;&#x7684;&#x5220;&#x9664;"></a>&#x94FE;&#x8868;&#x7684;&#x5220;&#x9664;</h3><p>&#x8981;&#x6C42;&#x5220;&#x9664;&#x7B2C;count&#x4E2A;&#x5143;&#x7D20;<br><strong>&#x7B97;&#x6CD5;&#x5B9E;&#x73B0;</strong></p><ul><li>&#x4E3A;&#x8282;&#x7701;&#x7A7A;&#x95F4;&#xFF0C;&#x5220;&#x9664;&#x7684;&#x5143;&#x7D20;&#x7684;data[]&#x548C; r[]&#x503C;&#x5747;&#x7F6E;&#x4E3A;0&#xFF0C;&#x8FD9;&#x662F;&#x4E3A;&#x518D;&#x6B21;&#x63D2;&#x5165;&#x65B0;&#x7ED3;&#x70B9;&#x817E;&#x51FA;&#x4F4D;&#x7F6E;&#xFF1B;</li><li>&#x56DE;&#x5FC6;&#x94FE;&#x8868;&#x7684;&#x5220;&#x9664;&#x64CD;&#x4F5C;<code>pre-&gt;next = q-&gt;next</code>&#xFF0C;&#x81F3;&#x5C11;&#x8981;&#x627E;&#x5230;&#x7B2C;count&#x7684;&#x4F4D;&#x7F6E;&#xFF1B;</li><li>&#x4E8E;&#x662F;&#x9700;&#x8981;&#x5FAA;&#x73AF;count-1&#x6B21;&#x3002;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5220;&#x9664;&#x8F83;&#x6DFB;&#x52A0;&#x8FD8;&#x662F;&#x5BB9;&#x6613;&#x4E9B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> count)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(count &gt; n)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">--n;</span><br><span class="line"><span class="keyword">int</span> cnt = front, pre = front;</span><br><span class="line"><span class="keyword">if</span>(count == <span class="number">1</span>){<span class="comment">//&#x7279;&#x522B;&#x5730;&#xFF0C;&#x5220;&#x9664;&#x7B2C;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;&#xFF0C;&#x8981;&#x5C06;front&#x8FD8;&#x539F;&#xFF0C;&#x4EE5;&#x53CA;&#x66F4;&#x6539;front</span></span><br><span class="line">cnt = r[front];</span><br><span class="line">data[pre] = <span class="number">0</span>;</span><br><span class="line">r[pre] = -<span class="number">1</span>;</span><br><span class="line">front = cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(count &gt; <span class="number">1</span>){</span><br><span class="line">pre = cnt;</span><br><span class="line">cnt = r[cnt];</span><br><span class="line">--count;</span><br><span class="line">}</span><br><span class="line">r[pre] = r[cnt];<span class="comment">//pre-&gt;next = q-&gt;next</span></span><br><span class="line">data[cnt] = <span class="number">0</span>;<span class="comment">//&#x5220;&#x9664;&#x7684;&#x7ED3;&#x70B9;&#x8FDB;&#x884C;&#x8FD8;&#x539F;</span></span><br><span class="line">r[cnt] = -<span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><p>&#x4EE5;&#x4E0A;&#x5C0F;&#x5C0F;&#x6D4B;&#x8BD5;&#x4E00;&#x4E0B;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">New_List L = <span class="keyword">new</span> New_List(n);</span><br><span class="line">init(L, n);</span><br><span class="line">L.print();</span><br><span class="line">L.Add(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">L.print();</span><br><span class="line">L.Delete(<span class="number">1</span>);</span><br><span class="line">L.Delete(<span class="number">2</span>);</span><br><span class="line">L.print();</span><br></pre></td></tr></table></figure><h3 id="&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x4E24;&#x4E2A;&#x6709;&#x5E8F;&#x94FE;&#x8868;&#x5408;&#x5E76;"><a href="#&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x4E24;&#x4E2A;&#x6709;&#x5E8F;&#x94FE;&#x8868;&#x5408;&#x5E76;" class="headerlink" title="&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x4E24;&#x4E2A;&#x6709;&#x5E8F;&#x94FE;&#x8868;&#x5408;&#x5E76;"></a>&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x4E24;&#x4E2A;&#x6709;&#x5E8F;&#x94FE;&#x8868;&#x5408;&#x5E76;</h3><p>&#x6709;&#x4E86;&#x4E4B;&#x524D;New_List&#x7C7B;&#xFF0C;&#x4E24;&#x4E2A;&#x6709;&#x5E8F;&#x94FE;&#x8868;&#x5408;&#x5E76;&#x5C31;&#x53EA;&#x7528;&#x4E00;&#x4E2A;Merge()&#x65B9;&#x6CD5;&#x5C31;&#x884C;&#x4E86;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&#x751F;&#x6210;&#x4E24;&#x4E2A;&#x94FE;&#x8868;</span></span><br><span class="line"><span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">New_List L1 = <span class="keyword">new</span> New_List(n);</span><br><span class="line">init(L1, n);</span><br><span class="line">L1.print();</span><br><span class="line"></span><br><span class="line">n = sc.nextInt();</span><br><span class="line">New_List L2 = <span class="keyword">new</span> New_List(n);</span><br><span class="line">init(L2, n);</span><br><span class="line">L2.print();</span><br><span class="line"><span class="comment">//&#x5408;&#x5E76;</span></span><br><span class="line">Merge(L1, L2);</span><br></pre></td></tr></table></figure><p><strong>&#x7B97;&#x6CD5;&#x5B9E;&#x73B0;</strong></p><ul><li><p>&#x5176;&#x5B9E;&#x548C;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x4E2D;&#x7684;merge()&#x64CD;&#x4F5C;&#x5927;&#x540C;&#x5C0F;&#x5F02;&#x4E86;&#xFF0C;&#x4E0D;&#x540C;&#x70B9;&#x5C31;&#x5728;&#x4E8E;&#x904D;&#x5386;&#x4E24;&#x6570;&#x7EC4;&#x4E0D;&#x662F;&#x987A;&#x5E8F;&#x7684;&#xFF0C;&#x800C;&#x662F;&#x5229;&#x7528;&#x4E86;r[]&#x4E0B;&#x6807;&#xFF1B;</p></li><li><p>&#x5B9E;&#x73B0;&#x7684;&#x540C;&#x65F6;&#x5C31;&#x5F53;&#x662F;&#x5BF9;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x7684;&#x52A0;&#x6DF1;&#x7406;&#x89E3;&#x4E86;&#x3002;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Merge</span><span class="params">(New_List L1, New_List L2)</span></span>{</span><br><span class="line"><span class="keyword">int</span> cnt1 = L1.front;</span><br><span class="line"><span class="keyword">int</span> cnt2 = L2.front;</span><br><span class="line"><span class="comment">//&#x65B0;&#x94FE;&#x8868;&#x7684;&#x957F;&#x5EA6;&#x521D;&#x59CB;&#x5316;&#x4E3A;0</span></span><br><span class="line">New_List L3 = <span class="keyword">new</span> New_List(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;<span class="comment">//&#x8BB0;&#x5F55;&#x65B0;&#x94FE;&#x8868;&#x957F;&#x5EA6;</span></span><br><span class="line"><span class="comment">//&#x5F52;&#x5E76;&#x4E2D;&#x7684;while(i&lt;=a.length &amp;&amp; j&lt;=b.length)</span></span><br><span class="line"><span class="keyword">while</span>(cnt1!=-<span class="number">1</span> &amp;&amp; cnt2!=-<span class="number">1</span>){</span><br><span class="line"><span class="keyword">if</span>(L1.data[cnt1] &lt;= L2.data[cnt2]){</span><br><span class="line">L3.Add(++k, L1.data[cnt1]);</span><br><span class="line">cnt1 = L1.r[cnt1];</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">L3.Add(++k, L2.data[cnt2]);</span><br><span class="line">cnt2 = L2.r[cnt2];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(cnt1 != -<span class="number">1</span>){</span><br><span class="line">L3.Add(++k, L1.data[cnt1]);</span><br><span class="line">cnt1 = L1.r[cnt1];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(cnt2 != -<span class="number">1</span>){</span><br><span class="line">L3.Add(++k, L2.data[cnt2]);</span><br><span class="line">cnt2 = L2.r[cnt2];</span><br><span class="line">}</span><br><span class="line">L3.print();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>&#x7167;&#x7740;&#x8FD9;&#x4E2A;&#x601D;&#x8DEF;&#x53EF;&#x4EE5;&#x7EE7;&#x7EED;&#x601D;&#x8003;&#x66F4;&#x591A;&#x64CD;&#x4F5C;&#xFF0C;&#x5176;&#x5B9E;&#x5199;&#x4E0B;&#x4E86;&#x89C9;&#x5F97;&#xFF0C;&#x7528;&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x548C;&#x539F;&#x59CB;&#x7684;&#x94FE;&#x8868;&#x76F8;&#x6BD4;&#x5E76;&#x6CA1;&#x6709;&#x7B80;&#x5355;&#x592A;&#x591A;&#xFF0C;&#xFF08;&#x53CD;&#x800C;&#x56E0;&#x4E3A;&#x6570;&#x7EC4;&#x7684;&#x8FDE;&#x7EED;&#x8FD9;&#x4E00;&#x6027;&#x8D28;&#xFF0C;&#x8981;&#x8003;&#x8651;&#x5C06;&#x5220;&#x9664;&#x7684;&#x7ED3;&#x70B9;&#x8FD8;&#x539F;&#x4E3A;&#x7A7A;&#xFF09;&#x4E0D;&#x50CF;&#x7528;&#x6570;&#x7EC4;&#x8868;&#x793A;&#x4E00;&#x4E9B;&#x6811;&#x76F8;&#x5173;&#x7684;&#x64CD;&#x4F5C;&#x90A3;&#x4E48;&#x4FBF;&#x5229;&#xFF1B;</p></li><li><p>&#x4EC5;&#x5F53;&#x4F5C;&#x601D;&#x7EF4;&#x7684;&#x6269;&#x5C55;&#x5427;&#xFF1B;&#x6700;&#x540E;&#x9644;&#x4E0A;&#x5B8C;&#x6574;&#x7684;New_List&#x7C7B;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">New_List</span></span>{</span><br><span class="line"><span class="keyword">int</span> front;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span>[] data = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span>[] r = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">New_List</span><span class="params">(<span class="keyword">int</span> n)</span></span>{</span><br><span class="line"><span class="keyword">this</span>.n = n;</span><br><span class="line">front = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> count, <span class="keyword">int</span> temp)</span></span>{</span><br><span class="line">++n;</span><br><span class="line"><span class="keyword">if</span>(count &gt; n)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(cnt &lt;= n){</span><br><span class="line"><span class="keyword">if</span>(data[cnt] == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">++cnt;</span><br><span class="line">}</span><br><span class="line">data[cnt] = temp;</span><br><span class="line"><span class="keyword">if</span>(count == <span class="number">1</span>){</span><br><span class="line">r[cnt] = front;</span><br><span class="line">front = cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> pre = front;</span><br><span class="line"><span class="keyword">while</span>(count &gt; <span class="number">2</span>){</span><br><span class="line">pre = r[pre];</span><br><span class="line">--count;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(count != n){</span><br><span class="line">r[cnt] = r[pre];</span><br><span class="line">r[pre] = cnt;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">r[pre] = cnt;</span><br><span class="line">r[cnt] = -<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> count)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(count &gt; n)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">--n;</span><br><span class="line"><span class="keyword">int</span> cnt = front, pre = front;</span><br><span class="line"><span class="keyword">if</span>(count == <span class="number">1</span>){</span><br><span class="line">cnt = r[front];</span><br><span class="line">data[pre] = <span class="number">0</span>;</span><br><span class="line">r[pre] = -<span class="number">1</span>;</span><br><span class="line">front = cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(count &gt; <span class="number">1</span>){</span><br><span class="line">pre = cnt;</span><br><span class="line">cnt = r[cnt];</span><br><span class="line">--count;</span><br><span class="line">}</span><br><span class="line">r[pre] = r[cnt];</span><br><span class="line">data[cnt] = <span class="number">0</span>;</span><br><span class="line">r[cnt] = -<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> cnt = front;</span><br><span class="line"><span class="keyword">while</span>(cnt != -<span class="number">1</span>){</span><br><span class="line">System.out.print(data[cnt] +<span class="string">&quot; &quot;</span>);</span><br><span class="line">cnt = r[cnt];</span><br><span class="line">}</span><br><span class="line">System.out.println();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客-邻值查找</title>
      <link href="/2020/05/16/%E7%89%9B%E5%AE%A2-%E9%82%BB%E5%80%BC%E6%9F%A5%E6%89%BE/"/>
      <url>/2020/05/16/%E7%89%9B%E5%AE%A2-%E9%82%BB%E5%80%BC%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;&#xFF1A;<a href="https://ac.nowcoder.com/acm/contest/1007/A" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/1007/A</a><br>&#x8FD9;&#x9053;&#x9898;&#x76EE;&#x5212;&#x5230;&#x4E86;&#x94FE;&#x8868;&#x4E13;&#x9898;&#x4E2D;&#xFF0C;&#x4E00;&#x756A;&#x6298;&#x817E;&#x540E;&#x603B;&#x7ED3;&#x4E24;&#x79CD;&#x89E3;&#x6CD5;</p></blockquote><h3 id="&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x94FE;&#x8868;&#x89E3;&#x51B3;"><a href="#&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x94FE;&#x8868;&#x89E3;&#x51B3;" class="headerlink" title="&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x94FE;&#x8868;&#x89E3;&#x51B3;"></a>&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x94FE;&#x8868;&#x89E3;&#x51B3;</h3><p>&#x4E3A;&#x6B64;&#x7279;&#x610F;&#x770B;&#x4E86;&#x770B;&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x94FE;&#x8868;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x63D0;&#x5347;&#x4E00;&#x4E0B;&#x601D;&#x8DEF;&#xFF0C;&#x53C2;&#x8003;&#x6211;&#x7684;&#x53E6;&#x4E00;&#x7BC7;&#x535A;&#x5BA2;&#xFF1A;<br><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong></p><h3 id="set&#x89E3;&#x51B3;"><a href="#set&#x89E3;&#x51B3;" class="headerlink" title="set&#x89E3;&#x51B3;"></a>set&#x89E3;&#x51B3;</h3>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集及优化（路径压缩+按秩合并）</title>
      <link href="/2020/05/14/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2020/05/14/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>&#x5E76;&#x67E5;&#x96C6;(Disjoint-Set)&#x662F;&#x4E00;&#x79CD;&#x53EF;&#x4EE5;&#x52A8;&#x6001;&#x7EF4;&#x62A4;&#x82E5;&#x5E72;&#x4E2A;&#x4E0D;&#x91CD;&#x53E0;&#x7684;&#x96C6;&#x5408;,&#x5E76;&#x652F;&#x6301;&#x5408;&#x5E76;&#x4E0E;&#x67E5;&#x8BE2;&#x4E24;&#x79CD;&#x64CD;&#x4F5C;&#x7684;&#x4E00;&#x79CD;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x3002;</p><a id="more"></a><p>&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#x94FE;&#x63A5;&#xFF1A;<a href="https://blog.csdn.net/ccsu_cherish/article/details/9750683" target="_blank" rel="noopener">https://blog.csdn.net/ccsu_cherish/article/details/9750683</a></p><h3 id="&#x5E76;&#x67E5;&#x96C6;&#x7279;&#x6027;"><a href="#&#x5E76;&#x67E5;&#x96C6;&#x7279;&#x6027;" class="headerlink" title="&#x5E76;&#x67E5;&#x96C6;&#x7279;&#x6027;"></a>&#x5E76;&#x67E5;&#x96C6;&#x7279;&#x6027;</h3><ul><li>&#x5E76;&#x67E5;&#x96C6;&#x662F;&#x4E00;&#x4E2A;&#x68EE;&#x6797;&#xFF0C;pre[]&#x5B58;&#x653E;&#x7236;&#x7ED3;&#x70B9;</li><li>Find()&#x64CD;&#x4F5C;&#x2014;&#x2014;&#x53EF;&#x4EE5;&#x67E5;&#x8BE2;&#x4EFB;&#x4E00;&#x7ED3;&#x70B9;&#x7684;&#x6839;&#x7ED3;&#x70B9;&#x5E76;&#x8FD4;&#x56DE;&#x3001;&#x5224;&#x65AD;&#x4E24;&#x4E2A;&#x8282;&#x70B9;&#x662F;&#x5426;&#x5C5E;&#x4E8E;&#x540C;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#xFF08;&#x662F;&#x5426;&#x5C5E;&#x4E8E;&#x540C;&#x4E00;&#x4E2A;&#x6839;&#x8282;&#x70B9;&#x4E0B;&#xFF09;</li><li>Merge()&#x64CD;&#x4F5C;&#x2014;&#x2014;&#x5B9E;&#x73B0;&#x4E24;&#x4E2A;&#x4E0D;&#x540C;&#x96C6;&#x5408;&#x7684;&#x5408;&#x5E76; </li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> pre[<span class="number">100005</span>];    <span class="comment">//&#x7236;&#x4EB2;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> m)</span>    <span class="comment">//&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x6839;&#x5C31;&#x662F;&#x81EA;&#x8EAB;</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">{</span><br><span class="line">pre[i] = i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span>     <span class="comment">//&#x67E5;&#x8BE2;&#x6811;&#x6839;</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span>(pre[x]!=x)</span><br><span class="line">{</span><br><span class="line">x = pre[x];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span>    <span class="comment">//&#x5408;&#x5E76;x&#x548C;y&#x6240;&#x5C5E;&#x7684;&#x96C6;&#x5408;</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">pre[Find(x)] = pre[Find(y)];</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x5E76;&#x67E5;&#x96C6;&#x4F18;&#x5316;"><a href="#&#x5E76;&#x67E5;&#x96C6;&#x4F18;&#x5316;" class="headerlink" title="&#x5E76;&#x67E5;&#x96C6;&#x4F18;&#x5316;"></a>&#x5E76;&#x67E5;&#x96C6;&#x4F18;&#x5316;</h3><p>&#x4E24;&#x79CD;&#x4F18;&#x5316;&#x65B9;&#x5F0F;&#x90FD;&#x662F;&#x4E3A;&#x4E86;&#x5C3D;&#x53EF;&#x80FD;&#x964D;&#x4F4E;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#x3002;</p><ul><li>&#x8DEF;&#x5F84;&#x538B;&#x7F29;<br>Find()&#x67E5;&#x8BE2;&#x6811;&#x6839;&#x4E2D;&#x8BA9;&#x8DEF;&#x5F84;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x76F4;&#x63A5;&#x6307;&#x5411;&#x6839;&#x7ED3;&#x70B9;<br><code>pre[x]=pre[pre[x]];</code></li><li>&#x6309;&#x79E9;&#x5408;&#x5E76;<br>runk[]&#x8BB0;&#x5F55;&#x67D0;&#x8282;&#x70B9;&#x7684;&#x9AD8;&#x5EA6;<br>Merge()&#x5408;&#x5E76;&#x65F6;&#x8BA9;&#x9AD8;&#x5EA6;&#x5C0F;&#x7684;&#x6811;&#x5408;&#x5E76;&#x5230;&#x9AD8;&#x5EA6;&#x5927;&#x7684;&#x6811;</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> pre[N];<span class="comment">//&#x7236;&#x4EB2; </span></span><br><span class="line"><span class="keyword">int</span> runk[N];<span class="comment">//&#x9AD8;&#x5EA6; </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//&#x67E5;&#x8BE2;&#x6811;&#x6839; </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span>(pre[x]!=x)</span><br><span class="line">{</span><br><span class="line">pre[x]=pre[pre[x]];  <span class="comment">//&#x8DEF;&#x5F84;&#x538B;&#x7F29; </span></span><br><span class="line">x = pre[x];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><span class="comment">//&#x5408;&#x5E76;x&#x548C;y&#x6240;&#x5C5E;&#x7684;&#x96C6;&#x5408; </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> xe = Find(x);</span><br><span class="line"><span class="keyword">int</span> ye = Find(y);</span><br><span class="line"><span class="keyword">if</span>(xe!=ye)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(runk[xe]&gt;=runk[ye])</span><br><span class="line">{</span><br><span class="line">pre[ye] = xe;</span><br><span class="line">runk[xe] = max(runk[xe], runk[ye]+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">{</span><br><span class="line">pre[xe] = ye;</span><br><span class="line">runk[ye] = max(runk[ye], runk[xe]+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x4F8B;&#x9898;&#xB7;&#x84DD;&#x6865;"><a href="#&#x4F8B;&#x9898;&#xB7;&#x84DD;&#x6865;" class="headerlink" title="&#x4F8B;&#x9898;&#xB7;&#x84DD;&#x6865;"></a>&#x4F8B;&#x9898;&#xB7;&#x84DD;&#x6865;</h3><blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;&#xFF1A;<a href="http://lx.lanqiao.cn/problem.page?gpid=T458" target="_blank" rel="noopener">&#x5408;&#x6839;&#x690D;&#x7269;</a><br><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x76F4;&#x63A5;&#x8FD4;&#x56DE;&#x4E0D;&#x540C;&#x7684;&#x96C6;&#x5408;&#x6570;<br>&#x8FDE;&#x6839;&#x73B0;&#x8C61;&#x5373;&#x901A;&#x8FC7;Merge()&#x4EE4;&#x4E24;&#x4E2A;&#x7ED3;&#x70B9;&#x5C5E;&#x4E8E;&#x540C;&#x4E00;&#x96C6;&#x5408;<br>&#x4E8E;&#x662F;&#x521D;&#x59CB;&#x5316;<code>pre[i] = i</code>&#x7136;&#x540E;&#x8BE5;&#x5408;&#x5E76;&#x7684;&#x5408;&#x5E76;<br>&#x6700;&#x540E;&#x901A;&#x8FC7;<code>Find(i)==i</code>&#x6765;&#x786E;&#x5B9A;&#x4E0D;&#x540C;&#x7684;&#x96C6;&#x5408;&#x6570;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> pre[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">{</span><br><span class="line">pre[i] = i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span>(pre[x]!=x)</span><br><span class="line">{</span><br><span class="line">x = pre[x];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">pre[Find(x)] = pre[Find(y)];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> m, n, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;m, &amp;n, &amp;k);</span><br><span class="line">Init(m*n);</span><br><span class="line"><span class="keyword">int</span> x, y, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">Merge(x, y);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m*n; ++i)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(Find(i) == i)</span><br><span class="line">++ans;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
            <tag> 蓝桥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LIS优化</title>
      <link href="/2020/05/08/LIS%EF%BC%88%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96+%E4%BA%8C%E5%88%86%EF%BC%89/"/>
      <url>/2020/05/08/LIS%EF%BC%88%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96+%E4%BA%8C%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>LIS(Longest Increasing Subsequence)&#x5373;&#x6700;&#x957F;&#x4E0A;&#x5347;&#x5B50;&#x5E8F;&#x5217;,<br>&#x5982;&#x5BF9;&#x4E8E; 3&#xFF0C;1&#xFF0C;5&#xFF0C;6&#xFF0C;2<br>&#x5176;LIS&#x4E3A; 3&#xFF08;1&#xFF0C;5&#xFF0C;6&#xFF09;</p><a id="more"></a><p>&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#x94FE;&#x63A5;&#xFF1A;<a href="https://blog.csdn.net/zhaohaibo_/article/details/83420145" target="_blank" rel="noopener">https://blog.csdn.net/zhaohaibo_/article/details/83420145</a></p><h3 id="LIS"><a href="#LIS" class="headerlink" title="LIS"></a>LIS</h3><p>dp&#x89E3;&#x51B3;LIS&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;O$(n^2)$<br><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong></p><ol><li>dp[i] &#x8BB0;&#x5F55;a[i]&#x4E3A;&#x672B;&#x5C3E;&#x7684;&#x4E0A;&#x5347;&#x5B50;&#x5E8F;&#x5217;, &#x4EE4;0&lt;=j &lt; i</li><li>&#x4E00;&#x91CD;&#x5FAA;&#x73AF;i&#x904D;&#x5386;a[],&#x4E00;&#x91CD;&#x5FAA;&#x73AF;&#x904D;&#x5386; a[0]~a[i]<br>dp[i] = $\begin{cases}1,a[i]&lt;=a[j]\ max(dp[i],dp[j]+1),a[i]&gt;a[j]\end{cases}$ </li></ol><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">double</span> arr[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> dp[n];</span><br><span class="line"><span class="keyword">int</span> front[n];</span><br><span class="line">fill(dp, dp+n, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span>  k, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">{</span><br><span class="line">dp[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(arr[j] &lt; arr[i])</span><br><span class="line">{</span><br><span class="line">dp[i] = max(dp[i], dp[j]+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">res = max(res, dp[i]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="LIS&#x4F18;&#x5316;"><a href="#LIS&#x4F18;&#x5316;" class="headerlink" title="LIS&#x4F18;&#x5316;"></a>LIS&#x4F18;&#x5316;</h3><p>&#x961F;&#x5217;+&#x4E8C;&#x5206;&#x89E3;&#x51B3;LIS&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;O$(n log\ n)$<br><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong></p><ol><li>&#x961F;&#x5217;queue&#x52A8;&#x6001;&#x5B58;&#x50A8;&#x4E0A;&#x5347;&#x5E8F;&#x5217;&#xFF0C;&#x4FDD;&#x8BC1;queue&#x59CB;&#x7EC8;&#x5347;&#x5E8F;</li><li>&#x4E00;&#x91CD;&#x5FAA;&#x73AF;&#x8FD8;&#x662F;i&#x904D;&#x5386;a[i]&#xFF0C;&#x4E0D;&#x540C;&#x7684;&#x662F;<br>&#x82E5;a[i] &#x5927;&#x4E8E;&#x961F;&#x5217;&#x4E2D;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5C06;a[i]&#x52A0;&#x5165;&#x961F;&#x5C3E;&#xFF1B;<br>&#x53CD;&#x4E4B;&#xFF0C;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#x961F;&#x5217;queue&#x4E2D;&#x5927;&#x4E8E;a[i]&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x4EE4;a[i]&#x5C06;&#x5176;&#x66FF;&#x6362;&#x3002;</li><li>&#x6700;&#x540E;&#x5F97;&#x5230;&#x961F;&#x5217;&#x7684;&#x957F;&#x5EA6;&#x5373;LIS</li></ol><p>&#x5982;&#x5BF9;&#x4E8E; 3&#xFF0C;1&#xFF0C;5&#xFF0C;6&#xFF0C;2 &#x904D;&#x5386;a[i]&#x5F97;&#x5230;&#x7684;&#x961F;&#x5217;queue&#x4F9D;&#x6B21;&#x4E3A;&#xFF1A;</p><ul><li>3</li><li>1</li><li>1&#xFF0C;5</li><li>1&#xFF0C;5&#xFF0C;6</li><li>1&#xFF0C;2&#xFF0C;6</li></ul><p>***&#x6CE8;&#xFF1A;<br>&#x8BB0;k&#x4E3A;&#x5E8F;&#x5217;a[0:i]&#x7684;&#x6700;&#x957F;&#x9012;&#x589E;&#x5B50;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6;&#xFF08;$0\leq i&lt;n$&#xFF09;&#xFF1B;<br>queue[k]&#x662F;&#x5E8F;&#x5217;a[0:i]&#x4E2D;&#x6240;&#x6709;&#x957F;&#x5EA6;&#x4E3A;k&#x7684;&#x9012;&#x589E;&#x5B50;&#x5E8F;&#x5217;&#x4E2D;&#x7684;&#x6700;&#x5C0F;&#x7ED3;&#x5C3E;&#x5143;&#x7D20;&#x503C;&#xFF1B;<br>&#x53EF;&#x4EE5;&#x770B;&#x5230;queue[] &#x5E76;&#x4E0D;&#x662F;&#x52A8;&#x6001;&#x5B58;&#x653E;&#x4EE5;a[0] ~ a[i]&#x7684;LIS&#x5E8F;&#x5217;&#xFF1B;<br>    &#x800C;&#x662F;&#x52A8;&#x6001;&#x8BA9;&#x5347;&#x5E8F;&#x7684;&#x5143;&#x7D20;&#x5C3D;&#x53EF;&#x80FD;&#x5C0F;&#xFF0C;&#x4EE5;&#x4FBF;&#x540E;&#x7EED;&#x7684;&#x66F4;&#x65B0;&#xFF08;&#x89E3;&#x91CA;&#x4E0D;&#x4E0B;&#x53BB;&#x4E86;&#xFF0C;&#x4E0D;&#x7981;&#x611F;&#x6168;&#x961F;&#x5217;&#x4F18;&#x5316;&#x7B97;&#x6CD5;&#x7684;&#x7CBE;&#x5999;&#x554A;~&#xFF09;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">queue</span>[<span class="number">40005</span>];</span><br><span class="line"><span class="keyword">int</span>  len = <span class="number">0</span>, k, res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">queue</span>[++len] = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">queue</span>[len] &lt; arr[i])</span><br><span class="line"><span class="built_in">queue</span>[++len] = arr[i];</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//&#x4E8C;&#x5206;&#x67E5;&#x627E;&#x961F;&#x5217;queue&#x4E2D;&#x5927;&#x4E8E;a[i]&#x7684;&#x5143;&#x7D20;</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1</span>, r = len, mid, ans;</span><br><span class="line"><span class="keyword">while</span>(l &lt;= r)</span><br><span class="line">{</span><br><span class="line">mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">queue</span>[mid] &gt; arr[i])</span><br><span class="line">{</span><br><span class="line">ans = mid;</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">queue</span>[ans] = arr[i];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="LIS&#x9898;&#x76EE;"><a href="#LIS&#x9898;&#x76EE;" class="headerlink" title="LIS&#x9898;&#x76EE;"></a>LIS&#x9898;&#x76EE;</h3><blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;: <a href="https://vjudge.net/problem/HDU-1950" target="_blank" rel="noopener">https://vjudge.net/problem/HDU-1950</a></p></blockquote><p>&#x9898;&#x76EE;&#x662F;&#x591A;&#x7EC4;&#x6837;&#x4F8B;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x4F18;&#x5316;O$(n^2)$&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x59A5;&#x59A5;&#x8D85;&#x65F6;&#xFF1B;<br>&#x6240;&#x4EE5;&#x961F;&#x5217;+&#x4E8C;&#x5206;&#x771F;&#x9999;&#x554A;</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>真分数的最大埃及分数</title>
      <link href="/2020/05/08/%E7%9C%9F%E5%88%86%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%9F%83%E5%8F%8A%E5%88%86%E6%95%B0/"/>
      <url>/2020/05/08/%E7%9C%9F%E5%88%86%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%9F%83%E5%8F%8A%E5%88%86%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>&#x57C3;&#x53CA;&#x5206;&#x6570;&#x662F;&#x6307;&#x5206;&#x5B50;&#x662F;1&#x7684;&#x5206;&#x6570;&#xFF0C;&#x4E5F;&#x53EB;&#x5355;&#x4F4D;&#x5206;&#x6570;&#x3002;&#x53E4;&#x4EE3;&#x57C3;&#x53CA;&#x4EBA;&#x5728;&#x8FDB;&#x884C;&#x5206;&#x6570;&#x8FD0;&#x7B97;&#x65F6;&#x3002;&#x53EA;&#x4F7F;&#x7528;&#x5206;&#x5B50;&#x662F;1&#x7684;&#x5206;&#x6570;&#x3002;</p><blockquote><p>&#x95EE;&#x9898;&#x63CF;&#x8FF0;<br>&#x628A;&#x4E00;&#x4E2A;&#x771F;&#x5206;&#x6570;&#x5206;&#x89E3;&#x4E3A;&#x57C3;&#x53CA;&#x5206;&#x6570;&#x548C;&#x7684;&#x5F62;&#x5F0F;<br>Input&#xFF1A;3 5<br>Output&#xFF1A;1/2 1/10&#xFF08;$\frac{3}{5}=\frac{1}{2}+\frac{1}{10}$&#xFF09;</p></blockquote><a id="more"></a><p>&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#x53C2;&#x8003;&#xFF1A;<a href="https://www.jianshu.com/p/da04c77e11d0" target="_blank" rel="noopener">https://www.jianshu.com/p/da04c77e11d0</a><br><strong>&#x7B97;&#x6CD5;&#x5206;&#x6790;</strong><br>&#x8BBE;&#x771F;&#x5206;&#x6570; $\frac{a}{b}$ &#xFF0C;b&#x9664;&#x4EE5;a&#x5F97;c&#xFF0C;&#x4F59;&#x6570;&#x4E3A;d<br>&#x5219;&#x6709; $b = a\cdot c+d$ &#xFF0C;&#x4E24;&#x8FB9;&#x540C;&#x65F6;&#x9664;&#x4EE5;a<br>$\frac{b}{a} = c+\frac{d}{a}$ &#xFF0C;&#x5DF2;&#x77E5;$d &lt; a$<br>&#x5219;&#x6709; $\frac{b}{a} &lt; c+ 1$<br>$\frac{a}{b} &gt; \frac{1}{c+1}$<br>&#x4EE4;<code>e = c+1</code>&#xFF0C;&#x5219;$\frac{1}{e}$&#x662F;$\frac{a}{b}$&#x6700;&#x5927;&#x57C3;&#x53CA;&#x5206;&#x6570;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;<span style="color:blue">&#x8D2A;&#x5FC3;&#x601D;&#x60F3;</span>&#xFF0C;&#x4E0D;&#x65AD;&#x5206;&#x89E3; $\frac{a}{b}$ &#xFF0C;&#x76F4;&#x81F3;a=1&#xFF0C;&#x5206;&#x89E3;&#x7ED3;&#x675F;<br>&#x4F2A;&#x4EE3;&#x7801;&#x4E3A; $f(\frac{a}{b}) = \frac{1}{e}+f(\frac{a}{b}-\frac{1}{e})$<br>&#x901A;&#x5206;&#x4E00;&#x4E0B; $\frac{a}{b}-\frac{1}{e} = \frac{a \cdot e - b}{b\cdot e}$ &#xFF0C;&#x6CE8;&#x610F;&#x8FD9;&#x4E2A;&#x5206;&#x5F0F;&#x4E0A;&#x4E0B;&#x8FD8;&#x8981;&#x7EA6;&#x5206;&#x4E00;&#x4E0B;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x7B97;&#x4E00;&#x4E0B;Gcd.<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(b == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> Gcd(b, a%b);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="keyword">do</span>{</span><br><span class="line"><span class="keyword">int</span> e = b / a + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1/%d &quot;</span>, e);</span><br><span class="line">a = a * e - b;</span><br><span class="line">b = b * e;</span><br><span class="line"><span class="keyword">int</span> d = Gcd(a, b);</span><br><span class="line">a /= d;</span><br><span class="line">b /= d;</span><br><span class="line">}<span class="keyword">while</span>(a &gt; <span class="number">1</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1/%d &quot;</span>, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数学知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>·【蓝桥】·包子凑数</title>
      <link href="/2020/04/28/%E8%93%9D%E6%A1%A5-%E5%8C%85%E5%AD%90%E5%87%91%E6%95%B0/"/>
      <url>/2020/04/28/%E8%93%9D%E6%A1%A5-%E5%8C%85%E5%AD%90%E5%87%91%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>&#x9898;&#x76EE;&#x6765;&#x6E90;&#xFF1A;<a href="http://lx.lanqiao.cn/problem.page?gpid=T440" target="_blank">&#x5305;&#x5B50;&#x51D1;&#x6570;</a><br>&#x5178;&#x578B;&#x7684;Ax+By=C&#x95EE;&#x9898;&#xFF0C;&#x53E6;&#x4E00;&#x7BC7;&#x535A;&#x5BA2;&#x6709;&#x8BE6;&#x7EC6;&#x603B;&#x7ED3;&#xFF1A;<a href="https://www.weayer.top/2020/03/11/ax-by-c%E9%97%AE%E9%A2%98/" target="_blank">Ax+By=C&#x7684;&#x89E3;&#x7684;&#x8BA8;&#x8BBA;(&#x4EC5;A,B&#x4E3A;&#x5E38;&#x6570;)</a></p><a id="more"></a><blockquote><p>&#x95EE;&#x9898;&#x63CF;&#x8FF0;<br>&#x3000;&#x3000;&#x5C0F;&#x660E;&#x51E0;&#x4E4E;&#x6BCF;&#x5929;&#x65E9;&#x6668;&#x90FD;&#x4F1A;&#x5728;&#x4E00;&#x5BB6;&#x5305;&#x5B50;&#x94FA;&#x5403;&#x65E9;&#x9910;&#x3002;&#x4ED6;&#x53D1;&#x73B0;&#x8FD9;&#x5BB6;&#x5305;&#x5B50;&#x94FA;&#x6709;N&#x79CD;&#x84B8;&#x7B3C;&#xFF0C;&#x5176;&#x4E2D;&#x7B2C;i&#x79CD;&#x84B8;&#x7B3C;&#x6070;&#x597D;&#x80FD;&#x653E;Ai&#x4E2A;&#x5305;&#x5B50;&#x3002;&#x6BCF;&#x79CD;&#x84B8;&#x7B3C;&#x90FD;&#x6709;&#x975E;&#x5E38;&#x591A;&#x7B3C;&#xFF0C;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x662F;&#x65E0;&#x9650;&#x7B3C;&#x3002;<br>&#x3000;&#x3000;&#x6BCF;&#x5F53;&#x6709;&#x987E;&#x5BA2;&#x60F3;&#x4E70;X&#x4E2A;&#x5305;&#x5B50;&#xFF0C;&#x5356;&#x5305;&#x5B50;&#x7684;&#x5927;&#x53D4;&#x5C31;&#x4F1A;&#x8FC5;&#x901F;&#x9009;&#x51FA;&#x82E5;&#x5E72;&#x7B3C;&#x5305;&#x5B50;&#x6765;&#xFF0C;&#x4F7F;&#x5F97;&#x8FD9;&#x82E5;&#x5E72;&#x7B3C;&#x4E2D;&#x6070;&#x597D;&#x4E00;&#x5171;&#x6709;X&#x4E2A;&#x5305;&#x5B50;&#x3002;&#x6BD4;&#x5982;&#x4E00;&#x5171;&#x6709;3&#x79CD;&#x84B8;&#x7B3C;&#xFF0C;&#x5206;&#x522B;&#x80FD;&#x653E;3&#x3001;4&#x548C;5&#x4E2A;&#x5305;&#x5B50;&#x3002;&#x5F53;&#x987E;&#x5BA2;&#x60F3;&#x4E70;11&#x4E2A;&#x5305;&#x5B50;&#x65F6;&#xFF0C;&#x5927;&#x53D4;&#x5C31;&#x4F1A;&#x9009;2&#x7B3C;3&#x4E2A;&#x7684;&#x518D;&#x52A0;1&#x7B3C;5&#x4E2A;&#x7684;&#xFF08;&#x4E5F;&#x53EF;&#x80FD;&#x9009;&#x51FA;1&#x7B3C;3&#x4E2A;&#x7684;&#x518D;&#x52A0;2&#x7B3C;4&#x4E2A;&#x7684;&#xFF09;&#x3002;<br>&#x3000;&#x3000;&#x5F53;&#x7136;&#x6709;&#x65F6;&#x5305;&#x5B50;&#x5927;&#x53D4;&#x65E0;&#x8BBA;&#x5982;&#x4F55;&#x4E5F;&#x51D1;&#x4E0D;&#x51FA;&#x987E;&#x5BA2;&#x60F3;&#x4E70;&#x7684;&#x6570;&#x91CF;&#x3002;&#x6BD4;&#x5982;&#x4E00;&#x5171;&#x6709;3&#x79CD;&#x84B8;&#x7B3C;&#xFF0C;&#x5206;&#x522B;&#x80FD;&#x653E;4&#x3001;5&#x548C;6&#x4E2A;&#x5305;&#x5B50;&#x3002;&#x800C;&#x987E;&#x5BA2;&#x60F3;&#x4E70;7&#x4E2A;&#x5305;&#x5B50;&#x65F6;&#xFF0C;&#x5927;&#x53D4;&#x5C31;&#x51D1;&#x4E0D;&#x51FA;&#x6765;&#x4E86;&#x3002;<br>&#x3000;&#x3000;&#x5C0F;&#x660E;&#x60F3;&#x77E5;&#x9053;&#x4E00;&#x5171;&#x6709;&#x591A;&#x5C11;&#x79CD;&#x6570;&#x76EE;&#x662F;&#x5305;&#x5B50;&#x5927;&#x53D4;&#x51D1;&#x4E0D;&#x51FA;&#x6765;&#x7684;&#x3002;<br>&#x8F93;&#x5165;&#x683C;&#x5F0F;<br>&#x3000;&#x3000;&#x7B2C;&#x4E00;&#x884C;&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x6574;&#x6570;N&#x3002;(1 &lt;= N &lt;= 100)<br>&#x3000;&#x3000;&#x4EE5;&#x4E0B;N&#x884C;&#x6BCF;&#x884C;&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x6574;&#x6570;Ai&#x3002;(1 &lt;= Ai &lt;= 100)<br>&#x8F93;&#x51FA;&#x683C;&#x5F0F;<br>&#x3000;&#x3000;&#x4E00;&#x4E2A;&#x6574;&#x6570;&#x4EE3;&#x8868;&#x7B54;&#x6848;&#x3002;&#x5982;&#x679C;&#x51D1;&#x4E0D;&#x51FA;&#x7684;&#x6570;&#x76EE;&#x6709;&#x65E0;&#x9650;&#x591A;&#x4E2A;&#xFF0C;&#x8F93;&#x51FA;INF&#x3002;<br>&#x6837;&#x4F8B;&#x8F93;&#x5165;<br>2<br>4<br>5<br>&#x6837;&#x4F8B;&#x8F93;&#x51FA;<br>6<br>&#x6837;&#x4F8B;&#x8F93;&#x5165;<br>2<br>4<br>6<br>&#x6837;&#x4F8B;&#x8F93;&#x51FA;<br>INF<br>&#x6837;&#x4F8B;&#x8BF4;&#x660E;<br>&#x3000;&#x3000;&#x5BF9;&#x4E8E;&#x6837;&#x4F8B;1&#xFF0C;&#x51D1;&#x4E0D;&#x51FA;&#x7684;&#x6570;&#x76EE;&#x5305;&#x62EC;&#xFF1A;1, 2, 3, 6, 7, 11&#x3002;<br>&#x3000;&#x3000;&#x5BF9;&#x4E8E;&#x6837;&#x4F8B;2&#xFF0C;&#x6240;&#x6709;&#x5947;&#x6570;&#x90FD;&#x51D1;&#x4E0D;&#x51FA;&#x6765;&#xFF0C;&#x6240;&#x4EE5;&#x6709;&#x65E0;&#x9650;&#x591A;&#x4E2A;&#x3002;</p></blockquote><p><strong>&#x9898;&#x76EE;&#x5206;&#x6790;</strong></p><ul><li>&#x4F9D;&#x636E;&#x53E6;&#x4E00;&#x7BC7;&#x535A;&#x5BA2;&#x4E2D;&#x6709;&#x5173;Ax+By=C&#x7684;&#x89E3;&#x7684;&#x8BA8;&#x8BBA;(&#x4EC5;A,B&#x4E3A;&#x5E38;&#x6570;)&#xFF0C;Ax+By=C&#x53EF;&#x63A8;&#x5E7F;&#x5230;&#xFF1A;$a_0x_0+a_1x_1+&#x2026;+a_{n-1}x_{n-1} = c$</li></ul><ol><li>&#x82E5;$a_0,a_1,&#x2026;a_{n-1}$ &#x4E0D;&#x4E92;&#x8D28;&#xFF0C;&#x5219;&#x65E0;&#x89E3;&#x7684;C&#x7684;&#x4E2A;&#x6570;&#x4E3A;INF&#x3002;</li><li>&#x53CD;&#x4E4B;&#xFF0C;&#x65E0;&#x89E3;&#x7684;C&#x7684;&#x4E2A;&#x6570;&#x6709;&#x9650;&#xFF0C;C&#x6700;&#x5927;&#x53D6;$max{C|C&#x5BFC;&#x81F4;&#x65E0;&#x89E3;} = a_0<em>a_1</em>&#x2026;*a_{n-1} - (a_0+a_1+&#x2026;+a_{n-1})$&#xFF0C;&#x8F93;&#x5165;&#x6761;&#x4EF6;&#x5F97;&#xFF0C;&#x8FD9;&#x4E2A;max&#x662F;&#x5C0F;&#x4E8E;10000&#x7684;&#x3002;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5148;&#x4E0A;&#x4E3B;&#x51FD;&#x6570;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(!b)</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> Gcd(b, a%b);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i){</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> g;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i){</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">g = a[i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">g = Gcd(g, a[i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(g != <span class="number">1</span>){<span class="comment">//&#x82E5;&#x4E0D;&#x4E92;&#x8D28;&#xFF0C;c&#x65E0;&#x89E3;&#x7684;&#x4E2A;&#x6570;&#x4E3A;INF</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;INF\n&quot;</span>);</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">solve();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ol><p>&#x63A5;&#x4E0B;&#x6765;&#x4E3B;&#x8981;&#x662F;&#x8BA8;&#x8BBA;&#x4E92;&#x8D28;&#x6761;&#x4EF6;&#x4E0B;&#x5982;&#x4F55;&#x786E;&#x5B9A;C&#x65E0;&#x89E3;&#x7684;&#x4E2A;&#x6570;<br><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x4E2A;&#x5B8C;&#x5168;&#x80CC;&#x5305;&#xFF0C;&#x53EF;&#x9009;&#x7684;&#x7269;&#x54C1;&#x7684;&#x4E2A;&#x6570;&#x5F88;&#x591A;&#xFF0C;&#x770B;&#x80FD;&#x4E0D;&#x80FD;&#x51D1;&#x6210;C&#xFF0C;<br>&#x4F46;&#x4E0D;&#x6D89;&#x53CA;&#x5230;&#x80CC;&#x5305;&#x4EF7;&#x503C;&#xFF0C;&#x6CA1;&#x5FC5;&#x8981;&#x5957;dp&#xFF1B;<br>&#x7C7B;&#x4F3C;&#x57C3;&#x5F0F;&#x7B5B;&#x7D20;&#x6570;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x5DF2;&#x7ECF;&#x786E;&#x5B9A;&#x4E86;C&#x7684;&#x8303;&#x56F4;&#xFF08;0&#xFF0C;10000&#xFF09;&#xFF0C;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;num[]&#xFF0C;&#x8303;&#x56F4;&#x6700;&#x5927;&#x81EA;&#x7136;&#x5C31;&#x662F;10000&#x4E86;&#xFF1B;<br>&#x5982;&#x679C;mum[j]&#x80FD;&#x51D1;&#x6210;C&#xFF0C;&#x663E;&#x7136;num[j + a[i]]&#x80FD;&#x51D1;&#x6210;C&#xFF0C;&#x7B5B;&#x7684;&#x65F6;&#x5019;&#x6CE8;&#x610F;i &#x548C; j&#x5FAA;&#x73AF;&#x7684;&#x5148;&#x540E;&#x3002;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, a[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">bool</span> num[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">num[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j+a[i] &lt; <span class="number">10000</span>; ++j)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(num[j])</span><br><span class="line">num[j+a[i]] = <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; ++i)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(!num[i])</span><br><span class="line">{</span><br><span class="line">++ans;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x66F4;&#x65B0;&#x5931;&#x8D25;&#xFF0C;&#x770B;&#x540E;&#x7EED;&#x8FD8;&#x80FD;&#x4E0D;&#x80FD;&#x60F3;&#x51FA;&#x5176;&#x4ED6;&#x65B9;&#x6CD5;</p>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 蓝桥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+coding（理想很丰满）</title>
      <link href="/2020/04/25/Github-Coding%EF%BC%88%E7%90%86%E6%83%B3%E5%BE%88%E4%B8%B0%E6%BB%A1%EF%BC%89/"/>
      <url>/2020/04/25/Github-Coding%EF%BC%88%E7%90%86%E6%83%B3%E5%BE%88%E4%B8%B0%E6%BB%A1%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="&#x96EA;&#x7684;&#x6E90;&#x5934;"><a href="#&#x96EA;&#x7684;&#x6E90;&#x5934;" class="headerlink" title="&#x96EA;&#x7684;&#x6E90;&#x5934;"></a>&#x96EA;&#x7684;&#x6E90;&#x5934;</h3><p>&#x5F00;&#x59CB;&#x5EFA;&#x535A;&#x5BA2;&#x65F6;&#x5C31;&#x662F;&#x5C06;hexo&#x6258;&#x7BA1;&#x5230;github&#x4E0A;&#x7684;&#xFF0C;&#x4F46;&#x8BBF;&#x95EE;&#x901F;&#x5EA6;&#x5B9E;&#x5728;&#x611F;&#x4EBA;&#xFF0C;&#x4E8E;&#x662F;&#x65E9;&#x5DF2;&#x5782;&#x6D8E;Coding&#x5DF2;&#x4E45;~</p><a id="more"></a><h3 id="&#x96EA;&#x7684;&#x6559;&#x8BAD;"><a href="#&#x96EA;&#x7684;&#x6559;&#x8BAD;" class="headerlink" title="&#x96EA;&#x7684;&#x6559;&#x8BAD;"></a>&#x96EA;&#x7684;&#x6559;&#x8BAD;</h3><p>&#x51E0;&#x4E4E;&#x770B;&#x904D;&#x4E86;&#x7F51;&#x53CB;&#x4EEC;&#x7684;&#x6559;&#x7A0B;&#x540E;&#x603B;&#x7ED3;&#x5C06;hexo&#x642D;&#x5EFA;&#x5230;Coding&#x7684;&#x6B65;&#x9AA4;&#xFF0C;&#x5176;&#x5B9E;&#x4E5F;&#x5C31;&#x90A3;&#x4E48;&#x51E0;&#x6B65;&#xFF0C;<br>&#x53EF;&#x53C2;&#x8003;&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#xFF1A;<a href="https://www.jianshu.com/p/db7f68960f91" target="_blank" rel="noopener">https://www.jianshu.com/p/db7f68960f91</a><br>&#x5DF2;&#x7ECF;&#x5728;github&#x6DFB;&#x52A0;&#x8FC7;RSA&#x516C;&#x94A5;&#x7684;&#x53EF;&#x4EE5;&#x8DF3;&#x5230;&#x7B2C;2&#x6B65;</p><ol><li>&#x751F;&#x6210;RSA&#x516C;&#x94A5;<br><code>ssh-keygen -t rsa -C &quot;&#x90AE;&#x7BB1;&quot;</code></li><li>&#x65B0;&#x5EFA;Coding&#x9879;&#x76EE;&#xFF0C;&#x7C7B;&#x4F3C;github&#xFF0C;&#x9879;&#x76EE;&#x540D;&#x4E3A;<br><code>&#x7528;&#x6237;&#x540D;.coding.me</code><br>&#x63A5;&#x7740;&#x7F51;&#x53CB;&#x4EEC;&#x90FD;&#x8BF4;&#x67E5;&#x770B;Page&#x670D;&#x52A1;&#x5373;&#x53EF;&#xFF0C;&#x53EF;&#x65B0;&#x7248;&#x7684;Page&#x670D;&#x52A1;&#x5728;&#x54EA;&#xFF08;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF09;&#xFF0C;&#x75DB;&#x5B9A;&#x601D;&#x75DB;&#x540E;&#x6211;&#x5FFD;&#x7565;&#x4E86;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;</li><li>&#x6DFB;&#x52A0;SSH&#x516C;&#x94A5;<br>&#x5B98;&#x65B9;&#x4ECB;&#x7ECD;&#xFF1A;<a href="https://help.coding.net/docs/project/features/ssh.html#pageTitle" target="_blank" rel="noopener">&#x914D;&#x7F6E;SSH&#x516C;&#x94A5;</a><br>Coding&#x4E0A;&#x7684;&#x516C;&#x94A5;&#x5206;&#x4E3A;&#x8D26;&#x6237;SSH&#x548C;&#x9879;&#x76EE;SSH&#xFF0C;&#x663E;&#x7136;&#x9879;&#x76EE;SSH&#x914D;&#x7F6E;&#x540E;&#x4EC5;&#x62E5;&#x6709;&#x8BE5;&#x9879;&#x76EE;&#x7684;&#x8BBF;&#x95EE;&#x6743;&#x9650;<br>&#x7F51;&#x53CB;&#x4EEC;&#x7684;&#x6559;&#x7A0B;&#x770B;&#x5F97;&#x6211;&#x5206;&#x4E0D;&#x6E05;&#x5230;&#x5E95;&#x6DFB;&#x52A0;&#x54EA;&#x4E2A;&#x597D;&#xFF08;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF09;&#xFF0C;&#x6700;&#x7EC8;&#x6211;&#x6DFB;&#x52A0;&#x7684;&#x662F;&#x9879;&#x76EE;SSH<br>&#x4E8E;&#x662F;&#x5C06;&#x8BE5;&#x8DEF;&#x5F84;&#x7684; id_rsa.pub &#x6587;&#x4EF6;&#x590D;&#x5236;&#x5230;&#x9879;&#x76EE;SSH&#x5373;&#x53EF;</li><li>&#x4FEE;&#x6539;_config.yml&#x6587;&#x4EF6;<br>&#x7C98;&#x4E00;&#x5F20;&#x7F51;&#x53CB;&#x7684;&#x56FE;<img src="https://upload-images.jianshu.io/upload_images/5312266-08a68489f500417a.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/1054/format/webp">&#x6240;&#x4EE5;&#x6211;&#x5BF9;&#x5E94;&#x7684;&#x5C31;&#x662F;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo:</span><br><span class="line">        github: git@github.com:weayer/weayer.github.io.git,master</span><br><span class="line">        coding: git@git.coding.net:weayer/weayer.coding.me.git,master</span><br></pre></td></tr></table></figure></li></ol><p>&#x81F3;&#x6B64;&#x7406;&#x60F3;&#x60C5;&#x51B5;&#x662F;&#x987A;&#x5229;&#x5B8C;&#x6210;&#x4E86;&#xFF01;&#x9A8C;&#x8BC1;&#x4E00;&#x4E0B;<br><code>ssh -T git@github.com</code><br><code>ssh -T git@git.coding.net</code><br>&#x7136;&#x540E;&#x96BE;&#x53D7;&#x7684;&#x4E8B;&#x60C5;&#x5C31;&#x51FA;&#x73B0;&#x4E86;&#x2026;<br><img src="/2020/04/25/Github-Coding&#xFF08;&#x7406;&#x60F3;&#x5F88;&#x4E30;&#x6EE1;&#xFF09;/0425_1.jpg"><br><code>git@git.coding.net:Permission denied(publickey)</code><br>&#x95EE;&#x9898;&#xFF1A;<span style="color:blue">&#x59CB;&#x7EC8;&#x6CA1;&#x6709;&#x901A;&#x8FC7;SSH&#x5BC6;&#x94A5;&#x5C06;hexo&#x6258;&#x7BA1;&#x5230;Coding&#x4E0A;</span>&#xFF0C;&#x66F4;&#x522B;&#x63D0;&#x540E;&#x7EED;&#x7684;&#x6DFB;&#x52A0;&#x81EA;&#x5B9A;&#x4E49;&#x57DF;&#x540D;&#x4E86;&#x3002;</p><ul><li>&#x95EE;&#x9898;&#x7684;&#x89E3;&#x51B3;&#xFF08;&#x5176;&#x5B9E;&#x5E76;&#x6CA1;&#x6709;&#x5B8C;&#x5168;&#x89E3;&#x51B3;&#xFF09;&#x8981;&#x611F;&#x8C22;&#x4EE5;&#x4E0B;&#x4F18;&#x8D28;&#x535A;&#x5BA2;&#xFF1A;<br><a href="https://december2580.github.io/git-git-coding-net-Permission-denied-publickey-%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html" target="_blank" rel="noopener">https://december2580.github.io/git-git-coding-net-Permission-denied-publickey-%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</a><br>&#x5BF9;&#x8BE5;&#x7F51;&#x53CB;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#x7A0D;&#x4F5C;&#x4FEE;&#x6539;&#x5982;&#x4E0B;&#xFF08;&#x4E0D;&#x4FEE;&#x6539;&#x4F1A;&#x62A5;&#x9519;&#x554A;&#xFF09;<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.&#x6267;&#x884C;   eval <span class="code">`ssh-agent`</span></span><br><span class="line">2.&#x6267;&#x884C;   ssh-add ~/.ssh/id_rsa</span><br><span class="line">3.&#x6267;&#x884C;   ssh-add &#x2013;l</span><br><span class="line">4.&#x91CD;&#x65B0;&#x5C1D;&#x8BD5;&#x8FDE;&#x63A5;  ssh -T git@e.coding.net</span><br></pre></td></tr></table></figure></li></ul><p>&#x7ED3;&#x679C;&#x622A;&#x56FE;, &#x6CE8;&#x610F;&#x8FD9;&#x91CC;&#x662F;<code>ssh -T git@e.coding.net</code><br><img src="/2020/04/25/Github-Coding&#xFF08;&#x7406;&#x60F3;&#x5F88;&#x4E30;&#x6EE1;&#xFF09;/0425_2.jpg"><br>&#x6210;&#x529F;&#x4E86;&#xFF08;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF09;&#x4E4B;&#x524D;&#x6240;&#x6709;&#x7F51;&#x53CB;&#x90FD;&#x662F;&#x4F7F;&#x7528; <code>ssh -T git@git.coding.net</code> &#x9A8C;&#x8BC1;&#x6210;&#x529F;&#xFF0C;&#x90A3;&#x6211;&#x518D;&#x9A8C;&#x8BC1;&#x4E00;&#x4E0B;&#x5462;<br><img src="/2020/04/25/Github-Coding&#xFF08;&#x7406;&#x60F3;&#x5F88;&#x4E30;&#x6EE1;&#xFF09;/0425_3-1.jpg"><br>&#x8FD9;&#x5C31;&#x5F88;&#x96BE;&#x53D7;&#x4E86;&#xFF0C;&#x503C;&#x5F97;&#x4E00;&#x63D0;&#x7684;&#x662F;&#x6B64;&#x524D;&#x6211;&#x90FD;&#x662F;&#x5C06;&#x516C;&#x94A5;&#x6DFB;&#x52A0;&#x5230;&#x8D26;&#x53F7;SSH&#x4E0A;&#xFF0C;&#x63A5;&#x7740;&#x53C8;&#x5C1D;&#x8BD5;&#x5C06;&#x5176;&#x5220;&#x9664;&#xFF0C;&#x6DFB;&#x52A0;&#x5230;&#x9879;&#x76EE;SSH&#x4E0A;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x751F;&#x6210;&#x90E8;&#x7F72;&#x516C;&#x94A5;&#xFF1B;<br>&#x518D; <code>ssh -T git@e.coding.net</code><br><img src="/2020/04/25/Github-Coding&#xFF08;&#x7406;&#x60F3;&#x5F88;&#x4E30;&#x6EE1;&#xFF09;/0425_3-2.jpg"><br>&#x63D0;&#x793A;&#x53EF;&#x4EE5;&#x8BBF;&#x95EE;&#x5982;&#x4E0B;&#x4ED3;&#x5E93;&#x4E86;&#xFF01;&#x7D22;&#x6027;&#x5927;&#x80C6;&#x5C1D;&#x8BD5;&#xFF01;&#x628A;_config.yml&#x6587;&#x4EF6;&#x4E5F;&#x7ED9;&#x6539;&#x4E86;&#xFF01;<br><img src="/2020/04/25/Github-Coding&#xFF08;&#x7406;&#x60F3;&#x5F88;&#x4E30;&#x6EE1;&#xFF09;/0425_9.jpg"><br>&#x7136;&#x540E; <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code> &#x770B;&#x770B;&#x7ED3;&#x679C;<br><img src="/2020/04/25/Github-Coding&#xFF08;&#x7406;&#x60F3;&#x5F88;&#x4E30;&#x6EE1;&#xFF09;/0425_4.jpg"><br>&#x4F3C;&#x4E4E;&#x6709;&#x6240;&#x6210;&#x6548;&#xFF0C;github&#x548C;coding&#x90FD;&#x66F4;&#x65B0;&#x4E86;&#xFF0C;&#x6211;&#x518D;&#x9A8C;&#x8BC1;&#x4E00;&#x756A;<br><img src="/2020/04/25/Github-Coding&#xFF08;&#x7406;&#x60F3;&#x5F88;&#x4E30;&#x6EE1;&#xFF09;/0425_5.jpg"><br>&#x884C;&#x5427;&#xFF0C;&#x770B;&#x6765;&#x6CE8;&#x5B9A;&#x4E0E;<code>ssh -T git@git.coding.net</code>&#x65E0;&#x7F18;&#x4E86;&#xFF1B;<br>&#x75DB;&#x5B9A;&#x601D;&#x75DB;&#x540E;&#x6211;&#x56DE;&#x5230;&#x4E86;Coding&#x7684;&#x4ED3;&#x5E93;<code>weayer.coding.me</code>&#x4E0A;&#x770B;&#x770B;<br><img src="/2020/04/25/Github-Coding&#xFF08;&#x7406;&#x60F3;&#x5F88;&#x4E30;&#x6EE1;&#xFF09;/0425_6.jpg"><br>&#x6709;&#x70B9;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x5F3A;&#x5236;&#x8F6C;&#x6362;&#x7684;&#x610F;&#x601D;&#x54C8;&#x54C8;&#xFF0C;&#x4E0D;&#x7BA1;&#x600E;&#x4E48;&#x8BF4;&#x662F;&#x6258;&#x7BA1;&#x4E0A;&#x4E86;&#xFF0C;&#x63A5;&#x7740;&#x5C31;&#x53EF;&#x4EE5;&#x6109;&#x5FEB;&#x7684;&#x6DFB;&#x52A0;&#x81EA;&#x5B9A;&#x4E49;&#x57DF;&#x540D;&#x4E86;&#xFF1B;</p><ol><li><p>&#x963F;&#x91CC;&#x4E91;&#x4E70;&#x7684;&#x57DF;&#x540D;&#xFF0C;&#x5C31;&#x5728;&#x963F;&#x91CC;&#x4E91;&#x7684;&#x57DF;&#x540D;&#x89E3;&#x6790;&#x6DFB;&#x52A0;&#x8BB0;&#x5F55;</p><img src="/2020/04/25/Github-Coding&#xFF08;&#x7406;&#x60F3;&#x5F88;&#x4E30;&#x6EE1;&#xFF09;/0425_8.jpg"></li><li><p>&#x65B0;&#x7248;&#x7684;Coding-&#x9759;&#x6001;&#x7F51;&#x7AD9;&#xFF08;&#x4E4B;&#x524D;&#x8FD8;&#x8981;&#x8BA4;&#x8BC1;&#x4E00;&#x4E0B;&#xFF09;-&#x8BBE;&#x7F6E;&#x91CC;&#x6709;&#x81EA;&#x5B9A;&#x4E49;&#x57DF;&#x540D;&#x8BBE;&#x7F6E;&#xFF08;&#x8BBF;&#x95EE;&#x5730;&#x5740;&#x5DF2;&#x7ECF;&#x6709;<a href="http://www.weayer.top&#x8BF4;&#x660E;&#x5DF2;&#x7ECF;&#x6DFB;&#x52A0;&#x597D;&#x4E86;&#xFF09;&#xFF1B;" target="_blank" rel="noopener">www.weayer.top&#x8BF4;&#x660E;&#x5DF2;&#x7ECF;&#x6DFB;&#x52A0;&#x597D;&#x4E86;&#xFF09;&#xFF1B;</a></p><img src="/2020/04/25/Github-Coding&#xFF08;&#x7406;&#x60F3;&#x5F88;&#x4E30;&#x6EE1;&#xFF09;/0425_7.jpg">### &#x96EA;&#x7684;&#x5347;&#x534E;&#x90A3;&#x4E48;&#x81F3;&#x6B64;Github+Coding&#x7684;&#x7406;&#x60F3;&#x5927;&#x81F4;&#x5B9E;&#x73B0;&#x4E86;&#xFF0C;&#x4E0D;&#x8FC7;&#x663E;&#x7136;&#x5B58;&#x5728;&#x8FD9;&#x4E00;&#x4E9B;&#x672A;&#x77E5;&#x7684;&#x9690;&#x60A3;&#xFF0C;&#x6BD4;&#x5982;&#x8FD8;&#x6709;&#x5982;&#x4E0B;&#x9519;&#x8BEF;&#x5C1A;&#x672A;&#x89E3;&#x51B3;</li><li><p><code>ssh -T git@git.coding.net</code>&#x4F9D;&#x65E7;&#x662F;<code>git@git.coding.net:Permission denied(publickey)</code></p></li><li><p>_config.yml&#x4E2D;&#x7684;&#x4EE3;&#x7801;&#x5E93;&#x6211;&#x7ED9;&#x6539;&#x4E86;&#xFF0C;&#x4E0D;&#x662F;<code>weayer.coding.me</code>,&#x6240;&#x6709;&#x8BBF;&#x95EE;<code>weayer.coding.me</code>&#x5931;&#x8D25;</p><img src="/2020/04/25/Github-Coding&#xFF08;&#x7406;&#x60F3;&#x5F88;&#x4E30;&#x6EE1;&#xFF09;/0425_10.jpg">&#x8FD9;&#x4E48;&#x770B;&#x8FD8;&#x6709;&#x5F88;&#x591A;&#x5751;&#xFF0C;&#x7384;&#x4E4B;&#x53C8;&#x7384;&#x7684;&#x95EE;&#x9898;&#x6162;&#x6162;&#x89E3;&#x51B3;&#x5427;...</li></ol><p>&#x5199;&#x5728;&#x6700;&#x540E; &#x81EA;&#x5EFA;&#x535A;&#x5BA2;&#x4E4B;&#x8DEF;&#x9053;&#x963B;&#x4E14;&#x957F;&#xFF0C;&#x4E0D;&#x65AD;&#x6298;&#x817E;&#xFF0C;&#x5927;&#x80C6;&#x5C1D;&#x8BD5;&#xFF0C;&#x867D;&#x4E0D;&#x80FD;&#x5C3D;&#x5584;&#x5C3D;&#x7F8E;&#xFF0C;&#x603B;&#x80FD;&#x5F97;&#x5230;&#x9760;&#x8FD1;&#x6210;&#x529F;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x5982;&#x679C;&#x8BF4;&#x8273;&#x9633;&#x9AD8;&#x7167;&#x7684;&#x7406;&#x60F3;&#x96BE;&#x4EE5;&#x5B9E;&#x73B0;&#xFF0C;&#x6674;&#x7A7A;&#x4E07;&#x91CC;&#x4E5F;&#x4E0D;&#x9519;&#x561B;&#x3002;</p>]]></content>
      
      
      <categories>
          
          <category> 经验教训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 雪的教训 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模运算的运用</title>
      <link href="/2020/04/24/%E6%A8%A1%E8%BF%90%E7%AE%97%E7%9A%84%E8%BF%90%E7%94%A8/"/>
      <url>/2020/04/24/%E6%A8%A1%E8%BF%90%E7%AE%97%E7%9A%84%E8%BF%90%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>&#x4E0D;&#x5B9A;&#x671F;&#x66F4;&#x65B0;&#x5728;&#x5404;&#x7F16;&#x7A0B;&#x7F51;&#x7AD9;&#x9898;&#x76EE;&#x4E2D;<strong>&#x6A21;&#x8FD0;&#x7B97;</strong>&#x7684;&#x8FD0;&#x7528;</p><a id="more"></a><h2 id="&#x591A;&#x7EC4;&#x540C;&#x4F59;"><a href="#&#x591A;&#x7EC4;&#x540C;&#x4F59;" class="headerlink" title="&#x591A;&#x7EC4;&#x540C;&#x4F59;"></a>&#x591A;&#x7EC4;&#x540C;&#x4F59;</h2><p>  &#x82E5;&#x5B58;&#x5728;&#x5143;&#x7D20;x,&#x5BF9;&#x4E8E;&#x4E00;&#x6570;&#x7EC4;&#x4E2D;&#x4EFB;&#x610F;&#x67D0;&#x4E2A;&#x5143;&#x7D20;e&#xFF0C;&#x6EE1;&#x8DB3;<br>  e += k * x (k&#x53D6;&#x4EFB;&#x610F;&#x6574;&#x6570;)<br>  &#x5219;&#x53EA;&#x9700;<span style="color:blue">&#x6570;&#x7EC4;&#x4E00;&#x4E2D;&#x6240;&#x6709;e&#x5BF9;x&#x540C;&#x4F59;(&#x5BF9;x&#x53D6;&#x6A21;&#x7ED3;&#x679C;&#x76F8;&#x540C;)</span>&#xFF1B;<br>  &#x82E5;&#x5B58;&#x5728;&#x6709;&#x4E24;&#x4E2A;&#x5143;&#x7D20;x y,&#x5BF9;&#x4E8E;&#x6570;&#x7EC4;&#x4E00;&#x4E2D;&#x4EFB;&#x610F;&#x67D0;&#x4E2A;&#x5143;&#x7D20;e &#xFF0C;&#x6EE1;&#x8DB3;<br>  e += a<em>x+b</em>y(a b&#x53D6;&#x4EFB;&#x610F;&#x6574;&#x6570;)<br>  &#x53C8;&#x56E0;&#x4E3A; a<em>x+b</em>y = k * Gcd(a, b)  (k&#x53D6;&#x4EFB;&#x610F;&#x6574;&#x6570;)<br>  &#x5219;&#x53EA;&#x9700;<span style="color:blue">&#x6570;&#x7EC4;&#x4E00;&#x4E2D;&#x6240;&#x6709;e&#x5BF9;Gcd(a, b)&#x540C;&#x4F59;(&#x5BF9;Gcd(a, b)&#x53D6;&#x6A21;&#x7ED3;&#x679C;&#x76F8;&#x540C;)</span>;</p><blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;&#xFF1A;<a href="https://www.jisuanke.com/course/6497/467062" target="_blank">&#xB7;&#x8BA1;&#x849C;&#x5BA2;&#xB7;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;</a></p></blockquote><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong></p><ul><li>&#x7C7B;&#x63A8;&#x4E0B;&#x53BB;<br>&#x5219;&#x53EA;&#x9700; &#x6570;&#x7EC4;&#x4E00;&#x4E2D;&#x6240;&#x6709;e&#x5BF9;Gcd(&#x6570;&#x7EC4;&#x4E8C;&#x6240;&#x6709;&#x5143;&#x7D20;)&#x540C;&#x4F59;<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(!b)</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> Gcd(b, a%b);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> len1, len2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; len1 &gt;&gt; len2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">int</span> gcd;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len2; ++i)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">gcd = b[i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">gcd = Gcd(gcd, b[i]);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//cout &lt;&lt; gcd &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len1; ++i)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>]%gcd != a[i]%gcd)</span><br><span class="line">{</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><h2 id="&#x540C;&#x4F59;&#x65B9;&#x7A0B;&#xFF08;&#x6A21;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;&#xFF09;&#x6027;&#x8D28;"><a href="#&#x540C;&#x4F59;&#x65B9;&#x7A0B;&#xFF08;&#x6A21;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;&#xFF09;&#x6027;&#x8D28;" class="headerlink" title="&#x540C;&#x4F59;&#x65B9;&#x7A0B;&#xFF08;&#x6A21;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;&#xFF09;&#x6027;&#x8D28;"></a>&#x540C;&#x4F59;&#x65B9;&#x7A0B;&#xFF08;&#x6A21;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;&#xFF09;&#x6027;&#x8D28;</h2><p>&#x82E5; ax = b(mod n)<br>&#x5219; (a-b)%n = 0, a%n == b%n;<br>a&#x3001;b&#x53EF;&#x8FD0;&#x7528;&#x4E8E;&#x4E24;&#x4E2A;&#x524D;&#x7F00;&#x548C;</p><blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;<a href="http://lx.lanqiao.cn/problem.page?gpid=T444### " target="_blank" rel="noopener">&#xB7;&#x84DD;&#x6865;&#xB7;k&#x500D;&#x533A;&#x95F4;</a></p></blockquote><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong></p><ul><li>&#x524D;&#x7F00;&#x548C; + &#x540C;&#x4F59;<br>b[i]&#x8BB0;&#x5F55;a[i]&#x524D;&#x7F00;&#x548C;&#xFF0C;&#x5B50;&#x533A;&#x95F4;&#x5219;&#x53EF;&#x7528;b[i]-b[j]&#x8868;&#x793A;(0 &lt;= j &lt; i)<br>&#x6EE1;&#x8DB3;k&#x500D;&#x533A;&#x95F4;&#x53CA; (b[i]-b[j])%k==0<br>&#x4E8E;&#x662F;&#x5F88;&#x5BB9;&#x6613;&#x6709;&#x4EE5;&#x4E0B;&#x4EE3;&#x7801;<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">{</span><br><span class="line">b[i+<span class="number">1</span>] = b[i] + a[i];  <span class="comment">//&#x524D;&#x7F00;&#x548C;</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n; ++j)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>((b[j+<span class="number">1</span>] - b[i])%k == <span class="number">0</span>)</span><br><span class="line">++sum;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><p>&#x663E;&#x7136;n&#x7684;&#x5E73;&#x65B9;&#x590D;&#x6742;&#x5EA6;&#x4F1A;&#x8D85;&#x65F6;</p><ul><li>&#x4F18;&#x5316;&#x7684;&#x601D;&#x60F3;<br>k&#x500D;&#x533A;&#x95F4;&#x7684;&#x4E2A;&#x6570;&#x5373;&#x6C42;&#x591A;&#x5C11;&#x7EC4;b[i]&#x3001;b[j]&#x6EE1;&#x8DB3;<br><code>(b[i]-b[j])%k==0</code><br>&#x540C;&#x4F59;&#x6027;&#x8D28;&#x5F97; <code>b[i]%k == b[j]%k</code></li></ul><p>&#x5BF9;&#x4E8E;&#x6837;&#x4F8B;<br>Output&#xFF1A;<br>5 2<br>1 2 3 4 5<br>Input&#xFF1A;<br>6<br>&#xFF08;&#x4E00;&#xFF09;&#x5F97;&#x5230;&#x524D;&#x7F00;&#x548C;b[] 1 3 6 10 15<br>&#xFF08;&#x4E8C;&#xFF09;&#x5BF9; b[i]%k &#x5F97;&#x5230;0 1 1 0 0 1&#xFF08;&#x52A0;&#x4E86;&#x4E2A;0&#xFF0C;&#x7279;&#x6B8A;&#x5904;&#x7406;b[i]%k==0&#x7684;&#x60C5;&#x51B5;&#xFF09;1&#x7684;&#x4E2A;&#x6570;&#x4E3A;3&#xFF0C;0&#x7684;&#x4E2A;&#x6570;&#x4E3A;3<br>&#x7ED3;&#x679C;&#x6709;&#x591A;&#x5C11;&#x7EC4;&#x5462;&#xFF1F; C23 + C23 = 6&#x3002;<br>&#x6700;&#x7EC8;&#x4F18;&#x5316;&#x4EE3;&#x7801;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">100005</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">mp[<span class="number">0</span>] = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">{</span><br><span class="line">b[i+<span class="number">1</span>] = (b[i] + a[i]) % k;</span><br><span class="line">++mp[b[i+<span class="number">1</span>]];</span><br><span class="line">}</span><br><span class="line">ll sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">{</span><br><span class="line">sum += (ll)mp[i] * (mp[i]<span class="number">-1</span>) / <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ;++i)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">}</span><br><span class="line">solve(); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数学知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 模运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4月1日我成功地被mysql给愚弄了</title>
      <link href="/2020/04/01/4%E6%9C%881%E6%97%A5%E6%88%91%E6%88%90%E5%8A%9F%E5%9C%B0%E8%A2%ABmysql%E7%BB%99%E6%84%9A%E5%BC%84%E4%BA%86/"/>
      <url>/2020/04/01/4%E6%9C%881%E6%97%A5%E6%88%91%E6%88%90%E5%8A%9F%E5%9C%B0%E8%A2%ABmysql%E7%BB%99%E6%84%9A%E5%BC%84%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h3 id="&#x96EA;&#x7684;&#x6E90;&#x5934;"><a href="#&#x96EA;&#x7684;&#x6E90;&#x5934;" class="headerlink" title="&#x96EA;&#x7684;&#x6E90;&#x5934;"></a>&#x96EA;&#x7684;&#x6E90;&#x5934;</h3><p>4&#x6708;1&#x65E5;&#x524D;&#x65E5;&#x611A;&#x8822;&#x5730;&#x4F7F;&#x7528;SQLyog&#x5220;&#x9664;&#x4E86;&#x7CFB;&#x7EDF;&#x81EA;&#x5E26;&#x7684;mysql&#x6570;&#x636E;&#x5E93;&#x3002;</p><h3 id="&#x96EA;&#x7684;&#x6559;&#x8BAD;"><a href="#&#x96EA;&#x7684;&#x6559;&#x8BAD;" class="headerlink" title="&#x96EA;&#x7684;&#x6559;&#x8BAD;"></a>&#x96EA;&#x7684;&#x6559;&#x8BAD;</h3><a id="more"></a><p>&#x4E8E;&#x662F;&#x5C31;&#x6709;&#x4E86;&#xFF0C;&#x201D;windows&#x65E0;&#x6CD5;&#x542F;&#x52A8;mysql&#x670D;&#x52A1;&#xFF08;&#x4F4D;&#x4E8E;&#x672C;&#x5730;&#x8BA1;&#x7B97;&#x673A;&#x4E0A;&#x3002;&#x9519;&#x8BEF;1067&#xFF1A;&#x8FDB;&#x7A0B;&#x610F;&#x5916;&#x7EC8;&#x6B62;&#xFF09;&#x201D;&#xFF1B;<br>&#x63A5;&#x7740;&#x4E0A;&#x7F51;&#x641C;&#x7D22;&#x540E;&#x53D1;&#x73B0;&#x611A;&#x8822;&#x7684;&#x4EBA;&#x4E0D;&#x6B62;&#x6211;&#x4E00;&#x4E2A;&#xFF0C;&#x4E8E;&#x662F;&#x5728;&#x5404;&#x4F4D;&#x7F51;&#x53CB;&#x7684;&#x6210;&#x529F;&#x201D;&#x5F15;&#x5BFC;&#x201D;&#x4E0B;&#x5148;&#x540E;&#x53D1;&#x751F;&#x4E86; <strong>1067&#x9519;&#x8BEF;&#x3001;1045&#x9519;&#x8BEF;&#x3001;10061&#x9519;&#x8BEF;</strong>&#xFF1B;<br>&#x5F53;&#x65F6;&#x53EF;&#x628A;&#x6211;&#x611A;&#x5F04;&#x7684;&#x591F;&#x591F;&#x7684;&#xFF0C;&#x771F;&#x662F;&#x6BD4;&#x5B85;&#x5BB6;&#x4E24;&#x4E2A;&#x6708;&#x8FD8;&#x8981;&#x591F;&#x591F;&#x7684;&#xFF1B;<br>&#x540E;&#x6765;&#x75DB;&#x5B9A;&#x601D;&#x75DB;&#xFF0C;&#x5199;&#x4E0B;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#xFF0C;&#x4F9B;&#x8BF8;&#x4F4D;&#x201D;&#x5F15;&#x5BFC;&#x201D;&#x3002;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br>&#x867D;&#x7136;&#x7F51;&#x53CB;&#x7684;&#x65B9;&#x6CD5;&#x9C7C;&#x9F99;&#x6DF7;&#x6742;&#xFF0C;&#x8FD8;&#x662F;&#x8981;&#x611F;&#x8C22;&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#xFF1A;<br>&#xFF08;&#x4E00;&#xFF09;<a href="https://blog.csdn.net/qq_37915248/article/details/83005946?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/qq_37915248/article/details/83005946?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a><br>&#xFF08;&#x4E8C;&#xFF09;<a href="https://blog.csdn.net/lzf_hlh/article/details/80885139" target="_blank" rel="noopener">https://blog.csdn.net/lzf_hlh/article/details/80885139</a></p><ol><li><p>&#x9996;&#x5148;&#x5220;&#x9664;&#x7684;mysql&#x8981;&#x7ED9;&#x4EBA;&#x5BB6;&#x8FD8;&#x56DE;&#x6765;&#xFF1A;</p><blockquote><p>&#x590D;&#x5236;&#x5B89;&#x88C5;&#x8DEF;&#x5F84;&#x4E2D;&#x7684; C:\ProgramData\MySQL\MySQL Server 5.5\data\mysql<br>&#x5230; C:\ProgramData\MySQL\MySQL Server 5.5\data</p></blockquote></li><li><p>&#x4E0D;&#x7BA1;&#x662F;1067&#x8FD8;&#x662F;1045&#x8FD8;&#x662F;10061&#x9519;&#x8BEF;&#xFF0C;&#x90FD;&#x53EF;&#x5F52;&#x4E8E;&#x4E24;&#x70B9;</p><blockquote><p>&#xFF08;&#x4E00;&#xFF09;&#x7AEF;&#x53E3;&#x95EE;&#x9898;<br>&#x670D;&#x52A1;&#x5173;&#x95ED;&#x4E86;&#x7684;&#x8981;&#x6253;&#x5F00;&#xFF0C;&#x6216;&#x8005;&#x7AEF;&#x53E3;&#x88AB;&#x591A;&#x4E2A;&#x670D;&#x52A1;&#x5360;&#x7528;&#x4E86;&#x7684;&#x53EA;&#x4FDD;&#x7559;&#x4E00;&#x4E2A;</p><img src="/2020/04/01/4&#x6708;1&#x65E5;&#x6211;&#x6210;&#x529F;&#x5730;&#x88AB;mysql&#x7ED9;&#x611A;&#x5F04;&#x4E86;/1.jpg">&#xFF08;&#x4E8C;&#xFF09;&#x7528;&#x6237;&#x540D;&#x548C;&#x5BC6;&#x7801;&#x9519;&#x8BEF;&#x4E00;&#xFF09;&#x7F51;&#x53CB;&#x8BF4;&#x5148;&#x5173;&#x95ED;MySQL&#x670D;&#x52A1;&#xFF0C;&#x7136;&#x800C;&#x6211;&#x5E76;&#x6CA1;&#x6709;&#x5173;&#x95ED;&#x3002;&#x4E8C;&#xFF09;&#x6253;&#x5F00;&#x5B89;&#x88C5;&#x8DEF;&#x5F84;&#x4E2D;&#x7684; C:\Program Files (x86)\MySQL\MySQL Server 5.5\my.ini &#x5728; [mysqlld] &#x4E0B;&#x6DFB;&#x52A0; skip-grant-tables<img src="/2020/04/01/4&#x6708;1&#x65E5;&#x6211;&#x6210;&#x529F;&#x5730;&#x88AB;mysql&#x7ED9;&#x611A;&#x5F04;&#x4E86;/2.jpg">&#x4E09;&#xFF09;cmd&#x8F93;&#x5165; mysql -u root -p &#x7136;&#x540E;&#x56DE;&#x8F66;&#x518D;&#x56DE;&#x8F66;&#xFF08;&#x5BC6;&#x7801;&#x4E3A;&#x7A7A;&#xFF09;     &#x6CE8;&#xFF1A;**skip-grant-tables** &#x4F5C;&#x7528;&#x662F; MYSQL&#x670D;&#x52A1;&#x5668;&#x4E0D;&#x52A0;&#x8F7D;&#x6743;&#x9650;&#x5224;&#x65AD;&#xFF0C;&#x4EFB;&#x4F55;&#x7528;&#x6237;&#x90FD;&#x80FD;&#x8BBF;&#x95EE;&#x6570;&#x636E;&#x5E93;&#xFF0C;&#x6240;&#x4EE5;&#x5BC6;&#x7801;&#x4E3A;&#x7A7A;&#x3002;&#x56DB;&#xFF09;&#x63A5;&#x7740;&#x8FDB;&#x5165;&#x4E86;MySQL</blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;use mysql&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; //&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x6570;&#x636E;&#x5E93;</span><br><span class="line">mysql&gt;update user set password=password(&quot;&#x65B0;&#x5BC6;&#x7801;&quot;) where user=&quot;root&quot;;&#xA0;&#xA0; //&#x4FEE;&#x6539;&#x6570;&#x636E;&#x5E93;&#x7684;&#x5BC6;&#x7801;</span><br><span class="line">mysql&gt;flush privileges;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; //&#x5237;&#x65B0;&#x6570;&#x636E;&#x5E93;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>&#x4E94;&#xFF09;&#x539F;&#x6765;&#x6DFB;&#x52A0;&#x5230; my.ini &#x7684; skip-grant-tables &#x53EF;&#x4EE5;&#x5220;&#x9664;&#x4E86;&#xFF0C;<br>&#x91CD;&#x542F;&#x7535;&#x8111;&#xFF0C;&#x6B63;&#x5E38;&#x8FDB;&#x5165;cmd&#xFF0C;&#x8F93;&#x5165; mysql -u root -p &#x56DE;&#x8F66;&#x8F93;&#x5165;&#x65B0;&#x5BC6;&#x7801;&#x6210;&#x529F;&#x3002;<br>    &#x6CE8;&#xFF1A;&#x7F51;&#x53CB;&#x7684;&#x505A;&#x6CD5;&#x5927;&#x591A;&#x4E3A;&#x91CD;&#x542F;MySQL&#x670D;&#x52A1;&#xFF0C;&#x56E0;&#x4E3A;&#x5F00;&#x59CB;&#x7684;&#x65F6;&#x5019;&#x5173;&#x95ED;&#x4E86;&#x3002;&#x7136;&#x800C;&#x7ECF;&#x5C1D;&#x8BD5;&#x5931;&#x8D25;&#xFF0C;&#x770B;&#x6765;&#x8FD8;&#x662F;&#x91CD;&#x542F;&#x7535;&#x8111;&#x80FD;&#x89E3;&#x51B3;&#x8BF8;&#x591A;&#x7384;&#x800C;&#x53C8;&#x7384;&#x7684;&#x95EE;&#x9898;&#x3002;</p></blockquote><h3 id="&#x96EA;&#x7684;&#x5347;&#x534E;"><a href="#&#x96EA;&#x7684;&#x5347;&#x534E;" class="headerlink" title="&#x96EA;&#x7684;&#x5347;&#x534E;"></a>&#x96EA;&#x7684;&#x5347;&#x534E;</h3><p>&#x5199;&#x5728;&#x6700;&#x540E; &#x9047;&#x5230;&#x68D8;&#x624B;&#x6076;&#x5FC3;&#x9EBB;&#x6728;&#x5F00;&#x59CB;&#x6000;&#x7591;&#x4EBA;&#x751F;&#x7684;&#x95EE;&#x9898;&#x65F6;&#xFF0C;&#x4E0D;&#x59A8;&#x5148;&#x653E;&#x4E00;&#x653E;&#xFF0C;&#x505A;&#x70B9;&#x513F;&#x559C;&#x6B22;&#x7684;&#x4E8B;&#xFF0C;&#x751F;&#x6D3B;&#x8FD8;&#x6709;&#x5F88;&#x591A;&#x7F8E;&#x597D;&#x53EF;&#x4EE5;&#x53BB;&#x6316;&#x6398;&#xFF0C;&#x97EC;&#x5149;&#x517B;&#x6666;&#xFF0C;&#x4ECE;&#x5584;&#x5982;&#x6D41;&#x3002;</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 经验教训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 雪的教训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dp-ST表（求解RMP）</title>
      <link href="/2020/03/28/Dp-ST/"/>
      <url>/2020/03/28/Dp-ST/</url>
      
        <content type="html"><![CDATA[<p>RMQ&#xFF08;Range Minimum/Maximum Query&#xFF09;&#x5373;&#x533A;&#x95F4;&#x6700;&#x503C;&#x67E5;&#x8BE2;&#xFF1A;<br>&#x5BF9;&#x4E8E;&#x957F;&#x5EA6;&#x4E3A;n&#x7684;&#x6570;&#x5217;A&#xFF0C;&#x6C42;&#x89E3;&#x82E5;&#x5E72;RMQ(i, j) (i,j&lt;=n),&#x8FD4;&#x56DE;A[i]~A[j]&#x7684;&#x6700;&#x503C;&#x3002;<br>ST&#xFF08;Sparse Table&#xFF09;&#x53EF;&#x5728;&#x7EBF;&#x5904;&#x7406;RMQ&#x95EE;&#x9898;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;O&#xFF08;nlogn&#xFF09;&#x5185;&#x8FDB;&#x884C;&#x9884;&#x5904;&#x7406;&#xFF0C;&#x7136;&#x540E;&#x5728;O(1)&#x5185;&#x67E5;&#x8BE2;&#x3002;</p><a id="more"></a><blockquote><p>&#x611F;&#x8C22;&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#xFF08;&#x5199;&#x7684;&#x5F88;&#x8BE6;&#x7EC6;&#xFF0C;&#x8FD9;&#x91CC;&#x53EA;&#x7A0D;&#x4F5C;&#x603B;&#x7ED3;&#xFF09;:<br><a href="https://www.jianshu.com/p/8eebc50ad28a" target="_blank" rel="noopener">https://www.jianshu.com/p/8eebc50ad28a</a><br><a href="https://www.cnblogs.com/zyf0163/p/4782133.html" target="_blank" rel="noopener">https://www.cnblogs.com/zyf0163/p/4782133.html</a></p></blockquote><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong></p><ol><li>&#x9884;&#x5904;&#x7406;&#xFF08;O(nlogn)&#xFF09;</li></ol><p>&#xB7; &#x786E;&#x5B9A;&#x6570;&#x5217;A[i]&#x81F3;A[j]&#x7684;&#x6700;&#x503C;&#xFF0C;&#x4E24;&#x91CD;&#x5FAA;&#x73AF;n^2&#x590D;&#x6742;&#x5EA6;&#xFF0C;dp&#x7684;&#x601D;&#x60F3;&#x662F;:<br>dp[i][j] &#x8BB0;&#x5F55;&#x7B2C;i&#x4F4D;~&#x7B2C;i&#x4F4D;&#x5F00;&#x59CB;&#x7684;&#x8FDE;&#x7EED;2^j&#x4F4D;&#x4E2D;&#x7684;&#x6700;&#x503C;&#xFF0C;dp[i][j]&#x7EF4;&#x62A4;&#x7684;&#x533A;&#x95F4;&#x662F;[i,i+2^j-1],&#x6784;&#x5EFA;&#x7684;&#x8FC7;&#x7A0B;&#x5C06;&#x533A;&#x95F4;&#x5206;&#x6210;&#x4E24;&#x534A;&#xFF0C;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;&#x5982;&#x4E0B;</p><blockquote><p>dp[i][j]=max/min(dp[i][j-1], dp[i+2^(j-1)][j-1])</p></blockquote><p>&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ST</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span>&lt;&lt;j) &lt;= n; ++j)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span> &lt;= n; ++i)</span><br><span class="line">        {</span><br><span class="line">            maxn[i][j] = max(maxn[i][j<span class="number">-1</span>], maxn[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">            minn[i][j] = min(minn[i][j<span class="number">-1</span>], minn[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x5F53;&#x7136;&#x8FD8;&#x6709;&#x8F93;&#x5165;&#x65F6;&#x7684;&#x9884;&#x5904;&#x7406;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    maxn[i][<span class="number">0</span>] = minn[i][<span class="number">0</span>] = t;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol start="2"><li>&#x67E5;&#x8BE2;(O(1))</li></ol><ul><li>&#x67E5;&#x8BE2;&#x533A;&#x95F4;[i, j]&#x7684;&#x6700;&#x503C;<br>&#xB7;&#x7136;&#x800C;dp&#x80FD;&#x5F97;&#x5230;[i, i+2^j-1]&#x7684;&#x6700;&#x503C;&#xFF0C;&#x8FD9;&#x91CC;&#x5F88;&#x5BB9;&#x6613;&#x60F3;&#x5230;&#x5229;&#x7528;<code>k=log2(j-i+1)</code>,&#x6C42;dp[i][k]&#x5C31;&#x53EF;&#x4EE5;&#x5417;&#xFF1F;<br>&#x6CA1;&#x90A3;&#x4E48;&#x7B80;&#x5355;&#xFF0C;k&#x8981;&#x53D6;&#x6574;&#x6240;&#x4EE5;dp&#x8303;&#x56F4;&#x4F1A;&#x7F29;&#x5C0F;&#xFF0C;&#x8FD9;&#x91CC;&#x8FD4;&#x56DE;&#x7684;&#x662F;<blockquote><p>return  max(dp[i][k], dp[j-2^k+1][k])</p></blockquote></li></ul><p>&#x7EF4;&#x62A4;&#x4E24;&#x533A;&#x95F4;[i][i+2^k-1], [j-2^k+1][j]&#xFF0C;&#x6BEB;&#x65E0;&#x7591;&#x95EE;&#x5982;&#x679C;&#x4E24;&#x533A;&#x95F4;&#x6709;&#x4EA4;&#x96C6;&#xFF0C;&#x5373;<code>i+2^k-1 &lt;= j-2^k+1</code>&#x8FD9;&#x4E48;&#x8FD4;&#x56DE;&#x5C31;&#x6CA1;&#x95EE;&#x9898;,&#x5173;&#x4E8E;&#x8BC1;&#x660E;&#xFF0C;&#x53C2;&#x8003;&#x7684;&#x7B2C;&#x4E8C;&#x7BC7;&#x535A;&#x5BA2;&#x5199;&#x7684;&#x5F88;&#x6E05;&#x695A;&#xFF0C;&#x8FD9;&#x91CC;&#x4E0D;&#x518D;&#x8D58;&#x8FF0;&#x3002;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> k = log2(j-i+<span class="number">1.0</span>);    </span><br><span class="line">    <span class="comment">//int k = log(j-i+1.0) / log(2.0);</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;max:&quot;</span> &lt;&lt; max(maxn[i][k], maxn[j-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;min:&quot;</span> &lt;&lt; min(minn[i][k], minn[j-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, q;   <span class="comment">//n&#x4E2A;&#x6570;&#x91CC;&#x67E5;&#x627E;q&#x6B21;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> maxn[N][<span class="number">25</span>];</span><br><span class="line"><span class="keyword">int</span> minn[N][<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ST</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">20</span>; ++j)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span> &lt;= n; ++i)</span><br><span class="line">        {</span><br><span class="line">            maxn[i][j] = max(maxn[i][j<span class="number">-1</span>], maxn[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">            minn[i][j] = min(minn[i][j<span class="number">-1</span>], minn[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> k = log2(j-i+<span class="number">1.0</span>);    </span><br><span class="line">    <span class="comment">//int k = log(j-i+1.0) / log(2.0);</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;max:&quot;</span> &lt;&lt; max(maxn[i][k], maxn[j-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;min:&quot;</span> &lt;&lt; min(minn[i][k], minn[j-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        maxn[i][<span class="number">0</span>] = minn[i][<span class="number">0</span>] = t;</span><br><span class="line">    }</span><br><span class="line">    ST(n);</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        solve(x, y);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>·【蓝桥】晚会节目单（ST表）</title>
      <link href="/2020/03/28/%E8%93%9D%E6%A1%A5-%E6%99%9A%E4%BC%9A%E8%8A%82%E7%9B%AE%E5%8D%95/"/>
      <url>/2020/03/28/%E8%93%9D%E6%A1%A5-%E6%99%9A%E4%BC%9A%E8%8A%82%E7%9B%AE%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p>&#x9898;&#x76EE;&#x6765;&#x6E90;&#xFF08;&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#xFF09;&#xFF1A;<a href="https://blog.csdn.net/qq_43746332/article/details/105145456" target="_blank" rel="noopener">https://blog.csdn.net/qq_43746332/article/details/105145456</a><br>&#x4EBA;&#x5BB6;&#x7528;&#x7EBF;&#x6BB5;&#x6811;&#x6211;&#x53EF;&#x73A9;&#x4E0D;&#x6765;&#xFF0C;&#x5148;&#x5B66;&#x597D;ST&#x8868;&#x5427;</p><a id="more"></a><blockquote><p>&#x9898;&#x76EE;&#x5206;&#x6790;<br>&#x4E0D;&#x6539;&#x53D8;&#x8282;&#x76EE;&#x987A;&#x5E8F;&#xFF0C;&#x6BCF;&#x6B21;&#x90FD;&#x5E0C;&#x671B;&#x597D;&#x770B;&#x503C;value&#x6700;&#x5927;&#xFF0C;&#x5E76;&#x4E0D;&#x662F;&#x603B;&#x7684;value&#x6700;&#x5927;<br>&#x56E0;&#x6B64;n&#x7EC4;&#x8282;&#x76EE;&#x4E2D;&#x9009;&#x62E9;m&#x6B21;&#x7684;&#x539F;&#x59CB;&#x505A;&#x6CD5;&#x5E94;&#x662F;&#xFF1A;<br>&#x5C3A;&#x53D6;&#x6CD5;&#x5F00;&#x59CB;front=0, tail=n-m &#x5728;[front, tail]&#x533A;&#x95F4;&#x5185;&#x67E5;&#x627E;value&#x6700;&#x5927;&#x503C;&#xFF0C;&#x8BB0;&#x5F55;&#x4E0B;&#x6807;ans&#xFF0C;&#x66F4;&#x65B0;front&#xFF0C;tail<br>&#x63A5;&#x7740;front=ans+1, ++tail &#x67E5;&#x8BE2;m&#x6B21;&#x6570;&#x5373;&#x53EF;&#xFF0C;&#x590D;&#x6742;&#x5EA6;O(n^2),&#x4F18;&#x5316;&#x65B9;&#x6CD5;ST&#x8868;&#xFF0C;&#x590D;&#x6742;&#x5EA6;O(n*logn)</p></blockquote><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>ST&#x8868;&#x53EF;&#x5728;&#x591A;&#x6B21;&#x67E5;&#x8BE2;&#x533A;&#x95F4;&#x6700;&#x503C;&#x65F6;&#x5C06;&#x590D;&#x6742;&#x5EA6;&#x964D;&#x81F3; O(n*logn)<br>&#x5173;&#x4E8E;ST&#x8868;&#x8BE6;&#x7EC6;&#x6784;&#x5EFA;&#x53EF;&#x53C2;&#x8003;&#x6211;&#x7684;&#xFF1A; <a href="https://www.weayer.top/2020/03/28/Dp-ST/">https://www.weayer.top/2020/03/28/Dp-ST/</a><br>&#x8FD9;&#x91CC;&#x7A0D;&#x5FAE;&#x4E0D;&#x540C;&#x7684;&#x662F;&#x4E0D;&#x4EC5;&#x8981;&#x6C42;&#x5F97;&#x533A;&#x95F4;[l,r]&#x7684;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x5173;&#x952E;&#x8981;&#x8BB0;&#x5F55;&#x4E0B;&#x6807;&#xFF08;&#x56E0;&#x4E3A;&#x5C3A;&#x53D6;&#x7684;&#x9700;&#x8981;&#xFF09;<br>&#x6240;&#x4EE5;ST&#x8868;&#x7684;&#x9884;&#x5904;&#x7406;&#x3001;&#x67E5;&#x8BE2;&#x5747;&#x7A0D;&#x4F5C;&#x4FEE;&#x6539;<br>&#x539F;dp&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;&#xFF1A;</p><blockquote><p>dp[i][j]=max(dp[i][j-1], dp[i+2^(j-1)][j-1])</p></blockquote><p>&#x73B0;dp&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;&#xFF1A;</p><blockquote><p>int ans1 = dp[i][j-1];<br>  int ans2 = dp[i+pow_(j-1)][j-1];<br>  dp[i][j] = a[ans1]&gt;=a[ans2] ? ans1: ans2;</p></blockquote><p>&#x539F;&#x67E5;&#x8BE2;&#x64CD;&#x4F5C;&#xFF1A;</p><blockquote><p>int k = log2(r-l+1.0);<br>  return max(dp[l][k], dp[r-2^k+1][k]);<br>&#x73B0;&#x67E5;&#x8BE2;&#x64CD;&#x4F5C;&#xFF1A;<br>int k = log2(r-l+1.0);<br> int ans1 = dp[l][k];<br> int ans2 = dp[r-2^k+1][k];<br> return a[ans1]&gt;=a[ans2] ? ans1: ans2;</p></blockquote><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">100005</span>][<span class="number">25</span>];</span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow_</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ST</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        dp[i][<span class="number">0</span>] = i;       <span class="comment">//&#x4E0D;&#x540C;&#x7684;&#x662F;&#xFF0C;dp&#x8BB0;&#x5F55;&#x6700;&#x503C;&#x7684;&#x4E0B;&#x6807;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; pow_(j) &lt; m; ++j)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i+pow_(j<span class="number">-1</span>) &lt; m; ++i)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> ans1 = dp[i][j<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">int</span> ans2 = dp[i+pow_(j<span class="number">-1</span>)][j<span class="number">-1</span>];</span><br><span class="line">            dp[i][j] = a[ans1]&gt;=a[ans2] ? ans1: ans2;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> k = log2(r-l+<span class="number">1.0</span>);</span><br><span class="line">    <span class="keyword">int</span> ans1 = dp[l][k];</span><br><span class="line">    <span class="keyword">int</span> ans2 = dp[r-pow_(k)+<span class="number">1</span>][k];</span><br><span class="line">    <span class="keyword">return</span> a[ans1]&gt;=a[ans2] ? ans1: ans2;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m&gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">int</span> front = <span class="number">0</span>, tail = m-n, k = <span class="number">0</span>;</span><br><span class="line">    ST();</span><br><span class="line">    <span class="comment">// for(;;)</span></span><br><span class="line">    <span class="comment">// {</span></span><br><span class="line">    <span class="comment">//     int x, y;</span></span><br><span class="line">    <span class="comment">//     cin &gt;&gt; x &gt;&gt; y;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; solve(x, y) &lt;&lt;endl; </span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">   <span class="keyword">while</span>(tail&lt;m &amp;&amp; front&lt;=tail) <span class="comment">//&#x5C3A;&#x53D6;&#x6CD5;&#xFF0C;&#x67E5;&#x627E;n&#x6B21;</span></span><br><span class="line">   {</span><br><span class="line">       <span class="keyword">int</span> ans = solve(front, tail);</span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt; a[ans] &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">       front = ans+<span class="number">1</span>;</span><br><span class="line">       tail++;</span><br><span class="line">   }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 查找 </tag>
            
            <tag> 蓝桥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Extend_Eculid</title>
      <link href="/2020/03/11/Extend-Eculid/"/>
      <url>/2020/03/11/Extend-Eculid/</url>
      
        <content type="html"><![CDATA[<p>Extend_Eculid&#x6269;&#x5C55;&#x6B27;&#x51E0;&#x91CC;&#x5F97;&#x7B97;&#x6CD5;&#xFF1A;ax + by = Gcd(a,b)</p><a id="more"></a><p>&#x611F;&#x8C22;&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#xFF1A;<a href="https://blog.csdn.net/syz201558503103/article/details/76512144" target="_blank">&#x6269;&#x5C55;&#x6B27;&#x51E0;&#x91CC;&#x5FB7;&#x7B97;&#x6CD5;&#x8BE6;&#x89E3;</a><br>&#x5148;&#x56DE;&#x987E;&#x4E00;&#x4E0B;&#x6B27;&#x51E0;&#x91CC;&#x5F97;&#x7B97;&#x6CD5;&#x6C42;Gcd(a, b)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span>(b, a%b);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x5BF9;&#x4E8E;<code>ax + by = Gcd(a,b)</code>&#x7684;&#x6C42;&#x89E3;&#xFF0C;&#x6CE8;&#x610F;a&#xFF0C;b&#x8981;&#x6C42;&#x4E3A;&#x975E;&#x8D1F;&#x6574;&#x6570;&#xFF0C;&#x5E76;&#x4E14;&#x8BE5;&#x65B9;&#x7A0B;&#x4E00;&#x5B9A;&#x6709;&#x89E3;</p><blockquote><p>&#x5148;&#x63A8;&#x5BFC;&#x51FA;&#x4E00;&#x7EC4;&#x7279;&#x89E3;$x_0$&#x5427;<br>&#x6B27;&#x51E0;&#x91CC;&#x5F97;&#x7B97;&#x6CD5;&#x5229;&#x7528;&#x7684;&#x7B49;&#x5F0F;:$Gcd(a, b) = Gcd(b, a%b) $<br>&#x4E8E;&#x662F;&#x8FD9;&#x91CC;&#x6709;&#xFF1A;$ax+by = bx+(a%b)y $<br>$bx_1+(a%b)y_1 $<br>$= bx_1+(a-a/b*b)y_1<br>= ay_1+b(x_1-(a/b)y_1)$</p></blockquote><ul><li>&#x90A3;&#x4E48;&#x53EF;&#x4EE5;&#x5728;&#x9012;&#x5F52;&#x6C42;Gcd&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x8BA1;&#x7B97;<code>ax + by = Gcd(a,b)</code>&#x4E86;&#xFF1A;<br>&#x4F9D;&#x636E;&#x4E0A;&#x9762;&#x7684;$ax+by = ay_1+b(x_1-(a/b)y_1)$<br>&#x4EE4;&#x4E0A;&#x4E00;&#x6DF1;&#x5EA6;&#x7684;<code>x</code>&#x4E3A;&#x4E0B;&#x4E00;&#x6DF1;&#x5EA6;&#x7684;<code>y</code>&#xFF0C;&#x4E0A;&#x4E00;&#x6DF1;&#x5EA6;&#x7684;<code>y</code>&#x4E3A;&#x4E0B;&#x4E00;&#x6DF1;&#x5EA6;&#x7684;<code>x-(a/b)y</code><br>&#x9012;&#x5F52;&#x7684;&#x51FA;&#x53E3;&#x5373;<code>b = 0,x = 1, y = 0</code><br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Extend_Eculid</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>{               <span class="comment">//&#x6C42;&#x89E3;ax + by = Gcd(a,b) </span></span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    {</span><br><span class="line">        x = <span class="number">1</span>; y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// Extend_Eculid(b, a%b, x, y);</span></span><br><span class="line">    <span class="comment">// int t = x;</span></span><br><span class="line">    <span class="comment">// x = y;</span></span><br><span class="line">    <span class="comment">// y = t-(a/b)*y;</span></span><br><span class="line">    <span class="comment">// &#x7B49;&#x4E8E;&#x4E0B;&#x9762;&#x8BED;&#x53E5;</span></span><br><span class="line">    Extend_Eculid(b, a%b, y, x);</span><br><span class="line">    y = y - a/b*x;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>&#x901A;&#x8FC7;&#x4EE5;&#x4E0A;&#x63A8;&#x5BFC;&#x53EF;&#x5F97;&#x5230;&#x4E00;&#x7EC4;&#x7279;&#x89E3;x0<br>$ax_1+by_1 = ax_2+by_2$ ,&#x540C;&#x65F6;&#x9664;&#x4EE5;Gcd(a,b)<br>$a&#x2019;(x_1-x_2) = b&#x2019;(y_2-y_1)$<br>&#x9664;&#x4EE5;Gcd(a,b)&#x540E; $a&#x2019; b&#x2019;$ &#x4E92;&#x7D20;<br>&#x5219;$x_1-x_2 = t\times b,y_2-y_1 = t\times a$(t=&#x2026;-2,-1,0,1,2&#x2026;)<br>&#x5F97;&#x901A;&#x89E3; $x = x_0+t\times b/ Gcd(a,b)$ (t=&#x2026;-2,-1,0,1,2&#x2026;)<br>y&#x7684;&#x89E3;&#x6839;&#x636E;x&#x53EF;&#x8BA1;&#x7B97;&#x5F97;&#x51FA;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数学知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ax+By=C问题</title>
      <link href="/2020/03/11/ax-by-c%E9%97%AE%E9%A2%98/"/>
      <url>/2020/03/11/ax-by-c%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>&#x603B;&#x7ED3;&#x603B;&#x7ED3; Ax+By=C<br><span style="color:#00cc33"></span></p><a id="more"></a><h3 id="Ax-By-C&#x7684;&#x89E3;&#x7684;&#x8BA8;&#x8BBA;-&#x4EC5;A-B&#x4E3A;&#x5E38;&#x6570;"><a href="#Ax-By-C&#x7684;&#x89E3;&#x7684;&#x8BA8;&#x8BBA;-&#x4EC5;A-B&#x4E3A;&#x5E38;&#x6570;" class="headerlink" title="Ax+By=C&#x7684;&#x89E3;&#x7684;&#x8BA8;&#x8BBA;(&#x4EC5;A,B&#x4E3A;&#x5E38;&#x6570;)"></a>Ax+By=C&#x7684;&#x89E3;&#x7684;&#x8BA8;&#x8BBA;(&#x4EC5;A,B&#x4E3A;&#x5E38;&#x6570;)</h3><p>&#x8BA8;&#x8BBA;&#x4E00;&#x4E0B;&#x8BE5;&#x4E0D;&#x5B9A;&#x65B9;&#x7A0B;&#x7684;&#x89E3;&#x4E0E;C&#x7684;&#x53D6;&#x503C;&#x5B58;&#x5728;&#x4EC0;&#x4E48;&#x5173;&#x8054;&#xFF1A;</p><ol><li>&#x82E5;A,B&#x4E92;&#x8D28;&#xFF0C;&#x5219;&#x5BF9;&#x4EFB;&#x610F;&#x7684;C,<span style="color:#00cc33">&#x6EE1;&#x8DB3;&#x7B49;&#x5F0F;&#x7684;x,y&#x4E00;&#x5B9A;&#x6709;&#x89E3;&#x4E14;&#x6709;&#x65E0;&#x7A77;&#x591A;&#x4E2A;</span>&#x3002;<br>&#x82E5;&#x8FD8;&#x8981;&#x6C42;x&#xFF0C;y&#x7684;&#x89E3;&#x975E;&#x8D1F;&#xFF0C;&#x90A3;&#x4E48;<span style="color:#00cc33">&#x6EE1;&#x8DB3;Ax+By=C&#x7684;&#x65E0;&#x89E3;&#x7684;C&#x7684;&#x4E2A;&#x6570;&#x662F;&#x6709;&#x9650;&#x7684;</span>&#xFF0C;C&#x6700;&#x5927;&#x53D6;<br>max{C|C&#x5BFC;&#x81F4;&#x65E0;&#x89E3;}=A<em>B-(A+B)&#x3002;**</em>&#x6CE8;&#xFF1A;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x5F53;C&#x5927;&#x4E8E;max&#x503C;&#xFF0C;&#x4E00;&#x5B9A;&#x6709;&#x89E3;&#x3002;</li><li>&#x82E5;A,B&#x4E0D;&#x4E92;&#x8D28;&#xFF0C;&#x5219;&#x5BF9;&#x4EFB;&#x610F;C,&#x4E0D;&#x80FD;&#x4FDD;&#x8BC1;x&#xFF0C;y&#x4E00;&#x5B9A;&#x6709;&#x89E3;&#xFF1B;<br>&#x8FD9;&#x65F6;&#x5F53;&#x4E14;&#x4EC5;&#x5F53; C%GCD(A,B)==0 &#xFF0C;&#x4E0D;&#x5B9A;&#x65B9;&#x7A0B;&#x6709;&#x89E3;&#xFF1B;<br>***&#x6CE8;&#xFF1A;&#x4E0D;&#x80FD;&#x4FDD;&#x8BC1;&#x6709;&#x89E3;&#x5373;<span style="color:#00cc33">&#x6EE1;&#x8DB3;Ax+By=C&#x7684;&#x65E0;&#x89E3;&#x7684;C&#x7684;&#x4E2A;&#x6570;&#x4E3A;INF</span></li></ol><p>&#x4F8B;&#x9898;&#x5949;&#x4E0A;&#xFF1A;</p><ul><li><a href="https://www.weayer.top/2020/04/28/%E8%93%9D%E6%A1%A5-%E5%8C%85%E5%AD%90%E5%87%91%E6%95%B0/" target="_blank">&#xB7;&#x3010;&#x84DD;&#x6865;&#x3011;&#xB7;&#x4E70;&#x4E0D;&#x5230;&#x7684;&#x6570;&#x76EE;</a></li><li><a href="https://www.weayer.top/2020/04/28/%E8%93%9D%E6%A1%A5-%E5%8C%85%E5%AD%90%E5%87%91%E6%95%B0/" target="_blank">&#xB7;&#x3010;&#x84DD;&#x6865;&#x3011;&#xB7;&#x5305;&#x5B50;&#x51D1;&#x6570;</a><h3 id="Ax-By-C&#x7684;&#x89E3;-A-B-C&#x5747;&#x4E3A;&#x5E38;&#x6570;"><a href="#Ax-By-C&#x7684;&#x89E3;-A-B-C&#x5747;&#x4E3A;&#x5E38;&#x6570;" class="headerlink" title="Ax+By=C&#x7684;&#x89E3;(A,B,C&#x5747;&#x4E3A;&#x5E38;&#x6570;)"></a>Ax+By=C&#x7684;&#x89E3;(A,B,C&#x5747;&#x4E3A;&#x5E38;&#x6570;)</h3>&#x4E0D;&#x5B9A;&#x65B9;&#x7A0B;&#x7684;&#x89E3;&#x5206;&#x4E24;&#x79CD;&#x60C5;&#x51B5;:</li></ul><ol><li>C%GCD(A,B)==0 &#x65B9;&#x7A0B;&#x6709;&#x89E3;&#xFF0C;&#x7279;&#x522B;&#x7684;GCD(A,B)=1,&#x65B9;&#x7A0B;&#x6709;&#x552F;&#x4E00;&#x89E3;&#x3002;</li><li>&#x53CD;&#x4E4B;&#x65E0;&#x89E3;&#x3002;<br>&#x7B2C;&#x2460;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8BE5;&#x65B9;&#x7A0B;&#x7684;&#x89E3;&#x540C;&#x65F6;&#x53EF;&#x8F6C;&#x6362;&#x4E3A;&#x6A21;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;(&#x540C;&#x4F59;&#x65B9;&#x7A0B;)&#x7684;&#x89E3;&#xFF1A;<br>&#x6C42;&#x89E3;&#x6A21;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;(&#x540C;&#x4F59;&#x65B9;&#x7A0B;)ax=b(mod n)</li></ol><ul><li>&#x8BBE;d = gcd(a, n), &#x5047;&#x5B9A;&#x5BF9;&#x6574;&#x6570;x&#x2019;, y&#x2019;, &#x6709;d = ax&#x2019; + ny&#x2019;&#xFF0C;<br>&#x5982;&#x679C;d | b, &#x5219;&#x65B9;&#x7A0B;ax = b(mod n)&#x6709;&#x4E00;&#x4E2A;&#x89E3;&#x7684;&#x503C;&#x4E3A;x0, &#x6EE1;&#x8DB3;&#xFF1A;<br>x0 = x&#x2019;(b / d)(mod n&#xFF09;<br>&#x4E8E;&#x662F;&#x6C42;&#x5F97;x&#x2019;&#x7684;&#x89E3;&#x5C31;&#x53EF;&#x5F97;&#x5230;x0&#x7684;&#x89E3;&#x5373;&#x65B9;&#x7A0B; ax-ny=b&#x7684;&#x89E3;<br>&#x800C;ax&#x2019;+ny&#x2019;=d&#x7684;&#x89E3;&#x53C8;&#x9700;&#x8981;&#x7528;&#x5230;Extend_Eculid&#x5B9A;&#x7406;<br>&#x6709;&#x5173;Extend_Eculid&#x7684;&#x901A;&#x89E3;&#x53EF;&#x53C2;&#x8003;&#x6211;&#x7684;&#xFF1A;<a href="https://www.weayer.top/2020/03/11/Extend-Eculid/" target="_blank">Extend_Eculid</a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">Extend_Eculid</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>{               <span class="comment">//&#x6C42;&#x89E3;ax + by = Gcd(a,b) &#x51FD;&#x6570;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x4E3A;GCD(a,b)</span></span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    {</span><br><span class="line">        x = <span class="number">1</span>; y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        ll temp = Extend_Eculid(b, a%b, y, x);</span><br><span class="line">        y = y - a/b*x;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><p>&#x8F93;&#x51FA;&#x4E00;&#x7EC4;&#x7279;&#x89E3;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ll a, n, b, d, x, y; </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;n&gt;&gt;b;        <span class="comment">//ax=b(mod n)</span></span><br><span class="line">    d= Extend_Eculid(a, n, &amp;x, &amp;y);    <span class="comment">//&#x8FD4;&#x56DE;&#x503C;d = Gcd(a, n),&#x5E76;&#x5F97;&#x5230;&#x4E00;&#x7EC4;&#x7279;&#x89E3;x&apos;,y&apos; </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Gcd(a,n) = %lld\n&quot;</span>, d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x0=%lld, y0=%d\n&quot;</span>, x, y);</span><br><span class="line">    <span class="keyword">if</span>(b%d)            <span class="comment">//&#x5F53;d|b&#xFF0C;&#x65B9;&#x7A0B;&#x624D;&#x6709;&#x89E3;  </span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> x0 = x*(b/d)%n; </span><br><span class="line">        <span class="keyword">int</span> y0 = (b-a*x0)/n;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&#x7279;&#x89E3;&#xFF1A;%d %d\n&quot;</span>, x0, y0);</span><br><span class="line">            </span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&#x5F53;&#x7136;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x4E00;&#x7EC4;x0&#x4E86;&#x53EF;&#x4EE5;&#x7B97;&#x4E00;&#x4E0B;&#x5176;&#x4ED6;&#x901A;&#x89E3;</span><br><span class="line">&#x200B;```c++</span><br><span class="line"><span class="keyword">int</span> x1 = x0 + i*(n/d);</span><br></pre></td></tr></table></figure><p>&#x5BF9;&#x4E8E;&#x7279;&#x522B;&#x7684; GCD(A,B)=1 &#x6709;&#x552F;&#x4E00;&#x89E3;&#xFF0C;&#x5176;&#x89E3;&#x5373;&#x4E3A;a&#x7684;&#x9006;<br>&#x6709;&#x5173;&#x9006;&#x5143;&#x53EF;&#x53C2;&#x8003;&#x6211;&#x7684;&#xFF1A; <a href="https://www.weayer.top/2020/02/28/Inverse/">https://www.weayer.top/2020/02/28/Inverse/</a></p>]]></content>
      
      
      <categories>
          
          <category> 数学知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>·【51nod-1009】数字1的数量</title>
      <link href="/2020/03/10/51nod-1009%E6%95%B0%E5%AD%971%E7%9A%84%E6%95%B0%E9%87%8F/"/>
      <url>/2020/03/10/51nod-1009%E6%95%B0%E5%AD%971%E7%9A%84%E6%95%B0%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;&#xFF1A;<a href="http://www.51nod.com/Challenge/Problem.html#problemId=1009" target="_blank" rel="noopener">http://www.51nod.com/Challenge/Problem.html#problemId=1009</a></p></blockquote><a id="more"></a><h3 id="&#x9898;&#x89E3;1"><a href="#&#x9898;&#x89E3;1" class="headerlink" title="&#x9898;&#x89E3;1"></a>&#x9898;&#x89E3;1</h3><p>&#x611F;&#x8C22;&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#xFF1A; <a href="https://blog.csdn.net/adusts/article/details/80730383" target="_blank" rel="noopener">https://blog.csdn.net/adusts/article/details/80730383</a><br>&#x4EE5;&#x4E0A;&#x535A;&#x5BA2;&#x5199;&#x7684;&#x5F88;&#x8BE6;&#x7EC6;&#xFF0C;&#x8FD9;&#x91CC;&#x7A0D;&#x4F5C;&#x603B;&#x7ED3;<br><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5982;&#x8F93;&#x5165;&#xFF1A;n=43102&#xFF0C;&#x5219;&#x8F93;&#x51FA;&#x7684;&#x662F;1`4321&#x4E2D;1&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;</p><ul><li>1.&#x904D;&#x5386;43102&#x7684;&#x6BCF;&#x4E00;&#x4F4D;(i=1,2,3,4,5)&#xFF0C;&#x904D;&#x5386;&#x987A;&#x5E8F;1-n&#xFF0C;&#x8BB0;&#x5F55;&#x7B2C;i&#x4F4D;&#x51FA;&#x73B0;1&#x7684;&#x6B21;&#x6570;ans&#xFF0C;&#x7136;&#x540E;&#x76F8;&#x52A0;&#x5F97;&#x7ED3;&#x679C;<br>2.&#x5BF9;&#x4E8E;&#x7B2C;i&#x4F4D;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x5C0F;&#x4E8E;1(&#x5982;&#x5341;&#x4F4D;&#x6570;1)&#xFF0C;ans = 431<em>10     {10,11,19,&#x2026;,43110,43119}<br>  &#x5982;&#x679C;&#x5927;&#x4E8E;1(&#x5982;&#x5343;&#x4F4D;&#x6570;3)&#xFF0C;ans = (4+1)</em>1000 {1000,1001,&#x2026;,1999,21000,&#x2026;,21999,31000,&#x2026;41999}<br>  &#x5982;&#x679C;&#x7B49;&#x4E8E;1(&#x5982;&#x767E;&#x4F4D;&#x6570;1)&#xFF0C;ans = 43*100+2   {100,&#x2026;,199,1100,&#x2026;,43199,43101,43102}<br>  (&#x6CE8;&#xFF1A;&#x94FE;&#x63A5;&#x535A;&#x5BA2;&#x4E2D;&#x7B49;&#x4E8E;1&#x7684;&#x60C5;&#x51B5;&#x6709;&#x70B9;&#x9519;&#x8BEF;)<br>&#x6309;&#x6B64;&#x89C4;&#x5F8B;&#xFF0C;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ll i = <span class="number">1</span>, front = <span class="number">0</span>, after = <span class="number">0</span>, now = <span class="number">0</span>;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n/i)</span><br><span class="line">    {</span><br><span class="line">        front = n / (<span class="number">10</span>*i);</span><br><span class="line">        after = n % i;            <span class="comment">// after = n - n/i%i;</span></span><br><span class="line">        now = n % (<span class="number">10</span>*i) / i;    <span class="comment">// now = n/i%10;</span></span><br><span class="line">        <span class="keyword">if</span>(now == <span class="number">0</span>)</span><br><span class="line">            ans += front*i;</span><br><span class="line">        <span class="keyword">if</span>(now == <span class="number">1</span>)</span><br><span class="line">            ans += (front*i + after + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(now &gt; <span class="number">1</span>)</span><br><span class="line">            ans += (front+<span class="number">1</span>)*i;</span><br><span class="line">        i *= <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><h3 id="&#x9898;&#x89E3;2-&#x6570;&#x4F4D;dp"><a href="#&#x9898;&#x89E3;2-&#x6570;&#x4F4D;dp" class="headerlink" title="&#x9898;&#x89E3;2-&#x6570;&#x4F4D;dp"></a>&#x9898;&#x89E3;2-&#x6570;&#x4F4D;dp</h3><p>&#x53C2;&#x8003;&#x6211;&#x7684;dp-digit: <a href="https://www.weayer.top/2020/03/10/dp-digit/">https://www.weayer.top/2020/03/10/dp-digit/</a><br><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>1.&#x5BF9;&#x4E8E;10^i&#x5185;&#x8BB0;&#x5F55;1&#x51FA;&#x73B0;&#x6B21;&#x6570;<br>2.&#x540C;&#x6837;&#x5982;n=43102&#xFF0C;&#x904D;&#x5386;&#x6BCF;&#x4E00;&#x4F4D;&#x6570;&#xFF0C;&#x4F46;&#x904D;&#x5386;&#x987A;&#x5E8F;&#x4ECE;n&#x5230;1&#xFF0C;&#x8FD8;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x662F;&#x8FD9;&#x91CC;&#x5C06;&#x5176;&#x62C6;&#x4E3A;m[] = {40000,3000,100,0,2}<br>&#x5BF9;&#x4E8E;&#x7B2C;i&#x4F4D;&#xFF0C;&#x8BB0;&#x5F55;m[i-1]&#x5185;1&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;res&#xFF0C;&#x800C;10^i&#x5185;1&#x7684;&#x6B21;&#x6570;&#x5DF2;&#x7ECF;&#x5F97;&#x5230;&#x4E86;(&#x5982;&#x5343;&#x4F4D;&#x6570;3&#xFF0C;ans = 3*dp[3])<br>&#x5F53;&#x7136;&#x5355;&#x72EC;&#x8BA1;&#x7B97;ans&#x7136;&#x540E;&#x7D2F;&#x52A0;&#x80AF;&#x5B9A;&#x662F;&#x4E0D;&#x884C;&#x7684;&#xFF0C;&#x7B2C;i&#x4F4D;&#x6570;&#x7684;&#x8D21;&#x732E;&#x503C;&#x8FD8;&#x4E0E;&#x4F4E;&#x4F4D;&#x7684;&#x6570;&#x6709;&#x5173;(&#x5982;&#x5343;&#x4F4D;&#x6570;3&#xFF0C;&#x4EC5;&#x8BB0;&#x5F55;&#x4E86;3000&#x5185;1&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x540E;&#x9762;102&#x540C;&#x6837;&#x4F1A;&#x7528;&#x5230;3)&#x6240;&#x4EE5;&#x7C7B;&#x4F3C;&#x9898;&#x89E3;1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll a[<span class="number">25</span>], dp[<span class="number">25</span>], digit[<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span>      <span class="comment">//&#x7EDF;&#x8BA1;10^(i-1)&#x5185;&#x5404;&#x6570;&#x51FA;&#x73B0;&#x6B21;&#x6570;,dp[i]&#x5B58;&#x50A8; </span></span></span><br><span class="line"><span class="function"></span>{               <span class="comment">//dp[i] = 10*dp[i-1] + 10^(i-1)</span></span><br><span class="line">    digit[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; ++i)</span><br><span class="line">    {</span><br><span class="line">        dp[i] = dp[i<span class="number">-1</span>]*<span class="number">10</span> + digit[i<span class="number">-1</span>];</span><br><span class="line">        digit[i] = digit[i<span class="number">-1</span>] * <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll m)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ll ans = m, len = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(m)</span><br><span class="line">    {</span><br><span class="line">        a[++len] = m % <span class="number">10</span>;</span><br><span class="line">        m /= <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = len; k &gt;=<span class="number">1</span>; --k)</span><br><span class="line">    {</span><br><span class="line">        sum += a[k] * dp[k<span class="number">-1</span>];</span><br><span class="line">        ans -= a[k] * digit[k<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(a[k] == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[k] == <span class="number">1</span>)</span><br><span class="line">            sum += (ans + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sum += digit[k<span class="number">-1</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dp-digit</title>
      <link href="/2020/03/10/dp-digit/"/>
      <url>/2020/03/10/dp-digit/</url>
      
        <content type="html"><![CDATA[<p>&#x6570;&#x4F4D;dp&#x4E00;&#x822C;&#x5C31;&#x662F;&#x8981;&#x7EDF;&#x8BA1;&#x4E00;&#x4E2A;&#x533A;&#x95F4;[l,r]&#x5185;&#x6EE1;&#x8DB3;&#x4E00;&#x4E9B;&#x6761;&#x4EF6;&#x6570;&#x7684;&#x4E2A;&#x6570;&#x3002;</p><a id="more"></a><blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;: <a href="http://www.51nod.com/Challenge/Problem.html#problemId=1042" target="_blank" rel="noopener">http://www.51nod.com/Challenge/Problem.html#problemId=1042</a></p></blockquote><p>&#x611F;&#x8C22;&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#xFF1A;<a href="https://www.cnblogs.com/y2823774827y/p/10301145.html" target="_blank" rel="noopener">https://www.cnblogs.com/y2823774827y/p/10301145.html</a><br>&#x4EE5;&#x4E0A;&#x535A;&#x5BA2;&#x5199;&#x7684;&#x5F88;&#x8BE6;&#x7EC6;&#xFF0C;&#x8FD9;&#x91CC;&#x7A0D;&#x4F5C;&#x603B;&#x7ED3;<br><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong></p><ul><li><p>1.&#x9996;&#x5148;&#x8BA1;&#x7B97;10^i&#x5185;1-9&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x4E0B;&#x9762;&#x7B80;&#x79F0;&#x4E3A;&#x5404;&#x6570;&#x8D21;&#x732E;&#x503C;b<a href="j=0,1,2,...,9">j</a><br>dp[i] = 10<em>dp[i-1] + 10^(i-1)<br>&#x5176;&#x5B9E;&#x5F88;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x5982;i=1,&#x663E;&#x7136;10&#x4EE5;&#x5185;1-9&#x5404;&#x6570;&#x8D21;&#x732E;&#x503C;&#x5747;&#x4E3A;1;i=2,100&#x4EE5;&#x5185;&#x5404;&#x6570;&#x8D21;&#x732E;&#x503C;10</em>1+10</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll a[<span class="number">25</span>], digit[<span class="number">25</span>], dp[<span class="number">25</span>], countl[<span class="number">20</span>], countr[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span>        <span class="comment">//&#x7EDF;&#x8BA1;10^(i-1)&#x5185;&#x5404;&#x6570;&#x51FA;&#x73B0;&#x6B21;&#x6570;,dp[i]&#x5B58;&#x50A8; </span></span></span><br><span class="line"><span class="function"></span>{                <span class="comment">//dp[i] = 10*dp[i-1] + 10^(i-1)</span></span><br><span class="line">    digit[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; ++i)</span><br><span class="line">    {</span><br><span class="line">        dp[i] = (dp[i<span class="number">-1</span>]&lt;&lt;<span class="number">3</span>) + (dp[i<span class="number">-1</span>]&lt;&lt;<span class="number">1</span>) + digit[i<span class="number">-1</span>];</span><br><span class="line">        digit[i] = (digit[i<span class="number">-1</span>]&lt;&lt;<span class="number">3</span>) + (digit[i<span class="number">-1</span>]&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>2.&#x63A5;&#x7740;&#x8BA1;&#x7B97;&#x6570;n&#x5185;&#x5404;&#x6570;&#x8D21;&#x732E;&#x503C;<br>&#x5982;n=43102&#xFF0C;&#x904D;&#x5386;&#x6BCF;&#x4E00;&#x4F4D;&#x6570;&#xFF0C;&#x904D;&#x5386;&#x987A;&#x5E8F;&#x4ECE;n&#x5230;1&#xFF0C;&#x5C06;&#x5176;&#x62C6;&#x4E3A;{40000,3000,100,0,2}<br>&#x5BF9;&#x4E8E;&#x7B2C;i&#x4F4D;&#xFF0C;&#x8BB0;&#x5F55;2&#x9879; 1)&#x62C6;&#x5206;&#x7684;&#x7B2C;i&#x4F4D;&#x6570;&#x8D21;&#x732E;&#x503C;(&#x5982;i=1,&#x4E3A;b[j]+=4*dp[5])<br>2)&#x7B2C;i&#x4F4D;&#x6570;&#x7684;&#x8D21;&#x732E;&#x503C;(&#x5982;i=1,&#x4E3A;b[j]+=(3102+1))</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> m, ll *b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ll len = <span class="number">0</span>, ans = m;</span><br><span class="line">    <span class="keyword">while</span>(m)        <span class="comment">//&#x5B57;&#x7B26;&#x4E32;&#x5B58;&#x50A8;m </span></span><br><span class="line">    {</span><br><span class="line">        a[++len] = m % <span class="number">10</span>;</span><br><span class="line">        m /= <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(ll k = len; k&gt;=<span class="number">1</span>; --k)    </span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">            b[i] += dp[k<span class="number">-1</span>] * a[k];        <span class="comment">//10^(k-1)&#x5185;&#x5404;&#x6570;&#x7684;&#x8D21;&#x732E;&#x503C; </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a[k]; ++i)</span><br><span class="line">            b[i] += digit[k<span class="number">-1</span>];        <span class="comment">//&#x7B2C;k&#x4F4D;&#x6570;&#x7684;&#x8D21;&#x732E;&#x503C;,&#x4E0D;&#x5305;&#x542B;a[k] </span></span><br><span class="line">        ans -= a[k]*digit[k<span class="number">-1</span>];    <span class="comment">//m = m % ( 10^(k-1) ) </span></span><br><span class="line">        b[a[k]] += (ans + <span class="number">1</span>);        <span class="comment">//a[k]&#x7684;&#x8D21;&#x732E;&#x503C; </span></span><br><span class="line">        b[<span class="number">0</span>] -= digit[k<span class="number">-1</span>];        <span class="comment">//0&#x7684;&#x8D21;&#x732E;&#x503C;&#x5728;&#x4E4B;&#x524D;&#x52A0;&#x4E0A;&#x7684;&#x8981;&#x5220;&#x53BB; </span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>3.&#x6700;&#x540E;&#x53EF;&#x4EE5;&#x6C42;[a,b]&#x95F4;&#x5404;&#x6570;&#x7684;&#x8D21;&#x732E;&#x503C;&#xFF0C;&#x7B97;&#x4E24;&#x6B21;&#x5373;&#x53EF; solve(b) - solve[a-1]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    init();</span><br><span class="line">    ll m, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">    solve(m<span class="number">-1</span>, countl);</span><br><span class="line">    solve(n, countr);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, countl[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, countr[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,countr[i] - countl[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>·【NOIP-2015】·【POJ-2456】</title>
      <link href="/2020/03/07/NOIP-2015-POJ-2456/"/>
      <url>/2020/03/07/NOIP-2015-POJ-2456/</url>
      
        <content type="html"><![CDATA[<h3 id="&#x9898;&#x76EE;1-NOIP-2015"><a href="#&#x9898;&#x76EE;1-NOIP-2015" class="headerlink" title="&#x9898;&#x76EE;1[NOIP-2015]"></a>&#x9898;&#x76EE;1[NOIP-2015]</h3><blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;&#xFF1A;<a href="https://nanti.jisuanke.com/t/T2028" target="_blank" rel="noopener">https://nanti.jisuanke.com/t/T2028</a></p></blockquote><a id="more"></a><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>1.&#x6C42;&#x6700;&#x77ED;&#x8DDD;&#x79BB;&#x7684;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x679C;&#x65AD;&#x4E8C;&#x5206;&#xFF0C;&#x6CE8;&#x610F;&#x8FD9;&#x91CC;&#x5C06;&#x8D77;&#x70B9;&#xFF0C;&#x7EC8;&#x70B9;&#x90FD;&#x770B;&#x4F5C;&#x77F3;&#x5934;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">a[n+<span class="number">1</span>]=l;        <span class="comment">//&#x5C06;&#x8D77;&#x70B9;&#x3001;&#x7EC8;&#x70B9;&#x90FD;&#x770B;&#x505A;&#x77F3;&#x5934;</span></span><br></pre></td></tr></table></figure><p>2.&#x5224;&#x65AD;&#x6700;&#x77ED;&#x8DDD;&#x79BB;middle&#x662F;&#x5426;&#x53EF;&#x884C;&#x65F6;&#xFF0C;&#x904D;&#x5386;&#x6570;&#x7EC4;&#xFF0C;&#x82E5;&#x4E24;&#x4E24;&#x8DDD;&#x79BB;&#x5C0F;&#x4E8E;middle&#xFF0C;&#x77F3;&#x5934;&#x79FB;&#x8D70;++cnt</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lower_bound</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span>    <span class="comment">//&#x6C42;&#x89E3;&#x6700;&#x77ED;&#x8DDD;&#x79BB;&#x7684;&#x6700;&#x5927;&#x503C;</span></span></span><br><span class="line"><span class="function"></span>{                    <span class="comment">//&#x5373;&#x4E8C;&#x5206;&#x67E5;&#x627E;1-l </span></span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> middle;        <span class="comment">//middle&#x4E3A;&#x6700;&#x77ED;&#x8DDD;&#x79BB; </span></span><br><span class="line">        middle= (low+high)&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(judge(middle))    <span class="comment">//judge(middle)&#x4E3A;&#x771F;&#x5219;&#x7EE7;&#x7EED;&#x67E5;&#x627E;(middle+1)`high</span></span><br><span class="line">        {</span><br><span class="line">            ans= middle;</span><br><span class="line">            low= middle+<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>        <span class="comment">//judge(middle)&#x4E3A;&#x5047;&#x5219;&#x67E5;&#x627E;low`(middle-1) </span></span><br><span class="line">            high=middle<span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span>    <span class="comment">//judge()&#x4E3A;&#x771F;&#x5219;&#x6EE1;&#x8DB3;&#xFF1A;&#x81F3;&#x591A;&#x79FB;&#x8D70;m&#x4E2A;&#x77F3;&#x5934;&#xFF0C;&#x6700;&#x77ED;&#x8DDD;&#x79BB;&#x4E3A;x </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> count= <span class="number">0</span>, now=<span class="number">0</span>;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(a[i]- a[now]&lt; x)   <span class="comment">//&#x76F8;&#x90BB;&#x77F3;&#x5934;&#x95F4;&#x8DDD;&#x79BB;&#x82E5;&#x5C0F;&#x4E8E;x,&#x77F3;&#x5934;&#x5FC5;&#x987B;&#x79FB;&#x8D70; </span></span><br><span class="line">            count++;</span><br><span class="line">        <span class="keyword">else</span>         </span><br><span class="line">            now= i;</span><br><span class="line">    }          <span class="comment">//&#x6700;&#x7EC8;&#x5F97;&#x5230;count&#x503C;&#x4E3A;&#x81F3;&#x5C11;&#x79FB;&#x8D70;&#x77F3;&#x5934;&#x4E2A;&#x6570; </span></span><br><span class="line">    <span class="keyword">return</span> count &lt;= m;   <span class="comment">//&#x81F3;&#x5C11;&#x79FB;&#x8D70;&#x4E2A;&#x6570;count&#x4E0D;&#x5927;&#x4E8E;&#x6700;&#x591A;&#x80FD;&#x79FB;&#x8D70;&#x4E2A;&#x6570;m&#x65F6;,&#x4E3A;&#x771F; </span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x9898;&#x76EE;2-POJ-2456"><a href="#&#x9898;&#x76EE;2-POJ-2456" class="headerlink" title="&#x9898;&#x76EE;2[POJ-2456]"></a>&#x9898;&#x76EE;2[POJ-2456]</h3><blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;&#xFF1A;<a href="https://vjudge.net/problem/POJ-2456" target="_blank" rel="noopener">https://vjudge.net/problem/POJ-2456</a></p></blockquote><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>1.&#x540C;&#x6837;&#x6C42;&#x6700;&#x77ED;&#x8DDD;&#x79BB;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x65E0;&#x9700;&#x589E;&#x52A0;&#x8D77;&#x70B9;&#x7EC8;&#x70B9;&#xFF0C;&#x6CE8;&#x610F;&#x8981;&#x6392;&#x5E8F;<br>2.&#x9009;&#x62E9;&#x5976;&#x725B;&#x6240;&#x5728;&#x4F4D;&#x7F6E;&#xFF0C;&#x5373;&#x4E0A;&#x9898;&#x786E;&#x5B9A;&#x77F3;&#x5934;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x90A3;&#x4E48;&#x8BB0;&#x5F55;&#x7A7A;&#x4F4D;&#x7F6E;&#xFF0C;&#x5373;&#x4E0A;&#x9898;&#x9700;&#x8981;&#x79FB;&#x8D70;&#x7684;&#x77F3;&#x5934;&#x6570;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span>       <span class="comment">//judge()&#x4E3A;&#x771F;&#x5219;&#x6EE1;&#x8DB3;&#xFF1A;&#x653E;&#x7F6E;m&#x5934;&#x5976;&#x725B;&#xFF0C;&#x6700;&#x77ED;&#x8DDD;&#x79BB;&#x4E3A;x </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(l[i] - l[now] &lt; x)   <span class="comment">//&#x76F8;&#x90BB;&#x8DDD;&#x79BB;&#x82E5;&#x5C0F;&#x4E8E;x,&#x4E0D;&#x80FD;&#x653E;&#x5976;&#x725B;(&#x77F3;&#x5934;&#x5FC5;&#x987B;&#x79FB;&#x8D70;) </span></span><br><span class="line">        {</span><br><span class="line">            ++cnt;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            now = i;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> cnt &lt;= (n-m);    <span class="comment">//&#x6700;&#x5C11;&#x7A7A;&#x4F4D;&#x7F6E;&#x6570;cnt&#x4E0D;&#x5927;&#x4E8E;n-m&#xFF0C;&#x4E3A;&#x771F;</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    sort(l, l+n);</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>, high = l[n<span class="number">-1</span>] - l[<span class="number">0</span>]+<span class="number">1</span>, ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> middle = (low + high) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(judge(middle))</span><br><span class="line">        {</span><br><span class="line">            ans = middle;</span><br><span class="line">            low = middle + <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            high = middle - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>heap</title>
      <link href="/2020/03/05/heap/"/>
      <url>/2020/03/05/heap/</url>
      
        <content type="html"><![CDATA[<p>&#x5806;&#x662F;&#x4E00;&#x79CD;&#x7279;&#x6B8A;&#x7684;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x6709;&#x6700;&#x5C0F;&#x5806;&#x548C;&#x6700;&#x5927;&#x5806;&#x4E24;&#x79CD;&#x3002;</p><a id="more"></a><p>&#x5982;&#x56FE;&#x4E3A;&#x6700;&#x5C0F;&#x5806;&#xFF0C;&#x6EE1;&#x8DB3;&#x6240;&#x6709;&#x7236;&#x7ED3;&#x70B9;&#x90FD;&#x6BD4;&#x5B50;&#x7ED3;&#x70B9;&#x5C0F;&#x3002;&#x6700;&#x5927;&#x5806;&#x53CD;&#x4E4B;&#x3002;<br>&#x663E;&#x7136;&#x6700;&#x5C0F;&#x5806;&#x7684;&#x7279;&#x6027;&#x662F;&#x6839;&#x7ED3;&#x70B9;&#x7684;&#x503C;&#x6700;&#x5C0F;&#x3002;<br><img width="50%" src="/2020/03/05/heap/1.png"></p><h2 id="&#x6784;&#x5EFA;&#x6700;&#x5C0F;&#x5806;"><a href="#&#x6784;&#x5EFA;&#x6700;&#x5C0F;&#x5806;" class="headerlink" title="&#x6784;&#x5EFA;&#x6700;&#x5C0F;&#x5806;"></a>&#x6784;&#x5EFA;&#x6700;&#x5C0F;&#x5806;</h2><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>1.&#x628A;n&#x4E2A;&#x5143;&#x7D20;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x5806;&#xFF0C;&#x6CE8;&#x610F;&#x8FD9;&#x91CC;&#x727A;&#x7272;&#x4E86;h[0]&#x5B58;&#x50A8;&#xFF0C;&#x5C06;n&#x4E2A;&#x7ED3;&#x70B9;&#x81EA;&#x9876;&#x5411;&#x4E0B;&#xFF0C;&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x7684;&#x65B9;&#x5F0F;&#x4ECE;1&#x5230;n&#x7F16;&#x7801;&#x3002;&#x8FD9;&#x6837;&#x4FBF;&#x5C06;n&#x4E2A;&#x7ED3;&#x70B9;&#x8F6C;&#x6362;&#x4E3A;&#x4E00;&#x68F5;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811;&#x3002;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> h[]={<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>};</span><br><span class="line"><span class="keyword">int</span> n=<span class="number">8</span>;    <span class="comment">//&#x5B58;&#x50A8;&#x5806;&#x4E2D;&#x5143;&#x7D20;&#x4E2A;&#x6570;&#xFF0C;&#x5373;&#x5806;&#x7684;&#x5927;&#x5C0F;</span></span><br></pre></td></tr></table></figure><p>2.&#x4ECE;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x975E;&#x53F6;&#x7ED3;&#x70B9;(&#x7F16;&#x53F7;&#x4E3A;n/2)&#x5F00;&#x59CB;&#x5230;&#x6839;&#x7ED3;&#x70B9;(&#x7F16;&#x53F7;&#x4E3A;1)&#x9010;&#x4E2A;&#x626B;&#x63CF;&#xFF0C;&#x6BCF;&#x6B21;&#x626B;&#x63CF;&#x5C31;&#x662F;&#x5C06;&#x7ED3;&#x70B9;&#x5411;&#x4E0B;&#x8C03;&#x6574;&#x3002;<br>&#x6CE8;&#xFF1A;&#x5411;&#x4E0B;&#x8C03;&#x6574;&#x5373;&#x8BA9;&#x5B50;&#x6811;&#x7B26;&#x5408;&#x5806;&#x7684;&#x7279;&#x6027;&#x3002;<br><img width="60%" src="/2020/03/05/heap/2.png"><br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">()</span>    <span class="comment">//&#x6784;&#x5EFA;&#x6700;&#x5C0F;&#x5806; </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> i;      <span class="comment">//&#x4ECE;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x975E;&#x53F6;&#x7ED3;&#x70B9;&#x5230;&#x7B2C;1&#x4E2A;&#x7ED3;&#x70B9;&#x4F9D;&#x6B21;&#x5411;&#x4E0A;&#x8C03;&#x6574; </span></span><br><span class="line">    <span class="keyword">for</span>(i = n/<span class="number">2</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        siftdown(i);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x5411;&#x4E0B;&#x8C03;&#x6574;"><a href="#&#x5411;&#x4E0B;&#x8C03;&#x6574;" class="headerlink" title="&#x5411;&#x4E0B;&#x8C03;&#x6574;"></a>&#x5411;&#x4E0B;&#x8C03;&#x6574;</h3><p>&#x4ECE;&#x7F16;&#x53F7;&#x4E3A;i&#x7684;&#x7ED3;&#x70B9;&#x5F00;&#x59CB;&#x5411;&#x4E0B;&#x8C03;&#x6574;&#xFF0C;&#x56E0;&#x4E3A;&#x8981;&#x6784;&#x5EFA;&#x6700;&#x5C0F;&#x5806;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x8BA9;&#x5B50;&#x6811;&#x4E2D;&#x7236;&#x7ED3;&#x70B9;&#x59CB;&#x7EC8;&#x662F;&#x6700;&#x5C0F;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x5B50;&#x7ED3;&#x70B9;&#x6BD4;&#x7236;&#x7ED3;&#x70B9;&#x5C0F;&#xFF0C;&#x5C31;&#x4EA4;&#x6362;&#xFF0C;&#x7EE7;&#x7EED;&#x5411;&#x4E0A;&#x8C03;&#x6574;&#x3002;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span>    <span class="comment">//&#x4EA4;&#x6362;&#x5806;&#x4E2D;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x503C; </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    t=h[x];</span><br><span class="line">    h[x]=h[y];</span><br><span class="line">    h[y]=t;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">siftdown</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>{                    <span class="comment">//&#x4ECE;&#x7F16;&#x53F7;&#x4E3A;i&#x7684;&#x8282;&#x70B9;&#x5F00;&#x59CB;&#x5411;&#x4E0B;&#x8C03;&#x6574; </span></span><br><span class="line">    <span class="keyword">int</span> t, flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i*<span class="number">2</span> &lt;= n &amp;&amp; !flag)<span class="comment">//&#x5F53;&#x7ED3;&#x70B9;i&#x6709;&#x513F;&#x5B50;&#x5E76;&#x4E14;&#x6709;&#x9700;&#x8981;&#x7EE7;&#x7EED;&#x8C03;&#x6574;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x6267;&#x884C; </span></span><br><span class="line">    {                <span class="comment">//t&#x8BB0;&#x5F55;&#x503C;&#x8F83;&#x5C0F;&#x7684;&#x7ED3;&#x70B9;&#x7F16;&#x53F7; </span></span><br><span class="line">        <span class="keyword">if</span>(h[i] &gt; h[<span class="number">2</span>*i])    <span class="comment">//&#x5224;&#x65AD;&#x548C;&#x5DE6;&#x513F;&#x5B50;&#x7684;&#x5173;&#x7CFB; </span></span><br><span class="line">            t = <span class="number">2</span>*i;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            t = i;</span><br><span class="line">        <span class="keyword">if</span>((<span class="number">2</span>*i + <span class="number">1</span>) &lt;= n)</span><br><span class="line">        {        <span class="comment">//&#x5982;&#x679C;&#x6709;&#x53F3;&#x513F;&#x5B50;&#xFF0C;&#x5224;&#x65AD;&#x548C;&#x53F3;&#x513F;&#x5B50;&#x5173;&#x7CFB; </span></span><br><span class="line">            <span class="keyword">if</span>(h[t] &gt; h[<span class="number">2</span>*i + <span class="number">1</span>])</span><br><span class="line">                t = <span class="number">2</span>*i+<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(t != i)    <span class="comment">// t != i&#xFF0C;&#x5373;&#x5B50;&#x7ED3;&#x70B9;&#x4E2D;&#x6709;&#x66F4;&#x5C0F;&#x7684; </span></span><br><span class="line">        {</span><br><span class="line">            swap(t, i);    <span class="comment">//&#x4EA4;&#x6362;&#x4E24;&#x4E2A;&#x7ED3;&#x70B9;&#x7684;&#x503C;</span></span><br><span class="line">            i=t;        <span class="comment">//&#x66F4;&#x65B0;i&#xFF0C;&#x7EE7;&#x7EED;&#x5411;&#x4E0B;&#x8C03;&#x6574; </span></span><br><span class="line">        }       <span class="comment">//&#x53CD;&#x4E4B;&#xFF0C;&#x4E0D;&#x7528;&#x5411;&#x4E0B;&#x8C03;&#x6574;&#x4E86;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x5411;&#x4E0A;&#x8C03;&#x6574;"><a href="#&#x5411;&#x4E0A;&#x8C03;&#x6574;" class="headerlink" title="&#x5411;&#x4E0A;&#x8C03;&#x6574;"></a>&#x5411;&#x4E0A;&#x8C03;&#x6574;</h3><p>&#x6700;&#x5C0F;&#x5806;&#x5DF2;&#x7ECF;&#x6784;&#x5EFA;&#x597D;&#x4E86;&#xFF0C;&#x5982;&#x679C;&#x8981;&#x63D2;&#x5165;&#x5143;&#x7D20;&#x9700;&#x8981;&#x5411;&#x4E0A;&#x8C03;&#x6574;&#x3002;<br>&#x4ECE;&#x7F16;&#x53F7;&#x4E3A;i&#x7684;&#x975E;&#x53F6;&#x7ED3;&#x70B9;&#x5F00;&#x59CB;&#x5411;&#x4E0A;&#x8C03;&#x6574;&#xFF0C;&#x4E3A;&#x4E86;&#x7EF4;&#x62A4;&#x6700;&#x5C0F;&#x5806;&#x7279;&#x6027;&#xFF0C;&#x8981;&#x5C06;&#x8BE5;&#x70B9;&#x4E0E;&#x5176;&#x7236;&#x7ED3;&#x70B9;&#x6BD4;&#x8F83;&#xFF0C;&#x82E5;&#x7236;&#x7ED3;&#x70B9;&#x8F83;&#x5C0F;&#xFF0C;&#x5C31;&#x4EA4;&#x6362;&#xFF0C;&#x7EE7;&#x7EED;&#x5411;&#x4E0A;&#x8C03;&#x6574;&#x3002;<br><img width="60%" src="/2020/03/05/heap/3.png"><br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">siftup</span><span class="params">(<span class="keyword">int</span> i)</span>    <span class="comment">//&#x4ECE;&#x7F16;&#x53F7;&#x4E3A;i&#x5143;&#x7D20;&#x5F00;&#x59CB;&#x5411;&#x4E0A;&#x8C03;&#x6574; </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> t,flag=<span class="number">0</span>;</span><br><span class="line">    n++;</span><br><span class="line">    <span class="keyword">while</span>(i!=<span class="number">1</span> &amp;&amp; !flag)</span><br><span class="line">    {           <span class="comment">//&#x53EA;&#x9700;&#x548C;&#x7236;&#x7ED3;&#x70B9;&#x6BD4;&#x8F83;&#x5927;&#x5C0F;&#x5373;&#x53EF;</span></span><br><span class="line">        <span class="keyword">if</span>(h[i]&lt;h[i/<span class="number">2</span>])</span><br><span class="line">            t=i/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            t=i;</span><br><span class="line">        <span class="keyword">if</span>(t!=i)    <span class="comment">//&#x5982;&#x679C;&#x9700;&#x8981;&#x4EA4;&#x6362;&#xFF0C;&#x5C31;&#x7EE7;&#x7EED;&#x5411;&#x4E0A;&#x8C03;&#x6574;</span></span><br><span class="line">        {</span><br><span class="line">            swap(t,i);</span><br><span class="line">            i=t;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="&#x5806;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;"><a href="#&#x5806;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;" class="headerlink" title="&#x5806;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;"></a>&#x5806;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;</h2><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>1.&#x6784;&#x5EFA;&#x6700;&#x5927;&#x5806;&#xFF0C;&#x8FD9;&#x6837;&#x6700;&#x5927;&#x7684;&#x5143;&#x7D20;&#x5728;h[1]&#xFF0C;&#x7136;&#x540E;&#x5C06;h[1]&#x4E0E;h[n]&#x4EA4;&#x6362;(&#x6700;&#x5927;&#x7684;&#x5DF2;&#x5F52;&#x4F4D;)&#xFF0C;&#x8BB0;&#x5F97;h[1]&#x5411;&#x4E0B;&#x8C03;&#x6574;&#x4EE5;&#x4FDD;&#x6301;&#x5806;&#x7684;&#x7279;&#x6027;&#x3002;<br>2.&#x6267;&#x884C;&#x2013;n&#xFF0C;h[1]&#x4E0E;h[n]&#x4EA4;&#x6362;(&#x7B2C;&#x4E8C;&#x5927;&#x7684;&#x5DF2;&#x5F52;&#x4E3A;)&#xFF0C;h[1]&#x5411;&#x4E0B;&#x8C03;&#x6574;&#x3002;&#x5982;&#x6B64;&#x53CD;&#x590D;&#xFF0C;&#x76F4;&#x5230;&#x5806;&#x7684;&#x5927;&#x5C0F;&#x4E3A;1&#x3002;</p><p>&#x5806;&#x6392;&#x5E8F;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;O(n log n)<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapsort</span><span class="params">()</span>  <span class="comment">//&#x5806;&#x6392;&#x5E8F; </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">1</span>)   <span class="comment">//&#x5C06;h[1]&#x548C;h[n]&#x4EA4;&#x6362;&#x5F97;&#x5230;&#x6700;&#x5927;&#x5143;&#x7D20;h[n],&#x7136;&#x540E;&#x5C06;h[1]&#x5411;&#x4E0B;&#x8C03;&#x6574; </span></span><br><span class="line">    {</span><br><span class="line">        swap(<span class="number">1</span>,n);</span><br><span class="line">        n--;     <span class="comment">//&#x76F4;&#x5230;&#x5806;&#x7684;&#x5927;&#x5C0F;&#x4E3A;1&#x4E3A;&#x6B62; </span></span><br><span class="line">        siftdown(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inverse</title>
      <link href="/2020/02/28/Inverse/"/>
      <url>/2020/02/28/Inverse/</url>
      
        <content type="html"><![CDATA[<p> &#x9006;&#x5143;&#x5B9A;&#x4E49;&#xFF1A;&#x6A21;m&#x610F;&#x4E49;&#x4E0B;&#xFF0C;&#x6570;a&#x5982;&#x679C;&#x6709;&#x9006;&#x5143;x&#xFF0C;&#x90A3;&#x4E48;&#x9664;&#x4EE5;a&#x76F8;&#x5F53;&#x4E8E;&#x4E58;&#x4EE5;x</p><p>&#x5373;   ($b\times a$)%m = $\left(b\times m\right)% m$%m  &#x79F0;x&#x4E3A;a&#x7684;&#x9006; .&#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x8981;&#x6C42;  a&#x548C;m &#x4E92;&#x8D28;&#x4E14;&#x975E;&#x8D1F;</p><a id="more"></a><p>&#x7ED9;&#x5B9A;&#x6A21;&#x6570;m&#xFF0C;&#x6C42;a&#x7684;&#x9006;&#x76F8;&#x5F53;&#x4E8E; $ax\equiv1{(mod,m)}$   </p><p>&#x5373; ax - my = 1 &#x5B9E;&#x9645;&#x4E0A;&#x7EBF;&#x6027;&#x4E0D;&#x5B9A;&#x65B9;&#x7A0B;&#x65E0;&#x7A77;&#x591A;&#x89E3;&#xFF0C;&#x8FD9;&#x91CC;&#x53EA;&#x6C42;&#x6B63;&#x7684;&#x6700;&#x5C0F;&#x9006;&#x5143;</p><p>a, m&#x8981;&#x6C42;&#x975E;&#x8D1F;&#xFF0C;&#x4E14; Gcd(a, m) = 1 &#x5373;a, m&#x4E92;&#x8D28;</p><p>&#x9006;&#x5143;&#x6C42;&#x89E3;&#xFF1A;</p><p>1&#xFF09;&#x6269;&#x5C55;&#x6B27;&#x51E0;&#x91CC;&#x5F97;</p><p>2&#xFF09;&#x8D39;&#x9A6C;&#x5C0F;&#x5B9A;&#x7406;</p><p>3&#xFF09;&#x7EBF;&#x6027;&#x6C42;&#x89E3;</p><h3 id="&#x6269;&#x5C55;&#x6B27;&#x51E0;&#x91CC;&#x5F97;&#x5B9A;&#x7406;&#xFF1A;"><a href="#&#x6269;&#x5C55;&#x6B27;&#x51E0;&#x91CC;&#x5F97;&#x5B9A;&#x7406;&#xFF1A;" class="headerlink" title="&#x6269;&#x5C55;&#x6B27;&#x51E0;&#x91CC;&#x5F97;&#x5B9A;&#x7406;&#xFF1A;"></a>&#x6269;&#x5C55;&#x6B27;&#x51E0;&#x91CC;&#x5F97;&#x5B9A;&#x7406;&#xFF1A;</h3><p>&#x5DF2;&#x77E5;a,b&#x6C42;&#x89E3;&#x4E00;&#x7EC4;x,y &#x6EE1;&#x8DB3; ax + by = Gcd(a, b). &#x5E76;&#x4E14;&#x5DF2;&#x77E5;&#x8BE5;&#x65B9;&#x7A0B;&#x4E00;&#x5B9A;&#x6709;&#x89E3;</p><p>&#x800C;&#x9006;&#x5143;&#x6C42; ax - my = 1 &#x5373;&#x8981; Gcd(a,m) = 1 &#x4E14; a,m&#x975E;&#x8D1F;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">Extend_Eculid</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(!b)</span><br><span class="line">{</span><br><span class="line">*x = <span class="number">1</span>; *y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">ll temp = Extend_Eculid(b, a%b, y, x);</span><br><span class="line">y = y - a/b*x;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x5F97;&#x5230;&#x8FD4;&#x56DE;&#x503C;d &#x8981;&#x5224;&#x65AD;&#x4E00;&#x4E0B;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">ll a, m, x, y, d ;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;m;</span><br><span class="line">d = Extend_Eculid(a, m, &amp;x, &amp;y);<span class="comment">//&#x6269;&#x6B27;&#x5B9A;&#x7406;,&#x8FD4;&#x56DE;Gcd(a, m) </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; (d == <span class="number">1</span>? (x%m+m)%m : <span class="number">-1</span>)&lt;&lt; <span class="built_in">endl</span>;<span class="comment">//&#x53EF;&#x80FD;x%m&#x4E3A;&#x8D1F;,&#x6240;&#x4EE5;&#x518D;&#x52A0;&#x4E0A;m</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x8D39;&#x9A6C;&#x5C0F;&#x5B9A;&#x7406;&#xFF1A;"><a href="#&#x8D39;&#x9A6C;&#x5C0F;&#x5B9A;&#x7406;&#xFF1A;" class="headerlink" title="&#x8D39;&#x9A6C;&#x5C0F;&#x5B9A;&#x7406;&#xFF1A;"></a>&#x8D39;&#x9A6C;&#x5C0F;&#x5B9A;&#x7406;&#xFF1A;</h3><p>&#x82E5;p&#x4E3A;&#x7D20;&#x6570;&#xFF0C;a&#x4E3A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x4E14;a&#x3001;p&#x4E92;&#x8D28;.&#x5219;&#x6709;    $a^{p-1} = 1(mod,,p)$</p><p>&#x90A3;&#x4E48;  $a\times a^{p-2} = 1(mod,,p)$</p><p>&#x8FD9;&#x6837;a&#x7684;&#x9006;&#x5143;&#x7684;&#x89E3;&#x5373;  $ x = a^{p-2}$ ,&#x4F7F;&#x7528;&#x5FEB;&#x901F;&#x5E42;&#x6C42;&#x89E3; $a^{p-2}$ &#x5373;&#x53EF;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">mod_pow</span><span class="params">(ll x, ll n, ll p)</span><span class="comment">//&#x4EE3;&#x5165; a, m-2, m</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">ll res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">res = res*x%p;</span><br><span class="line">x = x*x%p;</span><br><span class="line">n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数学知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>n的阶乘(High-precision)</title>
      <link href="/2020/02/28/High-precision1/"/>
      <url>/2020/02/28/High-precision1/</url>
      
        <content type="html"><![CDATA[<p>n&#x7684;&#x9636;&#x4E58;&#x6C42;f(n)&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x53EA;&#x80FD;&#x7B97;&#x5230;n = 20, &#x518D;&#x60F3;&#x8BA1;&#x7B97;&#x663E;&#x7136;&#x7528;&#x9AD8;&#x7CBE;&#x5EA6;&#x4E58;&#x6CD5;(&#x5B57;&#x7B26;&#x4E32;&#x5B58;&#x50A8;)&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x3002;</p><a id="more"></a><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong><em>n=23&#x8FD0;&#x884C;&#x7ED3;&#x679C;(&#x5DE6;&#x56FE;&#x9012;&#x5F52;&#x3001;&#x53F3;&#x56FE;&#x9AD8;&#x7CBE;&#x5EA6;)</em></strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><p><img width="45%" src="/2020/02/28/High-precision1/1.JPG"><img width="50%" src="/2020/02/28/High-precision1/2.JPG"></p><ul><li><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong> </p><blockquote><p>f(n) = 1* 2* 3<em>&#x2026;</em>n<br>&#x5176;&#x4E2D; f(i)*f(i+1) &#x4F7F;&#x7528;&#x9AD8;&#x7CBE;&#x5EA6;&#x4E58;&#x6CD5;,&#x90A3;&#x4E48;&#x8C03;&#x7528;n-1&#x6B21;&#x5373;&#x53EF;</p></blockquote></li></ul><p>&#x8FD9;&#x91CC;&#x4F7F;&#x7528;<strong>&#x9AD8;&#x7CBE;&#x5EA6;&#x52A0;&#x6CD5;</strong>&#x5B9E;&#x73B0;&#x9AD8;&#x7CBE;&#x5EA6;&#x4E58;&#x6CD5;,&#x6240;&#x4EE5;&#x5148;&#x4ECB;&#x7ECD;&#x9AD8;&#x7CBE;&#x5EA6;&#x52A0;&#x6CD5;<br>&#x9AD8;&#x7CBE;&#x5EA6;&#x52A0;&#x6CD5;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x8BA1;&#x7B97;&#x4E24;&#x4E2A;&#x6570;&#x76F8;&#x52A0;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x4F7F;&#x7528;&#x591A;&#x4E2A;&#x5B58;&#x50A8;&#x5355;&#x5143;&#xFF0C;&#x5C06;&#x6570;&#x5B57;&#x5B57;&#x7B26;&#x5B58;&#x50A8;&#x5230;&#x4E32;&#x4E2D;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x6570;&#x503C;&#x8303;&#x56F4;&#x8F83;&#x5927;&#x7684;&#x52A0;&#x6CD5;&#x8FD0;&#x7B97;,&#x5982;&#x56FE;&#x3002;</p><p>$ 666666+55555=(6+5)+(60+50)+(600+500)+(6000+5000)+(600000+50000)+(600000) $</p><img width="450px" src="/2020/02/28/High-precision1/3.png"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Add</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span>  <span class="comment">//&#x8BA1;&#x7B97;a+b</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">string</span> sum;</span><br><span class="line"><span class="keyword">if</span>(a.size() &lt; b.size())<span class="comment">//a&#x8BBE;&#x4E3A;&#x4F4D;&#x6570;&#x8F83;&#x5927;&#x7684;&#x6570;,&#x4FBF;&#x4E8E;&#x540E;&#x9762;&#x8BA1;&#x7B97; </span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">string</span> temp;</span><br><span class="line">temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> len = a.size();</span><br><span class="line">a = <span class="string">&apos;0&apos;</span>+a;<span class="comment">//&#x4E24;&#x6570;&#x76F8;&#x52A0;&#x7684;&#x7ED3;&#x679C;&#x4F4D;&#x6570;&#x6700;&#x5927;&#x4E5F;&#x5C31; a.size()+1 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len-b.size(); i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">b = <span class="string">&apos;0&apos;</span>+b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=len; ++i)</span><br><span class="line">sum += <span class="string">&apos;0&apos;</span>;<span class="comment">//&#x5C06;b, sum&#x524D;&#x9762;&#x6DFB;0&#x4F7F;&#x4F4D;&#x6570;&#x90FD;&#x4E3A; a.size()+1</span></span><br><span class="line"><span class="keyword">int</span> t,c=<span class="number">0</span>;<span class="comment">//c&#x8BB0;&#x5F55;&#x52A0;&#x6CD5;&#x8FDB;&#x4F4D;&#x503C; </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len; i&gt;=<span class="number">0</span>; --i) <span class="comment">//&#x4F4D;&#x6570;&#x76F8;&#x540C;&#x5C31;&#x4FBF;&#x4E8E;&#x4F9D;&#x6B21;&#x76F8;&#x52A0;&#x4E86;,&#x6CE8;&#x610F;&#x8FDB;&#x4F4D; </span></span><br><span class="line">{</span><br><span class="line">t = ((a[i]-<span class="string">&apos;0&apos;</span>)+(b[i]-<span class="string">&apos;0&apos;</span>)+c);<span class="comment">//t&#x8BB0;&#x5F55;&#x6BCF;&#x4F4D;&#x76F8;&#x52A0;&#x7684;&#x548C; </span></span><br><span class="line">c = t/<span class="number">10</span>;</span><br><span class="line">sum[i] += t%<span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(sum[<span class="number">0</span>]==<span class="string">&apos;0&apos;</span>) <span class="comment">//&#x82E5; a.size()+1 &#x4F4D;&#x6CA1;&#x6709;&#x8FDB;&#x4F4D;,&#x6709;&#x6548;&#x4F4D;&#x5C31;&#x53EA;&#x6709;a.size() </span></span><br><span class="line">sum = sum.substr(<span class="number">1</span>, sum.size());</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x4E58;&#x6CD5;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x591A;&#x6B21;&#x76F8;&#x52A0;,&#x6240;&#x4EE5;&#x9AD8;&#x7CBE;&#x5EA6;&#x4E58;&#x6CD5;&#x53EF;&#x4EE5;&#x7531;&#x591A;&#x6B21;&#x9AD8;&#x7CBE;&#x5EA6;&#x52A0;&#x6CD5;&#x5B9E;&#x73B0; a*b &#x5373; b&#x4E2A;a&#x76F8;&#x52A0;&#xFF0C; &#x5982;&#x56FE;</p><p>$ 333333\times22222 = 333333\times\left(20000+2000+200+20+2\right) $<img width="450px" src="/2020/02/28/High-precision1/4.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Mult</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span> <span class="comment">//&#x8BA1;&#x7B97;a*b</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(a.size()&lt;b.size())</span><br><span class="line">{<span class="comment">//a&#x8BBE;&#x4E3A;&#x4F4D;&#x6570;&#x8F83;&#x5927;&#x7684;&#x6570;</span></span><br><span class="line"><span class="built_in">string</span> temp;</span><br><span class="line">temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> len=b.size();</span><br><span class="line"><span class="built_in">string</span> sum=<span class="string">&quot;0&quot;</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">{<span class="comment">//&#x4EE4;b&#x6BCF;&#x4E00;&#x4F4D;&#x4F9D;&#x6B21;&#x4E0E;a&#x76F8;&#x4E58;,&#x7136;&#x540E;&#x76F8;&#x52A0;</span></span><br><span class="line"><span class="keyword">if</span>(i&lt;len<span class="number">-1</span>)</span><br><span class="line">a += <span class="string">&apos;0&apos;</span>;<span class="comment">//b[i]&#x6240;&#x5728;&#x7684;&#x662F;&#x7B2C;&#x51E0;&#x4F4D;,&#x4E0E;a&#x76F8;&#x4E58;&#x4E4B;&#x524D;&#x5C31;&#x7ED9;a&#x589E;&#x52A0;&#x591A;&#x5C11;&#x4E2A;0 </span></span><br><span class="line"><span class="built_in">string</span> ans = a;</span><br><span class="line"><span class="keyword">if</span>(b[i] != <span class="string">&apos;0&apos;</span>)<span class="comment">//b[i]&#x4E3A;&apos;0&apos;&#x5C31;&#x4E0D;&#x4E0E;a&#x76F8;&#x4E58; </span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;b[i]-<span class="string">&apos;0&apos;</span>; ++j)<span class="comment">//&#x4E58;&#x6CD5;&#x8F6C;&#x5316;&#x4E3A;&#x52A0;&#x6CD5; </span></span><br><span class="line">ans = Add(ans, a);<span class="comment">//&#x4E58;&#x591A;&#x5C11;&#x6B21;a&#x5C31;&#x662F;&#x52A0;&#x4E86;&#x591A;&#x5C11;&#x6B21;a </span></span><br><span class="line">sum = Add(sum, ans);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x63A5;&#x7740;&#x8BA1;&#x7B97;n&#x7684;&#x9636;&#x4E58;&#x5C31;&#x5F88;&#x5BB9;&#x6613;&#x4E86;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> n)</span><span class="comment">//&#x8BA1;&#x7B97;n&#x7684;&#x9636;&#x4E58;,&#x7ED3;&#x679C;&#x7528;&#x5B57;&#x7B26;&#x4E32;&#x5B58; </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">string</span> sum = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n &gt; i)<span class="comment">//f(n) = 1*2*3*...*n</span></span><br><span class="line">{</span><br><span class="line">sum = Mult(sum, to_string(++i));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sliding Window</title>
      <link href="/2020/02/07/Sliding-window/"/>
      <url>/2020/02/07/Sliding-window/</url>
      
        <content type="html"><![CDATA[<h2 id="&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7B97;&#x6CD5;&#xFF1A;"><a href="#&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7B97;&#x6CD5;&#xFF1A;" class="headerlink" title="&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7B97;&#x6CD5;&#xFF1A;"></a>&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7B97;&#x6CD5;&#xFF1A;</h2><p>&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x4E00;&#x822C;&#x7528;&#x4E8E;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x4E2D;&#xFF0C;&#x4F7F;&#x7528;&#x8BE5;&#x7A97;&#x53E3;&#x5728;&#x6570;&#x7EC4;&#x5408;&#x6CD5;&#x533A;&#x95F4;&#x5185;&#x6ED1;&#x52A8;&#xFF0C;&#x52A8;&#x6001;&#x8BB0;&#x5F55;&#x76F8;&#x5173;&#x4FE1;&#x606F;&#xFF0C;&#x4ECE;&#x800C;&#x63D0;&#x9AD8;&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;</p><a id="more"></a><h3 id="&#x9898;&#x76EE;1&#xFF1A;&#x4E0D;&#x5305;&#x542B;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;"><a href="#&#x9898;&#x76EE;1&#xFF1A;&#x4E0D;&#x5305;&#x542B;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;" class="headerlink" title="&#x9898;&#x76EE;1&#xFF1A;&#x4E0D;&#x5305;&#x542B;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;"></a>&#x9898;&#x76EE;1&#xFF1A;&#x4E0D;&#x5305;&#x542B;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;</h3><blockquote><p>&#x9898;&#x76EE;&#x63CF;&#x8FF0;&#xFF1A;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x627E;&#x51FA;&#x5176;&#x4E2D;&#x4E0D;&#x542B;&#x6709;&#x91CD;&#x590D;&#x5B57;&#x7B26;&#x7684; &#x6700;&#x957F;&#x5B50;&#x4E32; &#x7684;&#x957F;&#x5EA6;&#x3002;<br>&#x8F93;&#x5165;&#xFF1A;&#x201C;abcgbef&#x201D;<br>&#x8F93;&#x51FA;&#xFF1A;5</p></blockquote><ul><li><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x6570;&#x7EC4;&#x6A21;&#x62DF;&#x961F;&#x5217;&#xFF0C;front&#x6807;&#x8BB0;&#x7A97;&#x53E3;&#x5DE6;&#x7AEF;&#xFF0C;i&#x8BB0;&#x5F55;&#x7A97;&#x53E3;&#x53F3;&#x7AEF;&#xFF0C;i&#x4ECE;0&#x904D;&#x5386;&#x5230;&#x6570;&#x7EC4;&#x672B;&#x7AEF;.<br>map&lt;char,int&gt;&#x5B58;&#x653E;&#x4E0D;&#x540C;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x5728;&#x7A97;&#x53E3;&#x4E2D;&#x7684;&#x6B21;&#x6570;.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map&lt;char, int&gt; mp;</span><br></pre></td></tr></table></figure></li><li><p>&#x5F00;&#x59CB;front=0&#xFF0C;i&#x4E00;&#x76F4;&#x53F3;&#x79FB;,map&#x8BB0;&#x5F55;&#x5143;&#x7D20;&#x76F4;&#x81F3;&#x51FA;&#x73B0;&#x91CD;&#x590D;&#x5B57;&#x7B26;name&#xFF0C;&#x6709;mp[name]==2&#xFF0C;&#x8BB0;&#x4E0B;&#x5B57;&#x4E32;&#x957F;&#x5EA6;res.<br>i&#x518D;&#x8981;&#x540E;&#x79FB;&#xFF0C;&#x5219;&#x9700;&#x820D;&#x53BB;&#x4E4B;&#x524D;&#x51FA;&#x73B0;&#x7684;&#x91CD;&#x590D;&#x5B57;&#x7B26;&#xFF0C;&#x4E8E;&#x662F;front&#x53F3;&#x79FB;&#x81F3; a[front]==name.<br>&#x6BCF;&#x6B21;&#x51FA;&#x73B0;&#x91CD;&#x590D;&#x5B57;&#x7B26;&#x65F6;&#x5C31;&#x8003;&#x8651;&#x66F4;&#x65B0;&#x5B57;&#x4E32;&#x957F;&#x5EA6;res.</p></li></ul><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br>&#xB7;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xB7;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">int Sliding (string a)</span><br><span class="line">{</span><br><span class="line">if(a == &quot;&quot;)         //&#x4E32;&#x4E3A;&#x7A7A;&#x65F6;&#x8FD4;&#x56DE;0</span><br><span class="line">return 0;</span><br><span class="line">int len = a.size();</span><br><span class="line">int front = 0, res = -1;</span><br><span class="line">char name;</span><br><span class="line">map&lt;char, int&gt; mp;</span><br><span class="line">for(int i=0; i&lt;len; i++)</span><br><span class="line">{</span><br><span class="line">name = a[i];</span><br><span class="line">++mp[name];             //i&#x53F3;&#x79FB;&#xFF0C;mp&#x8BB0;&#x5F55;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x6B21;&#x6570;</span><br><span class="line">if(mp[name]==2)         //&#x51FA;&#x73B0;&#x91CD;&#x590D;&#x5B57;&#x7B26;</span><br><span class="line">{</span><br><span class="line">res = max(res, i-front);    //&#x66F4;&#x65B0;res&#xFF0C;&#x91CD;&#x590D;&#x7684;a[i]&#x4E0D;&#x80FD;&#x7B97;&#xFF0C;&#x6240;&#x4EE5;&#x662F;i-front</span><br><span class="line">while(name != a[front])</span><br><span class="line">{</span><br><span class="line">--mp[a[front]];</span><br><span class="line">++front;</span><br><span class="line">}                //&#x4E3A;&#x4FDD;&#x8BC1;&#x6CA1;&#x6709;&#x91CD;&#x590D;&#x5B57;&#x7B26;&#xFF0C;front&#x540E;&#x79FB;&#x81F3; name==a[front] </span><br><span class="line">++front;         //front&#x518D;&#x53F3;&#x79FB;&#x4E00;&#x4F4D;&#xFF0C;&#x7A97;&#x53E3;&#x5185;&#x5C31;&#x4E0D;&#x518D;&#x6709;&#x91CD;&#x590D;&#x5B57;&#x7B26;name&#x4E86;</span><br><span class="line">--mp[name];      //&#x6062;&#x590D;&#x81F3;mp[name]=1&#xFF0C;&#x7A97;&#x53E3;i&#x7EE7;&#x7EED;&#x540E;&#x79FB;</span><br><span class="line">}</span><br><span class="line">else</span><br><span class="line">{</span><br><span class="line">if(i == len-1)      //&#x7279;&#x6B8A;&#x60C5;&#x51B5;&#xFF1A;i&#x79FB;&#x81F3;&#x672B;&#x5C3E;&#x4F46;&#x65E0;&#x91CD;&#x590D;&#x5B57;&#x7B26;</span><br><span class="line">res = max(res, i-front+1);  //&#x6B64;&#x65F6;&#x82E5;&#x8981;&#x66F4;&#x65B0;&#x957F;&#x5EA6;&#x4E3A; i-front+1</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">return res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x9898;&#x76EE;2&#xFF1A;&#x81F3;&#x5C11;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x77ED;&#x5B50;&#x4E32;"><a href="#&#x9898;&#x76EE;2&#xFF1A;&#x81F3;&#x5C11;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x77ED;&#x5B50;&#x4E32;" class="headerlink" title="&#x9898;&#x76EE;2&#xFF1A;&#x81F3;&#x5C11;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x77ED;&#x5B50;&#x4E32;"></a>&#x9898;&#x76EE;2&#xFF1A;&#x81F3;&#x5C11;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x77ED;&#x5B50;&#x4E32;</h3><blockquote><p>&#x9898;&#x76EE;&#x63CF;&#x8FF0;<br>&#x7ED9;&#x957F;&#x5EA6;&#x4E3A;n&#x7684;&#x4E00;&#x6BB5;&#x5B57;&#x7B26;&#xFF0C;&#x8981;&#x6C42;&#x622A;&#x53D6;&#x4E00;&#x6BB5;&#x8FDE;&#x7EED;&#x5B57;&#x4E32;&#xFF0C;&#x6EE1;&#x8DB3;&#x81F3;&#x5C11;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5B57;&#x7B26;&#xFF0C;&#x6C42;&#x8BE5;&#x5B57;&#x4E32;&#x957F;&#x5EA6;&#x7684;&#x6700;&#x5C0F;&#x503C;<br>&#x8F93;&#x5165;&#xFF1A;9 2<br>     abebeabee<br>&#x8F93;&#x51FA;&#xFF1A;2</p></blockquote><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x8BE5;&#x9898;&#x6C42;&#x81F3;&#x5C11;k&#x4E2A;&#x5B57;&#x7B26;&#x7684;&#x6700;&#x77ED;&#x957F;&#x5EA6;&#xFF0C;&#x5373;&#x7A97;&#x53E3;&#x5185;&#x4EC5;&#x5305;&#x542B;k&#x4E2A;&#x5B57;&#x7B26;&#xFF0C;&#x5E76;&#x4E14;<br>k=1&#x65F6;,&#x663E;&#x7136;&#x6700;&#x77ED;res&#x4E3A;1&#xFF1B;<br>k&gt;1&#x65F6;,&#x6700;&#x77ED;&#x65F6;&#x5E94;&#x6EE1;&#x8DB3;a[front]=a[i]=name,name&#x5373;&#x91CD;&#x590D;&#x7684;&#x5B57;&#x7B26;.</li><li>&#x76F4;&#x63A5;&#x8BF4;&#x7A97;&#x53E3;&#x5728;&#x79FB;&#x52A8;&#x65F6;&#x548C;&#x4E0A;&#x9898;&#x7684;&#x4E0D;&#x540C;&#x4E4B;&#x5904;&#x5427;.<br>&#x540C;&#x6837;i&#x53F3;&#x79FB;&#x81F3; mp[name]==k ,front&#x53F3;&#x79FB;&#x76F4;&#x81F3; mp[name]==k(&#x5373;a[front]==name).<br>&#x8FD9;&#x662F;&#x4E3A;&#x4E86;&#x5C06;&#x957F;&#x5EA6;&#x5C3D;&#x53EF;&#x80FD;&#x7F29;&#x77ED;&#x81F3; a[front]=a[i]=name.<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</li></ul><p>&#xB7;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xB7;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">map&lt;char, int&gt; mp;</span><br><span class="line">char a[200005];</span><br><span class="line">int n, k, front = 0, res = -1;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k&gt;&gt;a;</span><br><span class="line">for(int i=0; i&lt;n; i++)</span><br><span class="line">{</span><br><span class="line">char name = a[i];</span><br><span class="line">++mp[name];</span><br><span class="line">while(mp[name] == k)         //front&#x53F3;&#x79FB;&#x81F3;mp[name]=k-1 &#x7ED3;&#x675F;&#x5FAA;&#x73AF;</span><br><span class="line">{</span><br><span class="line">if(res == -1)</span><br><span class="line">res = i-front+1;    //&#x5305;&#x542B;k=1,&#x6C42;res&#x7684;&#x60C5;&#x51B5;</span><br><span class="line">else</span><br><span class="line">res = min(res, i-front+1);  //res&#x6700;&#x77ED;&#x8981;&#x5305;&#x542B;a[i],&#x6240;&#x4EE5;&#x662F; i-front+1</span><br><span class="line">--mp[a[front]];</span><br><span class="line">++front;</span><br><span class="line">}           </span><br><span class="line">}</span><br><span class="line">cout&lt;&lt; res &lt;&lt;endl; </span><br><span class="line">return 0;</span><br></pre></td></tr></table></figure><h3 id="&#x9898;&#x76EE;3&#xFF1A;&#x6700;&#x591A;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;"><a href="#&#x9898;&#x76EE;3&#xFF1A;&#x6700;&#x591A;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;" class="headerlink" title="&#x9898;&#x76EE;3&#xFF1A;&#x6700;&#x591A;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;"></a>&#x9898;&#x76EE;3&#xFF1A;&#x6700;&#x591A;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;</h3><blockquote><p>&#x95EE;&#x9898;&#x63CF;&#x8FF0;<br>&#x94FE;&#x63A5;&#xFF1A;<a href="https://ac.nowcoder.com/acm/contest/3002/H" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/3002/H</a><br>&#x6765;&#x6E90;&#xFF1A;&#x725B;&#x5BA2;&#x7F51;<br>&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x201C;01&#x201D;&#x4E32;&#x800C;&#x8A00;&#xFF0C;&#x6BCF;&#x6B21;&#x64CD;&#x4F5C;&#x53EF;&#x4EE5;&#x628A;&#x2019;0&#x2019;&#x5B57;&#x7B26;&#x6539;&#x4E3A;&#x2019;1&#x2019;&#x5B57;&#x7B26;&#xFF0C;&#x6216;&#x8005;&#x628A;&#x2019;1&#x2019;&#x5B57;&#x7B26;&#x6539;&#x4E3A;&#x2019;0&#x2019;&#x5B57;&#x7B26;&#x3002;&#x6240;&#x8C13;&#x201C;01&#x201D;&#x4E32;&#xFF0C;&#x5373;&#x53EA;&#x542B;&#x5B57;&#x7B26;&#x2019;0&#x2019;&#x548C;&#x5B57;&#x7B26;&#x2019;1&#x2019;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x3002;<br>nozomi&#x6709;&#x6700;&#x591A; k &#x6B21;&#x64CD;&#x4F5C;&#x7684;&#x673A;&#x4F1A;&#x3002;&#x5979;&#x60F3;&#x5728;&#x64CD;&#x4F5C;&#x4E4B;&#x540E;&#x627E;&#x51FA;&#x4E00;&#x4E2A;&#x5C3D;&#x53EF;&#x80FD;&#x957F;&#x7684;&#x8FDE;&#x7EED;&#x5B50;&#x4E32;&#xFF0C;&#x8FD9;&#x4E2A;&#x5B50;&#x4E32;&#x4E0A;&#x7684;&#x6240;&#x6709;&#x5B57;&#x7B26;&#x90FD;&#x76F8;&#x540C;&#x3002;<br>&#x8FD9;&#x4E2A;&#x5B50;&#x4E32;&#x7684;&#x957F;&#x5EA6;&#x6700;&#x5927;&#x503C;&#x662F;&#x591A;&#x5C11;&#xFF1F; (&#x6CE8;&#xFF1A;k&#x6B21;&#x64CD;&#x4F5C;&#x673A;&#x4F1A;&#x53EF;&#x4EE5;&#x4E0D;&#x5168;&#x90E8;&#x7528;&#x5B8C;)<br>&#x8F93;&#x5165;&#xFF1A; 6 1<br>      101110<br>&#x8F93;&#x51FA;&#xFF1A; 5<br>(&#x6CE8;&#x5C06;&#x2019;0&#x2019;&#x6539;&#x4E3A;&#x2019;1&#x2019;&#x53EF;&#x5F97;&#x5230;&#x5B50;&#x4E32;&#x6700;&#x957F;&#x4E3A;5&#xFF0C;&#x5373;&#x201C;111110&#x201D;; &#x5C06;&#x2019;1&#x2019;&#x6539;&#x4E3A;&#x2019;0&#x2019;&#x5B50;&#x4E32;&#x6700;&#x957F;&#x4E3A;2&#xFF0C;&#x5373;&#x201C;001110&#x201D;.<br>&#x4E24;&#x8005;&#x53D6;&#x6700;&#x957F; max(5,2)=5)</p></blockquote><ul><li><p>&#x95EE;&#x9898;&#x5206;&#x6790;<br>&#x5206;&#x4E24;&#x79CD;&#x60C5;&#x51B5;&#xFF1A;<br>1)&#x5C06;&#x2019;0&#x2019;&#x6539;&#x4E3A;&#x2019;1&#x2019;,&#x5F97;&#x5230;&#x5B50;&#x4E32;&#x5B57;&#x7B26;&#x5168;&#x4E3A;&#x2019;1&#x2019;<br>2)&#x5C06;&#x2019;1&#x2019;&#x6539;&#x4E3A;&#x2019;0&#x2019;,&#x5F97;&#x5230;&#x5B50;&#x4E32;&#x5B57;&#x7B26;&#x5168;&#x4E3A;&#x2019;0&#x2019;<br>&#x6700;&#x540E;&#x6C42; max(Slide(&#x2018;1&#x2019;), Slide(&#x2018;0&#x2019;))</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int Slide(char a)//&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x7684;&#x662F;&#x66F4;&#x6539;&#x5B57;&#x7B26;a&#x540E;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;&#x957F;&#x5EA6;</span><br></pre></td></tr></table></figure></li><li><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5982; Slide(&#x2018;1&#x2019;) &#x6700;&#x7EC8;&#x5F97;&#x5230;&#x5B50;&#x4E32;&#x5B57;&#x7B26;&#x5168;&#x4E3A;&#x2019;0&#x2019;,&#x66F4;&#x6539;&#x2019;1&#x2019;&#x7684;&#x6B21;&#x6570;&#x4E0D;&#x8D85;&#x8FC7;k.<br>&#x8FD9;&#x91CC;&#x9700;&#x8981;&#x8F6C;&#x5316;&#x4E00;&#x4E0B;&#x601D;&#x60F3;,&#x5373;&#x66F4;&#x6539;&#x591A;&#x5C11;&#x6B21;&#x5B57;&#x7B26;&#x2019;1&#x2019; &#x5C31;&#x662F;&#x5BFB;&#x627E;&#x2019;1&#x2019;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;.<br>&#x90A3;&#x4E48;&#x8BE5;&#x95EE;&#x9898;&#x5373;&#x8F6C;&#x5316;&#x4E3A; &#x201C;01&#x201D;&#x4E32;&#x4E2D;&#x6700;&#x591A;&#x5305;&#x542B;k&#x4E2A;&#x2019;1&#x2019;&#x5B57;&#x7B26;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;.<br>&#x8BE5;&#x95EE;&#x9898;&#x7C7B;&#x4F3C;&#x9898;&#x76EE;1,&#x7A0D;&#x5FAE;&#x4E00;&#x70B9;&#x4E0D;&#x540C;&#x5728;&#x4E8E;:<br>&#x66F4;&#x6539;&#x5B57;&#x7B26;&#x6B21;&#x6570;mp(&#x4E5F;&#x5C31;&#x662F;&#x5305;&#x542B;&#x9898;&#x76EE;1&#x4E2D;&#x91CD;&#x590D;&#x5B57;&#x7B26;&#x4E2A;&#x6570;mp)&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;k,&#x800C;&#x4E0D;&#x662F;&#x5C0F;&#x4E8E;2.</p></li></ul><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><p>&#xB7;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xB7;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;map&gt; </span><br><span class="line">using namespace std;</span><br><span class="line">int n, k;</span><br><span class="line">char c[200005];</span><br><span class="line">int Slide(char a)//change a</span><br><span class="line">{//&#x5176;&#x5B9E;&#x5E76;&#x6CA1;&#x6709;&#x66F4;&#x6539;a,&#x800C;&#x662F;&#x5728;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x540C;&#x65F6;&#x67E5;&#x627E;a&#x51FA;&#x73B0;&#x6B21;&#x6570;</span><br><span class="line">map&lt;char, int&gt; mp;</span><br><span class="line">mp[a]=0;</span><br><span class="line">int front=0, ans = 0, res = 0;</span><br><span class="line">for(int i=0; i&lt;n; i++)</span><br><span class="line">{</span><br><span class="line">++mp[c[i]];</span><br><span class="line">if(mp[a]&gt;k)//&#x51FA;&#x73B0;&#x91CD;&#x590D;&#x5B57;&#x7B26;a&#x4E2A;&#x6570;&#x5927;&#x4E8E;k(&#x5373;&#x66F4;&#x6539;&#x6B21;&#x6570;&#x8D85;&#x8FC7;k&#x65F6;)</span><br><span class="line">{</span><br><span class="line">while(c[front]!=a)</span><br><span class="line">{</span><br><span class="line">res = max(res, i-front); //&#x5176;&#x5B9E;&#x79FB;&#x52A8;&#x8FC7;&#x7A0B;&#x4E0D;&#x4F1A;&#x66F4;&#x65B0;&#xFF0C;&#x56E0;&#x4E3A;&#x6C42;&#x7684;&#x662F;&#x6700;&#x957F;&#x957F;&#x5EA6;</span><br><span class="line">++front;//&#x7A97;&#x53E3;&#x5DE6;&#x7AEF;&#x5F00;&#x59CB;&#x79FB;&#x52A8;,front&#x79FB;&#x52A8;&#x548C;&#x9898;&#x76EE;1&#x4E00;&#x6837;</span><br><span class="line">}</span><br><span class="line">--mp[a];</span><br><span class="line">++front;</span><br><span class="line">}</span><br><span class="line">res = max(res, i-front+1);//&#x66F4;&#x65B0;max,&#x4FDD;&#x8BC1;&#x6BCF;&#x6B21;&#x5F97;&#x5230;&#x7A97;&#x53E3;&#x5185;a&#x51FA;&#x73B0;&#x6B21;&#x6570;&#x4E0D;&#x8D85;&#x8FC7;k</span><br><span class="line">}</span><br><span class="line">return res;</span><br><span class="line">}</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k&gt;&gt;c;</span><br><span class="line">cout&lt;&lt; max(Slide(&apos;1&apos;), Slide(&apos;0&apos;));</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="&#x6700;&#x540E;&#x5C0F;&#x7ED3;&#xFF1A;"><a href="#&#x6700;&#x540E;&#x5C0F;&#x7ED3;&#xFF1A;" class="headerlink" title="&#x6700;&#x540E;&#x5C0F;&#x7ED3;&#xFF1A;"></a>&#x6700;&#x540E;&#x5C0F;&#x7ED3;&#xFF1A;</h2><p>&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7684;&#x7B97;&#x6CD5;&#x601D;&#x60F3;&#xFF1A;<br>&#x7A97;&#x53E3;&#x6ED1;&#x52A8;&#x65F6;,&#x59CB;&#x7EC8;&#x4FDD;&#x8BC1;&#x7A97;&#x53E3;&#x5185;&#x662F;&#x5143;&#x7D20;&#x662F;&#x6EE1;&#x8DB3;&#x8981;&#x6C42;&#x7684;,&#x8FD9;&#x6837;&#x6ED1;&#x52A8;&#x7ED3;&#x675F;,&#x6700;&#x7EC8;&#x5C31;&#x80FD;&#x627E;&#x5230;&#x95EE;&#x9898;&#x6700;&#x4F18;&#x89E3;<br>&#x7B97;&#x6CD5;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A; &#x7A97;&#x53E3;&#x6700;&#x5927;&#x957F;&#x5EA6;O(n).</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Merge Sort</title>
      <link href="/2019/12/02/Merge-Sort/"/>
      <url>/2019/12/02/Merge-Sort/</url>
      
        <content type="html"><![CDATA[<p>&#x5F52;&#x5E76;&#xFF08;Merge&#xFF09;&#x6392;&#x5E8F;&#x6CD5;&#xFF0C;&#x5373;&#x628A;&#x5F85;&#x6392;&#x5E8F;&#x5E8F;&#x5217;&#x5206;&#x4E3A;&#x82E5;&#x5E72;&#x4E2A;&#x5B50;&#x5E8F;&#x5217;&#xFF0C;&#x6BCF;&#x4E2A;&#x5B50;&#x5E8F;&#x5217;&#x662F;&#x6709;&#x5E8F;&#x7684;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x628A;&#x6709;&#x5E8F;&#x5B50;&#x5E8F;&#x5217;&#x5408;&#x5E76;&#x4E3A;&#x6574;&#x4F53;&#x6709;&#x5E8F;&#x5E8F;&#x5217;&#x3002;</p><a id="more"></a><blockquote><p>&#x7B97;&#x6CD5;&#x5206;&#x6790;<br>    &#x6BCF;&#x4E00;&#x8D9F;&#x5F52;&#x5E76;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(n)&#xFF0C;&#x5171;&#x9700;&#x8981;&#x8FDB;&#x884C;log2n&#x8D9F;&#x3002;&#x5BF9;&#x5E94;&#x7684;&#x7B97;&#x6CD5;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(nlog2n)</p></blockquote><p>&#x4F8B;&#xFF1A;<br>Input     2 4 7 5 8 1 3 6<br>Output    1 2 3 4 5 6 7 8</p><h3 id="&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;"><a href="#&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;" class="headerlink" title="&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;"></a>&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;</h3><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5C06;&#x5F85;&#x6392;&#x5143;&#x7D20;&#x5206;&#x6210;&#x5927;&#x5C0F;&#x5927;&#x81F4;&#x76F8;&#x540C;&#x7684;&#x4E24;&#x4E2A;&#x5B50;&#x96C6;&#xFF0C;&#x5206;&#x522B;&#x5BF9;&#x4E24;&#x4E2A;&#x5B50;&#x96C6;&#x5408;&#x6392;&#x5E8F;&#xFF0C;&#x6700;&#x7EC8;&#x5C06;&#x6392;&#x597D;&#x5E8F;&#x7684;&#x5B50;&#x96C6;&#x5408;&#x5408;&#x5E76;<br>&#x8BBE;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x7684;&#x5F53;&#x524D;&#x533A;&#x95F4;&#x4E3A;R[low&#x2026;high],&#x5206;&#x6CBB;&#x6CD5;&#x7684;&#x4E09;&#x4E2A;&#x6B65;&#x9AA4;&#xFF1A;<br>1&#x3001;&#x5206;&#x89E3; &#x5F53;&#x524D;&#x533A;&#x95F4;&#x4E00;&#x5206;&#x4E3A;&#x4E8C;<br>2&#x3001;&#x6C42;&#x89E3; &#x9012;&#x5F52;&#x5BF9;&#x4E24;&#x4E2A;&#x5B50;&#x533A;&#x95F4;R[low&#x2026;mid]&#x548C;R[mid+1&#x2026;high]<br>3&#x3001;&#x7EC4;&#x5408; &#x5C06;&#x5DF2;&#x6392;&#x5E8F;&#x7684;&#x4E24;&#x4E2A;&#x5B50;&#x533A;&#x95F4;R[low&#x2026;mid]&#x548C;R[mid+1&#x2026;high]&#x5408;&#x5E76;&#x4E3A;&#x4E00;&#x4E2A;&#x6709;&#x5E8F;&#x533A;&#x95F4;R[low&#x2026;high]<br>&#x9012;&#x5F52;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;&#xFF1A;&#x5B50;&#x533A;&#x95F4;&#x957F;&#x5EA6;&#x4E3A;1<br><img src="/2019/12/02/Merge-Sort/3.jpg" width="70%"><img src="/2019/12/02/Merge-Sort/2.jpg" width="80%"></li></ul><p>Mergesort&#x51FD;&#x6570;&#x5B9E;&#x73B0;&#x6B65;&#x9AA4;1&#x3001;2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void mergesort(int a[], int low, int high)</span><br><span class="line">{</span><br><span class="line">int middle = (low + high)/2;</span><br><span class="line">if(low&lt;high)</span><br><span class="line">{</span><br><span class="line">mergesort(a, low, middle);</span><br><span class="line">mergesort(a, middle+1, high);</span><br><span class="line">sort(a, low, middle, high);</span><br><span class="line">cout&lt;&lt;&quot; low: &quot;&lt;&lt;low&lt;&lt;&quot; middle: &quot;&lt;&lt;middle&lt;&lt;&quot; high: &quot;&lt;&lt;high&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>Sort&#x51FD;&#x6570;&#x5B9E;&#x73B0;&#x6B65;&#x9AA4;3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void sort(int a[], int low, int middle, int high)</span><br><span class="line">{</span><br><span class="line">int i = low, j = middle+1, k = 0;</span><br><span class="line">int *b= new int[high-low+1];</span><br><span class="line">while(i&lt;=middle &amp;&amp; j&lt;=high)</span><br><span class="line">{</span><br><span class="line">if(a[i] &lt;= a[j])</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">else</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">}</span><br><span class="line">while(i&lt;=middle)</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">while(j&lt;=high)</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">for(k=0,i=low; i&lt;=high; k++,i++)</span><br><span class="line">a[i] = b[k];</span><br><span class="line">delete []b;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x5B8C;&#x6574;&#x4EE3;&#x7801;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;new&gt; </span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void sort(int a[], int low, int middle, int high)</span><br><span class="line">{</span><br><span class="line">int i = low, j = middle+1, k = 0;</span><br><span class="line">int *b= new int[high-low+1];</span><br><span class="line">while(i&lt;=middle &amp;&amp; j&lt;=high)</span><br><span class="line">{</span><br><span class="line">if(a[i] &lt;= a[j])</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">else</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">}</span><br><span class="line">while(i&lt;=middle)</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">while(j&lt;=high)</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">for(k=0,i=low; i&lt;=high; k++,i++)</span><br><span class="line">a[i] = b[k];</span><br><span class="line">delete []b;</span><br><span class="line">}</span><br><span class="line">void mergesort(int a[], int low, int high)</span><br><span class="line">{</span><br><span class="line">int middle = (low + high)/2;</span><br><span class="line">if(low&lt;high)</span><br><span class="line">{</span><br><span class="line">mergesort(a, low, middle);</span><br><span class="line">mergesort(a, middle+1, high);</span><br><span class="line">sort(a, low, middle, high);</span><br><span class="line">cout&lt;&lt;&quot; low: &quot;&lt;&lt;low&lt;&lt;&quot; middle: &quot;&lt;&lt;middle&lt;&lt;&quot; high: &quot;&lt;&lt;high&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">int a[] = {2, 4, 7, 5, 8, 1, 3, 6};</span><br><span class="line">mergesort(a, 0, 7);</span><br><span class="line">for(int i=0; i&lt;8; i++)</span><br><span class="line">printf(&quot;%d &quot;, a[i]);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x975E;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;"><a href="#&#x975E;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;" class="headerlink" title="&#x975E;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;"></a>&#x975E;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;</h3><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5C06;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x76F8;&#x90BB;&#x5143;&#x7D20;&#x4E24;&#x4E24;&#x914D;&#x5BF9;&#xFF0C;&#x6784;&#x6210;((length-1)/2+1)&#x7EC4;&#x6392;&#x5E8F;&#x597D;&#x7684;&#x5B50;&#x6570;&#x7EC4;&#x6BB5;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x5408;&#x5E76;&#xFF08;(length-1&#xFF09;/4+1)&#x7EC4;&#x5B50;&#x6570;&#x7EC4;&#x6BB5;&#xFF0C;&#x76F4;&#x5230;&#x6574;&#x4E2A;&#x6570;&#x7EC4;&#x6392;&#x5E8F;&#x597D;</li></ul><img src="/2019/12/02/Merge-Sort/4.jpg" width="80%"><p>&#x4E0E;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x76F8;&#x6BD4;&#x4EC5;mergesort&#x51FD;&#x6570;&#x4E0D;&#x540C;<br>&#x4E3B;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x65F6;&#x6539;&#x4E3A;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mergesort(a, 8);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void mergesort(int a[], int length)</span><br><span class="line">{</span><br><span class="line">int low, middle, high, size = 1;</span><br><span class="line">while(size &lt; length-1)</span><br><span class="line">{</span><br><span class="line">low = 0;</span><br><span class="line">while(low+size &lt; length-1)</span><br><span class="line">{</span><br><span class="line">middle = low+size-1;</span><br><span class="line">high = middle+size;</span><br><span class="line">if(high&gt;length-1)</span><br><span class="line">high = length-1;</span><br><span class="line">sort(a, low, middle, high);</span><br><span class="line">cout&lt;&lt;&quot; low: &quot;&lt;&lt;low&lt;&lt;&quot; middle: &quot;&lt;&lt;middle&lt;&lt;&quot; high: &quot;&lt;&lt;high&lt;&lt;endl;</span><br><span class="line">low = high+1;</span><br><span class="line">}</span><br><span class="line">size *= 2;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x81EA;&#x7136;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;"><a href="#&#x81EA;&#x7136;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;" class="headerlink" title="&#x81EA;&#x7136;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;"></a>&#x81EA;&#x7136;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;</h3><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5BF9;&#x4E8E;&#x521D;&#x59CB;&#x6570;&#x7EC4;a&#xFF0C;&#x901A;&#x5E38;&#x5B58;&#x5728;&#x591A;&#x4E2A;&#x957F;&#x5EA6;&#x5927;&#x4E8E;1&#x7684;&#x5DF2;&#x6392;&#x597D;&#x5E8F;&#x7684;&#x5B50;&#x6570;&#x7EC4;&#x6BB5;&#xFF0C;&#x627E;&#x51FA;&#x8FD9;&#x6837;&#x7684;&#x5B50;&#x6570;&#x7EC4;&#x6BB5;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x76F8;&#x90BB;&#x7684;&#x6392;&#x597D;&#x5E8F;&#x7684;&#x5B50;&#x6570;&#x7EC4;&#x6BB5;&#x4E24;&#x4E24;&#x5408;&#x5E76;&#xFF0C;&#x76F4;&#x81F3;&#x6574;&#x4E2A;&#x6570;&#x7EC4;&#x6392;&#x597D;&#x5E8F;</li></ul><p>1.Mergepass&#x51FD;&#x6570;&#x5B9E;&#x65F6;&#x67E5;&#x8BE2;&#x6570;&#x7EC4;a&#x4E2D;&#x6709;&#x591A;&#x5C11;&#x7EC4;&#x6392;&#x597D;&#x5E8F;&#x7684;&#x5B50;&#x6570;&#x7EC4;<br>2.&#x5C06;&#x8FD4;&#x56DE;&#x503C;&#x4F20;&#x7ED9;Mergesort&#x51FD;&#x6570;&#xFF0C;&#x518D;&#x8FDB;&#x884C;&#x6709;&#x5E8F;&#x5B50;&#x5E8F;&#x5217;&#x7684;&#x5408;&#x5E76;<br>3.&#x5408;&#x5E76;&#x64CD;&#x4F5C;&#x8C03;&#x7528;Sort&#x51FD;&#x6570;</p><p>&#x5B8C;&#x6574;&#x4EE3;&#x7801;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;new&gt; </span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int s[100]; </span><br><span class="line">void Sort(int a[], int low, int middle, int high)</span><br><span class="line">{</span><br><span class="line">int i = low, j = middle+1, k = 0;</span><br><span class="line">int *b= new int[high-low+1];</span><br><span class="line">while(i&lt;=middle &amp;&amp; j&lt;=high)</span><br><span class="line">{</span><br><span class="line">if(a[i] &lt;= a[j])</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">else</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">}</span><br><span class="line">while(i&lt;=middle)</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">while(j&lt;=high)</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">for(k=0,i=low; i&lt;=high; k++,i++)</span><br><span class="line">a[i] = b[k];</span><br><span class="line">delete []b;</span><br><span class="line">}</span><br><span class="line">int Mergepass(int x[], int n)</span><br><span class="line">{</span><br><span class="line">int k=0;</span><br><span class="line">int begin = x[0];</span><br><span class="line">s[k++] = 0;</span><br><span class="line">for(int i=1; i&lt;n; i++)</span><br><span class="line">{</span><br><span class="line">if(x[i] &lt; begin)</span><br><span class="line">s[k++] = i;</span><br><span class="line">begin = x[i];</span><br><span class="line">}</span><br><span class="line">s[k++] = n;</span><br><span class="line">return k;</span><br><span class="line">}</span><br><span class="line">void Mergesort(int a[], int length)</span><br><span class="line">{</span><br><span class="line">int Num = Mergepass(a, length);//&#x8FD4;&#x56DE;&#x7684;&#x662F;&#x5B50;&#x6570;&#x7EC4;&#x6BB5;&#x4E2A;&#x6570;+1</span><br><span class="line">while(Num != 2)</span><br><span class="line">{</span><br><span class="line">for(int i=0; i+1&lt;Num; i+=2)</span><br><span class="line">Sort(a, s[i], s[i+1]-1, s[i+2]-1);</span><br><span class="line">//&#x5373;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5408;&#x5E76;&#x4E2D;&#x7684;Sort(a,low,middle,high)</span><br><span class="line">Num = Mergepass(a, length);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">int  main()</span><br><span class="line">{ </span><br><span class="line">  int num[] = {2, 4, 7, 5, 8, 1, 3, 6};    </span><br><span class="line">    Mergesort(num,8);   </span><br><span class="line">    for(int i=0;i&lt;8;i++)</span><br><span class="line">    cout&lt;&lt;num[i]&lt;&lt;&apos; &apos;;  </span><br><span class="line">cout&lt;&lt;endl;    </span><br><span class="line">    return 0;       </span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stack</title>
      <link href="/2019/12/01/Stack/"/>
      <url>/2019/12/01/Stack/</url>
      
        <content type="html"><![CDATA[<h2 id="&#x6808;"><a href="#&#x6808;" class="headerlink" title="&#x6808;"></a>&#x6808;</h2><h3 id="&#x6C42;&#x89E3;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;"><a href="#&#x6C42;&#x89E3;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;" class="headerlink" title="&#x6C42;&#x89E3;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;"></a>&#x6C42;&#x89E3;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;</h3><blockquote><p>&#x7528;&#x6237;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x5305;&#x542B;&#x201C;+&#x201D;&#x3001;&#x201C;-&#x201D;&#x3001;&#x201C;*&#x201D;&#x3001;&#x201C;/&#x201D;&#x3001;&#x6B63;&#x6574;&#x6570;&#x548C;&#x5706;&#x62EC;&#x53F7;&#x7684;&#x5408;&#x6CD5;&#x7B97;&#x672F;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x8BA1;&#x7B97;&#x8BE5;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x8FD0;&#x7B97;&#x7ED3;&#x679C;(&#x4FDD;&#x7559;&#x5C0F;&#x6570;&#x70B9;&#x540E;&#x4E00;&#x4F4D;).<br>Input  (56-20)/(4+2)<br>Output  6.0</p></blockquote><a id="more"></a><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>1.&#x4E2D;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#x8F6C;&#x5316;&#x4E3A;&#x540E;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;<br>2.&#x540E;&#x7F00;&#x8868;&#x793A;&#x5F0F;&#x6C42;&#x503C;<br>&#x5934;&#x6587;&#x4EF6;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">using namespace std;</span><br></pre></td></tr></table></figure></li></ul><p>&#x4E3B;&#x51FD;&#x6570;&#x4E2D;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#x5B58;&#x5165;&#x6570;&#x7EC4;exp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">char exp[100], postexp[100];</span><br><span class="line">scanf(&quot;%s&quot;, exp);</span><br><span class="line">printf(&quot;&#x4E2D;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#xFF1A;&quot;); </span><br><span class="line">printf(&quot;%s\n&quot;, exp);</span><br><span class="line">Trans(exp, postexp);</span><br><span class="line">printf(&quot;&#x540E;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#xFF1A;&quot;);</span><br><span class="line">printf(&quot;%s\n&quot;, postexp);</span><br><span class="line">printf(&quot;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;&#xFF1A;&quot;);</span><br><span class="line">printf(&quot;%.1f\n&quot;, Disp(postexp));</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>1.&#x51FD;&#x6570;Trans&#x5C06;&#x4E2D;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#x8F6C;&#x5316;&#x4E3A;&#x540E;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;<br>&#x5B9A;&#x4E49;char&#x7C7B;&#x578B;&#x6808;a&#xFF0C;&#x626B;&#x63CF;&#x5B57;&#x7B26;&#x4E32;exp<br>&#x53EA;&#x8BA9;&#x8FD0;&#x7B97;&#x7B26;&#x8FDB;&#x6808;&#xFF0C;&#x6570;&#x5B57;&#x5B57;&#x7B26;&#x5B58;&#x5165;&#x6570;&#x7EC4;postexp<br>&#x5BF9;&#x4E8E;&#x4E0D;&#x540C;&#x8FD0;&#x7B97;&#x7B26;<br>&#x2018;(&#x2019;&#xFF1A;&#x8FDB;&#x6808;<br>&#x2018;)&#x2019;&#xFF1A;&#x5C06;&#x6700;&#x540E;&#x8FDB;&#x5165;&#x7684;&#x2019;(&#x2019;&#x4E4B;&#x524D;&#x7684;&#x8FD0;&#x7B97;&#x7B26;&#x51FA;&#x6808;&#xFF0C;&#x5E76;&#x5B58;&#x653E;&#x5230;postexp&#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x2019;(&#x2019;&#x51FA;&#x6808;<br>&#x2018;+&#x2019;&#x3001;&#x2019;-&#x2019;&#xFF1A;&#x51FA;&#x6808;&#xFF0C;&#x8FD0;&#x7B97;&#x7B26;&#x5B58;&#x653E;&#x5230;postexp&#x4E2D;&#xFF0C;&#x76F4;&#x5230;&#x6808;&#x7A7A;&#x6216;&#x6808;&#x9876;&#x4E3A;&#x2019;(&#x2019;<br>&#x2018;*&#x2019;&#x3001;&#x2019;/&#x2019;&#xFF1A;&#x51FA;&#x6808;&#xFF0C;&#x8FD0;&#x7B97;&#x7B26;&#x5B58;&#x653E;&#x5230;postexp&#x4E2D;&#xFF0C;&#x76F4;&#x5230;&#x6808;&#x7A7A;&#x6216;&#x6808;&#x9876;&#x4E3A;&#x2019;(&#x2019;&#x3001;&#x2019;+&#x2019;&#x3001;&#x2019;-&#x2019;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">void Trans(char *exp, char postexp[])</span><br><span class="line">{</span><br><span class="line">char e;</span><br><span class="line">stack&lt;char&gt; a;</span><br><span class="line">int i=0;</span><br><span class="line">while(*exp!=&apos;\0&apos;)</span><br><span class="line">{</span><br><span class="line">switch(*exp)</span><br><span class="line">{</span><br><span class="line">case &apos;(&apos;: a.push(&apos;(&apos;); exp++; break;</span><br><span class="line">case &apos;)&apos;: e = a.top(); </span><br><span class="line">  a.pop();</span><br><span class="line">  while(e!=&apos;(&apos;)</span><br><span class="line">  {</span><br><span class="line">  postexp[i++] = e;</span><br><span class="line">  e = a.top(); a.pop();</span><br><span class="line">  }</span><br><span class="line">  exp++; break;</span><br><span class="line">case &apos;+&apos;: </span><br><span class="line">case &apos;-&apos;: while(!a.empty())</span><br><span class="line">  {</span><br><span class="line">  e = a.top();</span><br><span class="line">  if(e!=&apos;(&apos;)</span><br><span class="line">  {</span><br><span class="line">  postexp[i++] = e;</span><br><span class="line">  e = a.top(); a.pop();</span><br><span class="line">}</span><br><span class="line">else </span><br><span class="line">break;</span><br><span class="line">  }</span><br><span class="line">  a.push(*exp); exp++; break;  </span><br><span class="line">case &apos;*&apos;:</span><br><span class="line">case &apos;/&apos;: while(!a.empty())</span><br><span class="line">  {</span><br><span class="line">  e = a.top();</span><br><span class="line">  if(e==&apos;*&apos;||e==&apos;/&apos;)</span><br><span class="line">  {</span><br><span class="line">  postexp[i++] = e;</span><br><span class="line">  e = a.top();</span><br><span class="line">  }</span><br><span class="line">else</span><br><span class="line">break;</span><br><span class="line">  }</span><br><span class="line">  a.push(*exp); exp++; break;</span><br><span class="line">default :</span><br><span class="line">while(*exp&gt;=&apos;0&apos; &amp;&amp; *exp&lt;=&apos;9&apos;)    //&#x5C06;&#x8FDE;&#x7EED;&#x6570;&#x5B57;&#x5B57;&#x7B26;&#x5B58;&#x5165;&#x6570;&#x7EC4;postexp </span><br><span class="line">{</span><br><span class="line">postexp[i++] = *exp;</span><br><span class="line">*exp++;</span><br><span class="line">}</span><br><span class="line">postexp[i++] = &apos;#&apos;;//&#x8FDE;&#x7EED;&#x6570;&#x5B57;&#x5B57;&#x7B26;&#x540E;&#x52A0;&apos;#&apos;&#x4EE5;&#x6807;&#x8BB0; </span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">while(!a.empty())</span><br><span class="line">{</span><br><span class="line">e = a.top();</span><br><span class="line">a.pop();</span><br><span class="line">postexp[i++] = e;</span><br><span class="line">}</span><br><span class="line">postexp[i] = &apos;\0&apos;;      //&#x540E;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#x4EE5;&#x5B57;&#x7B26;&#x4E32;&#x5F62;&#x5F0F;&#x5B58;&#x653E; </span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>2.&#x51FD;&#x6570;Disp&#x8BA1;&#x7B97;&#x540E;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;<br>&#x5B9A;&#x4E49;double&#x7C7B;&#x578B;&#x6808;opnd&#xFF0C;&#x626B;&#x63CF;&#x6570;&#x7EC4;postexp<br>&#x6570;&#x5B57;&#x5B57;&#x7B26;&#xFF1A;&#x8F6C;&#x5316;&#x4E3A;&#x6570;&#x503C;&#x5E76;&#x8FDB;&#x6808;<br>&#x8FD0;&#x7B97;&#x7B26;&#xFF1A;&#x9000;&#x6808;&#x4E24;&#x4E2A;&#x6570;&#xFF0C;&#x8BA1;&#x7B97;&#xFF0C;&#x5C06;&#x7ED3;&#x679C;&#x8FDB;&#x6808;<br>&#x626B;&#x63CF;&#x7ED3;&#x675F;&#xFF0C;&#x51FA;&#x6808;&#x7ED3;&#x679C;&#x5373;&#x4E3A;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">double Disp(char *postexp)</span><br><span class="line">{</span><br><span class="line">stack&lt;double&gt; opnd;</span><br><span class="line">double a, b, c, e, d;</span><br><span class="line">while(*postexp!=&apos;\0&apos;)</span><br><span class="line">{</span><br><span class="line">switch(*postexp)</span><br><span class="line">{</span><br><span class="line">case &apos;+&apos;: a = opnd.top(); opnd.pop();</span><br><span class="line">  b = opnd.top(); opnd.pop();</span><br><span class="line">  c = a+ b;</span><br><span class="line">  opnd.push(c);</span><br><span class="line">  break;</span><br><span class="line">case &apos;-&apos;: a = opnd.top(); opnd.pop();</span><br><span class="line">  b = opnd.top(); opnd.pop();</span><br><span class="line">  c = b-a;</span><br><span class="line">  opnd.push(c);</span><br><span class="line">  break;</span><br><span class="line">case &apos;*&apos;: a = opnd.top(); opnd.pop();</span><br><span class="line">  b = opnd.top(); opnd.pop();</span><br><span class="line">  c = a* b;</span><br><span class="line">  opnd.push(c);</span><br><span class="line">  break;</span><br><span class="line">case &apos;/&apos;: a = opnd.top(); opnd.pop();</span><br><span class="line">  b = opnd.top(); opnd.pop();</span><br><span class="line">  if(a)</span><br><span class="line">  {</span><br><span class="line">  c = (double)b/a;</span><br><span class="line">  opnd.push(c);</span><br><span class="line">  break;</span><br><span class="line">  }</span><br><span class="line">  else exit(0);</span><br><span class="line">    default:</span><br><span class="line">    d = 0;</span><br><span class="line">    while(*postexp&gt;=&apos;0&apos; &amp;&amp; *postexp&lt;=&apos;9&apos;)</span><br><span class="line">    {</span><br><span class="line">    d=10*d+*postexp-&apos;0&apos;;    //&#x8FDE;&#x7EED;&#x7684;&#x6570;&#x5B57;&#x5B57;&#x7B26;&#x8F6C;&#x5316;&#x4E3A;&#x6570;&#x503C;&#xFF0C;</span><br><span class="line">    postexp++;//&#x76F4;&#x5230;&#x9047;&#x5230;&apos;#&apos;&#x4E0D;&#x518D;&#x5FAA;&#x73AF;  </span><br><span class="line">}</span><br><span class="line">opnd.push(d);</span><br><span class="line">    break;</span><br><span class="line">}</span><br><span class="line">postexp++;</span><br><span class="line">e = opnd.top();</span><br><span class="line">}</span><br><span class="line">e = opnd.top();</span><br><span class="line">return e;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x8FD0;&#x884C;&#x7ED3;&#x679C;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br><img width="70%" src="/2019/12/01/Stack/1.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Queue</title>
      <link href="/2019/11/30/Queue-0/"/>
      <url>/2019/11/30/Queue-0/</url>
      
        <content type="html"><![CDATA[<h2 id="&#x5FAA;&#x73AF;&#x961F;&#x5217;"><a href="#&#x5FAA;&#x73AF;&#x961F;&#x5217;" class="headerlink" title="&#x5FAA;&#x73AF;&#x961F;&#x5217;"></a>&#x5FAA;&#x73AF;&#x961F;&#x5217;</h2><h3 id="&#x6C42;&#x89E3;&#x62A5;&#x6570;&#x95EE;&#x9898;"><a href="#&#x6C42;&#x89E3;&#x62A5;&#x6570;&#x95EE;&#x9898;" class="headerlink" title="&#x6C42;&#x89E3;&#x62A5;&#x6570;&#x95EE;&#x9898;"></a>&#x6C42;&#x89E3;&#x62A5;&#x6570;&#x95EE;&#x9898;</h3><blockquote><p>&#x8BBE;&#x6709;n&#x4E2A;&#x4EBA;&#x5360;&#x6210;&#x4E00;&#x6392;&#xFF0C;&#x4ECE;&#x5DE6;&#x5411;&#x53F3;&#x7684;&#x7F16;&#x53F7;&#x5206;&#x522B;&#x4E3A;1~n&#xFF0C;&#x73B0;&#x5728;&#x4ECE;&#x5DE6;&#x5F80;&#x53F3;&#x62A5;&#x6570;&#x201C;1&#xFF0C;2&#xFF0C;1&#xFF0C;2&#x2026;&#x2026;&#x201D;&#xFF0C;&#x6570;&#x5230;&#x201C;1&#x201D;&#x7684;&#x4EBA;&#x51FA;&#x5217;&#xFF0C;&#x6570;&#x5230;&#x201C;2&#x201D;&#x7684;&#x4EBA;&#x7AD9;&#x5230;&#x961F;&#x5217;&#x7684;&#x6700;&#x53F3;&#x7AEF;&#x3002;<a id="more"></a><font size="5">&#x62A5;&#x6570;&#x8FC7;&#x7A0B;&#x53CD;&#x590D;&#x8FDB;&#x884C;&#xFF0C;&#x76F4;&#x5230;n&#x4E2A;&#x4EBA;&#x90FD;&#x51FA;&#x961F;&#x5217;&#x4E3A;&#x6B62;&#x3002;</font>&#x8981;&#x6C42;&#x7ED9;&#x51FA;&#x4ED6;&#x4EEC;&#x7684;&#x51FA;&#x5217;&#x987A;&#x5E8F;&#x3002;<br>&#x4F8B;&#x5982;&#xFF0C;&#x5F53;n=8&#x65F6;&#x7684;&#x521D;&#x59CB;&#x5E8F;&#x5217;&#x4E3A;&#xFF1A;<br>1 2 3 4 5 6 7 8<br>&#x5219;&#x51FA;&#x5217;&#x987A;&#x5E8F;&#xFF1A;<br>1 3 5 7 2 6 4 8</p></blockquote><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x91C7;&#x7528;&#x73AF;&#x5F62;&#x961F;&#x5217;&#xFF0C;&#x505A;&#x5982;&#x4E0B;&#x64CD;&#x4F5C;&#xFF1A;<br>1.&#x51FA;&#x961F;&#x4E00;&#x4E2A;&#x5143;&#x7D20;(&#x62A5;&#x6570;&#x4E3A;1&#x7684;&#x4EBA;)&#xFF0C;&#x8F93;&#x51FA;&#x5176;&#x7F16;&#x53F7;<br>2.&#x82E5;&#x961F;&#x5217;&#x4E0D;&#x7A7A;&#xFF0C;&#x51FA;&#x961F;&#x4E00;&#x4E2A;&#x5143;&#x7D20;(&#x62A5;&#x6570;&#x4E3A;2&#x7684;&#x4EBA;)&#xFF0C;&#x518D;&#x8BA9;&#x5176;&#x5165;&#x961F;</li></ul><p>&#x5FAA;&#x73AF;&#x961F;&#x5217;&#x521B;&#x5EFA;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">typedef struct queue Queue;</span><br><span class="line">struct queue</span><br><span class="line">{</span><br><span class="line">int data[Maxsize];</span><br><span class="line">int front;</span><br><span class="line">int rear;</span><br><span class="line">};</span><br><span class="line">bool Full(Queue *L)            //&#x5224;&#x6EE1;</span><br><span class="line">{</span><br><span class="line">return ((L-&gt;rear+1)%Maxsize == L-&gt;front);</span><br><span class="line">}</span><br><span class="line">bool Empty(Queue *L)           //&#x5224;&#x7A7A;</span><br><span class="line">{</span><br><span class="line">return (L-&gt;front == L-&gt;rear);</span><br><span class="line">}</span><br><span class="line">void Enqueue(Queue *L, int e)   //&#x5165;&#x961F;</span><br><span class="line">{</span><br><span class="line">if(!Full(L))</span><br><span class="line">{</span><br><span class="line">L-&gt;rear = (L-&gt;rear+1)%Maxsize;</span><br><span class="line">L-&gt;data[L-&gt;rear] = e;</span><br><span class="line">}</span><br><span class="line">else</span><br><span class="line">exit(0);</span><br><span class="line">}</span><br><span class="line">void Dequeue(Queue *L,int *e)   //&#x51FA;&#x961F;</span><br><span class="line">{</span><br><span class="line">L-&gt;front = (L-&gt;front+1)%Maxsize;</span><br><span class="line">*e = L-&gt;data[L-&gt;front];</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x4E3B;&#x51FD;&#x6570;&#x8F93;&#x51FA;&#x961F;&#x5217;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">Queue *L = (Queue *)malloc(sizeof(Queue));</span><br><span class="line">L-&gt;front = L-&gt;rear = 0;</span><br><span class="line">int a[] = {1, 2, 3, 4, 5, 6, 7, 8}, e;</span><br><span class="line">for(int i=0; i&lt;8; i++)</span><br><span class="line">Enqueue(L,a[i]);</span><br><span class="line">while(!Empty(L))        //&#x62A5;&#x6570;&#x4E3A;1&#x7684;&#x4EBA;&#x51FA;&#x961F;</span><br><span class="line">{</span><br><span class="line">Dequeue(L,&amp;e);</span><br><span class="line">printf(&quot;%d &quot;,e);</span><br><span class="line">if(!Empty(L))   //&#x975E;&#x7A7A;&#xFF0C;&#x62A5;&#x6570;&#x4E3A;2&#x7684;&#x4EBA;&#x51FA;&#x961F;&#x518D;&#x5165;&#x961F;</span><br><span class="line">{</span><br><span class="line">Dequeue(L,&amp;e);</span><br><span class="line">Enqueue(L, e);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">    return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x8FD0;&#x884C;&#x7ED3;&#x679C;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br><img width="50%" src="/2019/11/30/Queue-0/1.jpg"></p><hr><p>&#x8D77;&#x521D;&#x4EE5;&#x4E3A;&#x62A5;&#x6570;&#x95EE;&#x9898;&#x5C31;&#x662F;&#x65E5;&#x5E38;&#x7684;&#x62A5;&#x6570;&#xFF0C;1~n&#x62A5;&#x5B8C;&#x540E;&#x5C31;&#x7ED3;&#x675F;&#xFF0C;&#x8BEF;&#x8BA4;&#x4E3A;&#x8F93;&#x51FA;&#x961F;&#x5217;&#x987A;&#x5E8F;&#x662F;&#xFF1A;<br>1 3 5 7 2 4 6 8</p><ul><li><strong>&#x9519;&#x89E3;</strong><br>&#x521B;&#x5EFA;&#x957F;&#x5EA6;&#x4E3A;N(N=9)&#x7684;&#x5FAA;&#x73AF;&#x961F;&#x5217;&#xFF0C;&#x4F7F;&#x961F;&#x5217;&#x5DF2;&#x6EE1;&#x3002;<br>1~n&#x62A5;&#x5B8C;&#x5373;&#xFF08;L-&gt;rear==N/2-1&#xFF09;&#x6210;&#x7ACB;&#xFF0C;&#x518D;&#x51FA;&#x961F;&#x76F4;&#x81F3;&#x961F;&#x5217;&#x4E3A;&#x7A7A;</li></ul><img width="100%" src="/2019/11/30/Queue-0/2.jpg"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">while(!Empty(L))</span><br><span class="line">{</span><br><span class="line">if(L-&gt;rear == (Maxsize)/2-1)</span><br><span class="line">{</span><br><span class="line">Dequeue(L,&amp;e);</span><br><span class="line">printf(&quot;\n%d &quot;, e);</span><br><span class="line">}</span><br><span class="line">else</span><br><span class="line">{</span><br><span class="line">printf(&quot;%d &quot;, e);</span><br><span class="line">if(!Empty(L))</span><br><span class="line">{</span><br><span class="line">Dequeue(L, &amp;e);</span><br><span class="line">Enqueue(L, e);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lnode</title>
      <link href="/2019/10/26/Lnode/"/>
      <url>/2019/10/26/Lnode/</url>
      
        <content type="html"><![CDATA[<h2 id="&#x94FE;&#x8868;"><a href="#&#x94FE;&#x8868;" class="headerlink" title="&#x94FE;&#x8868;"></a>&#x94FE;&#x8868;</h2><h3 id="1-&#x5355;&#x94FE;&#x8868;&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x4E8C;&#x4E2A;&#x5355;&#x94FE;&#x8868;"><a href="#1-&#x5355;&#x94FE;&#x8868;&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x4E8C;&#x4E2A;&#x5355;&#x94FE;&#x8868;" class="headerlink" title="1.&#x5355;&#x94FE;&#x8868;&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x4E8C;&#x4E2A;&#x5355;&#x94FE;&#x8868;"></a>1.&#x5355;&#x94FE;&#x8868;&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x4E8C;&#x4E2A;&#x5355;&#x94FE;&#x8868;</h3><blockquote><p>&#x8981;&#x6C42;&#xFF1A;&#x5C06;&#x4E00;&#x4E2A;&#x5E26;&#x5934;&#x7ED3;&#x70B9;&#x7684;&#x5355;&#x94FE;&#x8868;<br>L=(a1, b1, a2, b2, &#x2026;, an, bn)&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x5E26;&#x5934;&#x7ED3;&#x70B9;&#x7684;&#x5355;&#x94FE;&#x8868;L1&#x548C;L2&#xFF0C;L1=(a1, a2,&#x2026;,an), L2 = (bn, bn-1, &#x2026;,b1). </p></blockquote><a id="more"></a><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>split&#x51FD;&#x6570;&#x5B9E;&#x73B0;&#x62C6;&#x5206;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void Split(Lnode *L, Lnode *L1, Lnode *L2)</span><br><span class="line">{</span><br><span class="line">    Lnode *p = L-&gt;next, *q, *r;</span><br><span class="line">    r = L1; </span><br><span class="line">    while(p)            //&#x5C3E;&#x63D2;&#x6CD5;&#x5F97;L1&#xFF0C;&#x5934;&#x63D2;&#x6CD5;&#x5F97;L2 </span><br><span class="line">    {</span><br><span class="line">    r-&gt;next = p; // &#x5C06;p(valude&#x503C;&#x4E3A;ai)&#x63D2;&#x5165;L1 </span><br><span class="line">    r = p;</span><br><span class="line">    p = p-&gt;next; //p&#x79FB;&#x5230;&#x4E0B;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;(value&#x503C;&#x4E3A;bi) </span><br><span class="line">    q = p-&gt;next;//&#x5934;&#x63D2;&#x6CD5;&#x4F1A;&#x4FEE;&#x6539;p&#x7684;next&#x57DF;&#xFF0C;&#x7528;q&#x4FDD;&#x5B58;p&#x7684;&#x540E;&#x7EE7;&#x7ED3;&#x70B9; </span><br><span class="line">    p-&gt;next = L2-&gt;next;   </span><br><span class="line">    L2-&gt;next = p;</span><br><span class="line">    p = q;    //p&#x91CD;&#x65B0;&#x6307;&#x5411;ai+1&#x7684;&#x7ED3;&#x70B9; </span><br><span class="line">   }</span><br><span class="line">    r-&gt;next = NULL; </span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><p>DispList&#x51FD;&#x6570;&#x8F93;&#x51FA;&#x5355;&#x94FE;&#x8868;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void DispList(Lnode *L)</span><br><span class="line">{</span><br><span class="line">    Lnode *p = L-&gt;next;</span><br><span class="line">    while(p)</span><br><span class="line">    {</span><br><span class="line">    printf(&quot;%d &quot;, p-&gt;value);</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">}</span><br><span class="line">   printf(&quot;\n&quot;);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x5B8C;&#x6574;&#x4EE3;&#x7801;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct lnode Lnode;</span><br><span class="line">struct lnode</span><br><span class="line">{</span><br><span class="line">int value;</span><br><span class="line">Lnode *next;</span><br><span class="line">};</span><br><span class="line">void Split(Lnode *L, Lnode *L1, Lnode *L2)</span><br><span class="line">{</span><br><span class="line">Lnode *p = L-&gt;next, *q, *r;</span><br><span class="line">r = L1; </span><br><span class="line">while(p)            //&#x5C3E;&#x63D2;&#x6CD5;&#x5F97;L1&#xFF0C;&#x5934;&#x63D2;&#x6CD5;&#x5F97;L2 </span><br><span class="line">{</span><br><span class="line">r-&gt;next = p; // &#x5C06;p(valude&#x503C;&#x4E3A;ai)&#x63D2;&#x5165;L1 </span><br><span class="line">r = p;</span><br><span class="line">p = p-&gt;next; //p&#x79FB;&#x5230;&#x4E0B;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;(value&#x503C;&#x4E3A;bi) </span><br><span class="line">q = p-&gt;next;//&#x5934;&#x63D2;&#x6CD5;&#x4F1A;&#x4FEE;&#x6539;p&#x7684;next&#x57DF;&#xFF0C;&#x7528;q&#x4FDD;&#x5B58;p&#x7684;&#x540E;&#x7EE7;&#x7ED3;&#x70B9; </span><br><span class="line">p-&gt;next = L2-&gt;next;   </span><br><span class="line">L2-&gt;next = p;</span><br><span class="line">p = q;    //p&#x91CD;&#x65B0;&#x6307;&#x5411;ai+1&#x7684;&#x7ED3;&#x70B9; </span><br><span class="line">}</span><br><span class="line">r-&gt;next = NULL; </span><br><span class="line">}</span><br><span class="line">void DispList(Lnode *L)</span><br><span class="line">{</span><br><span class="line">Lnode *p = L-&gt;next;</span><br><span class="line">while(p)</span><br><span class="line">{</span><br><span class="line">printf(&quot;%d &quot;, p-&gt;value);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">}</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">}</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">Lnode *L = (Lnode *)malloc(sizeof(Lnode)), </span><br><span class="line">*L1 = (Lnode *)malloc(sizeof(Lnode)), </span><br><span class="line">*L2 = (Lnode *)malloc(sizeof(Lnode));</span><br><span class="line">L-&gt;next = NULL;</span><br><span class="line">L1-&gt;next = NULL;</span><br><span class="line">L2-&gt;next = NULL;</span><br><span class="line">Lnode *current = L;</span><br><span class="line">int i = 0;</span><br><span class="line">while(i&lt;1)</span><br><span class="line">{</span><br><span class="line">Lnode *p = (Lnode *)malloc(sizeof(Lnode));</span><br><span class="line">scanf(&quot;%d&quot;, &amp;p-&gt;value);</span><br><span class="line">current-&gt;next = p;</span><br><span class="line">current = p;</span><br><span class="line">if(getchar() == &apos;\n&apos;)</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line">current-&gt;next = NULL;</span><br><span class="line">Split(L, L1, L2);</span><br><span class="line">DispList(L1);</span><br><span class="line">DispList(L2);</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x8FD0;&#x884C;&#x7ED3;&#x679C;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br><img width="60%" src="/2019/10/26/Lnode/Lnode1.jpg"></p><h3 id="2-&#x5224;&#x65AD;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E2D;&#x6570;&#x636E;&#x7ED3;&#x70B9;-&#x542B;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x7ED3;&#x70B9;-&#x662F;&#x5426;&#x5BF9;&#x79F0;"><a href="#2-&#x5224;&#x65AD;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E2D;&#x6570;&#x636E;&#x7ED3;&#x70B9;-&#x542B;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x7ED3;&#x70B9;-&#x662F;&#x5426;&#x5BF9;&#x79F0;" class="headerlink" title="2.&#x5224;&#x65AD;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E2D;&#x6570;&#x636E;&#x7ED3;&#x70B9;(&#x542B;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x7ED3;&#x70B9;)&#x662F;&#x5426;&#x5BF9;&#x79F0;"></a>2.&#x5224;&#x65AD;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E2D;&#x6570;&#x636E;&#x7ED3;&#x70B9;(&#x542B;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x7ED3;&#x70B9;)&#x662F;&#x5426;&#x5BF9;&#x79F0;</h3><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>  P&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x626B;&#x63CF;L&#xFF0C;q&#x4ECE;&#x53F3;&#x5230;&#x5DE6;&#x626B;&#x63CF;L&#xFF0C;&#x7136;&#x540E;&#x5FAA;&#x73AF;&#xFF0C;&#x76F4;&#x5230;p=q  &#x6216; p=q-&gt;prior.<br>  IsSymm&#x51FD;&#x6570;&#x626B;&#x63CF;L.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int IsSymm(DLnode *L)</span><br><span class="line">{</span><br><span class="line">DLnode *p = L-&gt;next;//p&#x6307;&#x5411;&#x9996;&#x7ED3;&#x70B9;</span><br><span class="line">DLnode *q = L-&gt;prior;//q&#x6307;&#x5411;&#x5C3E;&#x7ED3;&#x70B9; </span><br><span class="line">while(p-&gt;value == q-&gt;value)    //&#x5F53;&#x7ED3;&#x70B9;&#x503C;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x9000;&#x51FA;&#x5FAA;&#x73AF; </span><br><span class="line">{</span><br><span class="line">    if(p==q || p-&gt;prior == q)  //&#x7ED3;&#x70B9;&#x6570;&#x4E3A;&#x5947;&#x6570;||&#x7ED3;&#x70B9;&#x6570;&#x4E3A;&#x5076;&#x6570; </span><br><span class="line">return 1;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q = q-&gt;prior;</span><br><span class="line">}</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x5B8C;&#x6574;&#x4EE3;&#x7801;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct Dlnode DLnode;</span><br><span class="line">struct Dlnode</span><br><span class="line">{</span><br><span class="line">int value;</span><br><span class="line">DLnode *prior;</span><br><span class="line">DLnode *next;</span><br><span class="line">};</span><br><span class="line">int IsSymm(DLnode *L)</span><br><span class="line">{</span><br><span class="line">DLnode *p = L-&gt;next;//p&#x6307;&#x5411;&#x9996;&#x7ED3;&#x70B9;</span><br><span class="line">DLnode *q = L-&gt;prior;//q&#x6307;&#x5411;&#x5C3E;&#x7ED3;&#x70B9; </span><br><span class="line">while(p-&gt;value == q-&gt;value)    //&#x5F53;&#x7ED3;&#x70B9;&#x503C;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x9000;&#x51FA;&#x5FAA;&#x73AF; </span><br><span class="line">{</span><br><span class="line">    if(p==q || p-&gt;prior == q)  //&#x7ED3;&#x70B9;&#x6570;&#x4E3A;&#x5947;&#x6570;||&#x7ED3;&#x70B9;&#x6570;&#x4E3A;&#x5076;&#x6570; </span><br><span class="line">return 1;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q = q-&gt;prior;</span><br><span class="line">}</span><br><span class="line">return 0;</span><br><span class="line">}</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">DLnode *L = (DLnode *)malloc(sizeof(DLnode));</span><br><span class="line">L-&gt;next = L-&gt;prior = NULL;</span><br><span class="line">int i = 0;</span><br><span class="line">DLnode *r = L, *p; </span><br><span class="line">while(i&lt;1)</span><br><span class="line">{</span><br><span class="line">p = (DLnode *)malloc(sizeof(DLnode));</span><br><span class="line">scanf(&quot;%d&quot;, &amp;p-&gt;value);</span><br><span class="line">r-&gt;next = p;</span><br><span class="line">p-&gt;prior = r;       // &#x53CC;&#x94FE;&#x8868;&#x5C3E;&#x63D2;&#x6CD5;&#x5B58;&#x5165;L </span><br><span class="line">r = p;                    </span><br><span class="line">if(getchar() == &apos;\n&apos;)</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line">r-&gt;next = L;</span><br><span class="line">L-&gt;prior = r;</span><br><span class="line">if(IsSymm(L))</span><br><span class="line">printf(&quot;&#x8BE5;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x5BF9;&#x79F0;\n&quot;);</span><br><span class="line">else</span><br><span class="line">printf(&quot;&#x8BE5;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E0D;&#x5BF9;&#x79F0;\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x8FD0;&#x884C;&#x7ED3;&#x679C;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><img width="60%" src="/2019/10/26/Lnode/Lnode2.jpg">]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hey-piggy</title>
      <link href="/2019/10/26/hey-piggy/"/>
      <url>/2019/10/26/hey-piggy/</url>
      
        <content type="html"><![CDATA[<p>Nothing is impossble for a willing heart!</p><a id="more"></a><img src="/2019/10/26/hey-piggy/1.jpg" width="60%">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
