<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/11/30/queue/"/>
      <url>/2019/11/30/queue/</url>
      
        <content type="html"><![CDATA[<hr><p>title: circular queue<br>date: 2019-11-30 19:45:54<br>tags: &#x961F;&#x5217;</p><h2 id="categories"><a href="#categories" class="headerlink" title="categories: "></a>categories: </h2><h2 id="&#x5FAA;&#x73AF;&#x961F;&#x5217;"><a href="#&#x5FAA;&#x73AF;&#x961F;&#x5217;" class="headerlink" title="&#x5FAA;&#x73AF;&#x961F;&#x5217;"></a>&#x5FAA;&#x73AF;&#x961F;&#x5217;</h2><h4 id="&#x6C42;&#x89E3;&#x62A5;&#x6570;&#x95EE;&#x9898;"><a href="#&#x6C42;&#x89E3;&#x62A5;&#x6570;&#x95EE;&#x9898;" class="headerlink" title="&#x6C42;&#x89E3;&#x62A5;&#x6570;&#x95EE;&#x9898;"></a>&#x6C42;&#x89E3;&#x62A5;&#x6570;&#x95EE;&#x9898;</h4><blockquote><p>&#x8BBE;&#x6709;n&#x4E2A;&#x4EBA;&#x5360;&#x6210;&#x4E00;&#x6392;&#xFF0C;&#x4ECE;&#x5DE6;&#x5411;&#x53F3;&#x7684;&#x7F16;&#x53F7;&#x5206;&#x522B;&#x4E3A;1~n&#xFF0C;&#x73B0;&#x5728;&#x4ECE;&#x5DE6;&#x5F80;&#x53F3;&#x62A5;&#x6570;&#x201C;1&#xFF0C;2&#xFF0C;1&#xFF0C;2&#x2026;&#x2026;&#x201D;&#xFF0C;&#x6570;&#x5230;&#x201C;1&#x201D;&#x7684;&#x4EBA;&#x51FA;&#x5217;&#xFF0C;&#x6570;&#x5230;&#x201C;2&#x201D;&#x7684;&#x4EBA;&#x7AD9;&#x5230;&#x961F;&#x5217;&#x7684;&#x6700;&#x53F3;&#x7AEF;&#x3002;<font size="5">&#x62A5;&#x6570;&#x8FC7;&#x7A0B;&#x53CD;&#x590D;&#x8FDB;&#x884C;&#xFF0C;&#x76F4;&#x5230;n&#x4E2A;&#x4EBA;&#x90FD;&#x51FA;&#x961F;&#x5217;&#x4E3A;&#x6B62;&#x3002;</font>&#x8981;&#x6C42;&#x7ED9;&#x51FA;&#x4ED6;&#x4EEC;&#x7684;&#x51FA;&#x5217;&#x987A;&#x5E8F;&#x3002;<br>&#x4F8B;&#x5982;&#xFF0C;&#x5F53;n=8&#x65F6;&#x7684;&#x521D;&#x59CB;&#x5E8F;&#x5217;&#x4E3A;&#xFF1A;<br>1 2 3 4 5 6 7 8<br>&#x5219;&#x51FA;&#x5217;&#x987A;&#x5E8F;&#xFF1A;<br>1 3 5 7 2 6 4 8</p><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x91C7;&#x7528;&#x73AF;&#x5F62;&#x961F;&#x5217;&#xFF0C;&#x505A;&#x5982;&#x4E0B;&#x64CD;&#x4F5C;&#xFF1A;<br>1.&#x51FA;&#x961F;&#x4E00;&#x4E2A;&#x5143;&#x7D20;(&#x62A5;&#x6570;&#x4E3A;1&#x7684;&#x4EBA;)&#xFF0C;&#x8F93;&#x51FA;&#x5176;&#x7F16;&#x53F7;<br>2.&#x82E5;&#x961F;&#x5217;&#x4E0D;&#x7A7A;&#xFF0C;&#x51FA;&#x961F;&#x4E00;&#x4E2A;&#x5143;&#x7D20;(&#x62A5;&#x6570;&#x4E3A;2&#x7684;&#x4EBA;)&#xFF0C;&#x518D;&#x8BA9;&#x5176;&#x5165;&#x961F;</li></ul></blockquote><p>&#x5FAA;&#x73AF;&#x961F;&#x5217;&#x521B;&#x5EFA;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">typedef struct queue Queue;</span><br><span class="line">struct queue</span><br><span class="line">{</span><br><span class="line">int data[Maxsize];</span><br><span class="line">int front;</span><br><span class="line">int rear;</span><br><span class="line">};</span><br><span class="line">bool Full(Queue *L)            //&#x5224;&#x6EE1;</span><br><span class="line">{</span><br><span class="line">return ((L-&gt;rear+1)%Maxsize == L-&gt;front);</span><br><span class="line">}</span><br><span class="line">bool Empty(Queue *L)           //&#x5224;&#x7A7A;</span><br><span class="line">{</span><br><span class="line">return (L-&gt;front == L-&gt;rear);</span><br><span class="line">}</span><br><span class="line">void Enqueue(Queue *L, int e)   //&#x5165;&#x961F;</span><br><span class="line">{</span><br><span class="line">if(!Full(L))</span><br><span class="line">{</span><br><span class="line">L-&gt;rear = (L-&gt;rear+1)%Maxsize;</span><br><span class="line">L-&gt;data[L-&gt;rear] = e;</span><br><span class="line">}</span><br><span class="line">else</span><br><span class="line">exit(0);</span><br><span class="line">}</span><br><span class="line">void Dequeue(Queue *L,int *e)   //&#x51FA;&#x961F;</span><br><span class="line">{</span><br><span class="line">L-&gt;front = (L-&gt;front+1)%Maxsize;</span><br><span class="line">*e = L-&gt;data[L-&gt;front];</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x4E3B;&#x51FD;&#x6570;&#x8F93;&#x51FA;&#x961F;&#x5217;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">Queue *L = (Queue *)malloc(sizeof(Queue));</span><br><span class="line">L-&gt;front = L-&gt;rear = 0;</span><br><span class="line">int a[] = {1, 2, 3, 4, 5, 6, 7, 8}, e;</span><br><span class="line">for(int i=0; i&lt;8; i++)</span><br><span class="line">Enqueue(L,a[i]);</span><br><span class="line">while(!Empty(L))        //&#x62A5;&#x6570;&#x4E3A;1&#x7684;&#x4EBA;&#x51FA;&#x961F;</span><br><span class="line">{</span><br><span class="line">Dequeue(L,&amp;e);</span><br><span class="line">printf(&quot;%d &quot;,e);</span><br><span class="line">if(!Empty(L))   //&#x975E;&#x7A7A;&#xFF0C;&#x62A5;&#x6570;&#x4E3A;2&#x7684;&#x4EBA;&#x51FA;&#x961F;&#x518D;&#x5165;&#x961F;</span><br><span class="line">{</span><br><span class="line">Dequeue(L,&amp;e);</span><br><span class="line">Enqueue(L, e);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">    return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x8FD0;&#x884C;&#x7ED3;&#x679C;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br><img width="50%" src="/2019/11/30/queue/1.jpg"></p><hr><p>&#x8D77;&#x521D;&#x4EE5;&#x4E3A;&#x62A5;&#x6570;&#x95EE;&#x9898;&#x5C31;&#x662F;&#x65E5;&#x5E38;&#x7684;&#x62A5;&#x6570;&#xFF0C;1~n&#x62A5;&#x5B8C;&#x540E;&#x5C31;&#x7ED3;&#x675F;&#xFF0C;&#x8BEF;&#x8BA4;&#x4E3A;&#x8F93;&#x51FA;&#x961F;&#x5217;&#x987A;&#x5E8F;&#x662F;&#xFF1A;<br>1 3 5 7 2 4 6 8</p><ul><li><strong>&#x9519;&#x89E3;</strong><br>&#x521B;&#x5EFA;&#x957F;&#x5EA6;&#x4E3A;N(N=9)&#x7684;&#x5FAA;&#x73AF;&#x961F;&#x5217;&#xFF0C;&#x4F7F;&#x961F;&#x5217;&#x5DF2;&#x6EE1;&#x3002;<br>1~n&#x62A5;&#x5B8C;&#x5373;&#xFF08;L-&gt;rear==N/2-1&#xFF09;&#x6210;&#x7ACB;&#xFF0C;&#x518D;&#x51FA;&#x961F;&#x76F4;&#x81F3;&#x961F;&#x5217;&#x4E3A;&#x7A7A;</li></ul><img width="100%" src="/2019/11/30/queue/2.jpg"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">while(!Empty(L))</span><br><span class="line">{</span><br><span class="line">if(L-&gt;rear == (Maxsize)/2-1)</span><br><span class="line">{</span><br><span class="line">Dequeue(L,&amp;e);</span><br><span class="line">printf(&quot;\n%d &quot;, e);</span><br><span class="line">}</span><br><span class="line">else</span><br><span class="line">{</span><br><span class="line">printf(&quot;%d &quot;, e);</span><br><span class="line">if(!Empty(L))</span><br><span class="line">{</span><br><span class="line">Dequeue(L, &amp;e);</span><br><span class="line">Enqueue(L, e);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hey-piggy</title>
      <link href="/2019/10/26/hey-piggy/"/>
      <url>/2019/10/26/hey-piggy/</url>
      
        <content type="html"><![CDATA[<p>Nothing is impossble for a willing heart!</p><a id="more"></a><img width="50%" src="/2019/10/26/hey-piggy/1.jpg">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Lnode</title>
      <link href="/2019/10/26/Lnode/"/>
      <url>/2019/10/26/Lnode/</url>
      
        <content type="html"><![CDATA[<h2 id="&#x94FE;&#x8868;"><a href="#&#x94FE;&#x8868;" class="headerlink" title="&#x94FE;&#x8868;"></a>&#x94FE;&#x8868;</h2><h3 id="1-&#x5355;&#x94FE;&#x8868;&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x4E8C;&#x4E2A;&#x5355;&#x94FE;&#x8868;"><a href="#1-&#x5355;&#x94FE;&#x8868;&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x4E8C;&#x4E2A;&#x5355;&#x94FE;&#x8868;" class="headerlink" title="1.&#x5355;&#x94FE;&#x8868;&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x4E8C;&#x4E2A;&#x5355;&#x94FE;&#x8868;"></a>1.&#x5355;&#x94FE;&#x8868;&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x4E8C;&#x4E2A;&#x5355;&#x94FE;&#x8868;</h3><blockquote><p>&#x8981;&#x6C42;&#xFF1A;&#x5C06;&#x4E00;&#x4E2A;&#x5E26;&#x5934;&#x7ED3;&#x70B9;&#x7684;&#x5355;&#x94FE;&#x8868;<br>L=(a1, b1, a2, b2, &#x2026;, an, bn)&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x5E26;&#x5934;&#x7ED3;&#x70B9;&#x7684;&#x5355;&#x94FE;&#x8868;L1&#x548C;L2&#xFF0C;L1=(a1, a2,&#x2026;,an), L2 = (bn, bn-1, &#x2026;,b1). </p></blockquote><a id="more"></a><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>split&#x51FD;&#x6570;&#x5B9E;&#x73B0;&#x62C6;&#x5206;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void Split(Lnode *L, Lnode *L1, Lnode *L2)</span><br><span class="line">{</span><br><span class="line">    Lnode *p = L-&gt;next, *q, *r;</span><br><span class="line">    r = L1; </span><br><span class="line">    while(p)            //&#x5C3E;&#x63D2;&#x6CD5;&#x5F97;L1&#xFF0C;&#x5934;&#x63D2;&#x6CD5;&#x5F97;L2 </span><br><span class="line">    {</span><br><span class="line">    r-&gt;next = p; // &#x5C06;p(valude&#x503C;&#x4E3A;ai)&#x63D2;&#x5165;L1 </span><br><span class="line">    r = p;</span><br><span class="line">    p = p-&gt;next; //p&#x79FB;&#x5230;&#x4E0B;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;(value&#x503C;&#x4E3A;bi) </span><br><span class="line">    q = p-&gt;next;//&#x5934;&#x63D2;&#x6CD5;&#x4F1A;&#x4FEE;&#x6539;p&#x7684;next&#x57DF;&#xFF0C;&#x7528;q&#x4FDD;&#x5B58;p&#x7684;&#x540E;&#x7EE7;&#x7ED3;&#x70B9; </span><br><span class="line">    p-&gt;next = L2-&gt;next;   </span><br><span class="line">    L2-&gt;next = p;</span><br><span class="line">    p = q;    //p&#x91CD;&#x65B0;&#x6307;&#x5411;ai+1&#x7684;&#x7ED3;&#x70B9; </span><br><span class="line">   }</span><br><span class="line">    r-&gt;next = NULL; </span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><p>DispList&#x51FD;&#x6570;&#x8F93;&#x51FA;&#x5355;&#x94FE;&#x8868;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void DispList(Lnode *L)</span><br><span class="line">{</span><br><span class="line">    Lnode *p = L-&gt;next;</span><br><span class="line">    while(p)</span><br><span class="line">    {</span><br><span class="line">    printf(&quot;%d &quot;, p-&gt;value);</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">}</span><br><span class="line">   printf(&quot;\n&quot;);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x5B8C;&#x6574;&#x4EE3;&#x7801;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct lnode Lnode;</span><br><span class="line">struct lnode</span><br><span class="line">{</span><br><span class="line">int value;</span><br><span class="line">Lnode *next;</span><br><span class="line">};</span><br><span class="line">void Split(Lnode *L, Lnode *L1, Lnode *L2)</span><br><span class="line">{</span><br><span class="line">Lnode *p = L-&gt;next, *q, *r;</span><br><span class="line">r = L1; </span><br><span class="line">while(p)            //&#x5C3E;&#x63D2;&#x6CD5;&#x5F97;L1&#xFF0C;&#x5934;&#x63D2;&#x6CD5;&#x5F97;L2 </span><br><span class="line">{</span><br><span class="line">r-&gt;next = p; // &#x5C06;p(valude&#x503C;&#x4E3A;ai)&#x63D2;&#x5165;L1 </span><br><span class="line">r = p;</span><br><span class="line">p = p-&gt;next; //p&#x79FB;&#x5230;&#x4E0B;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;(value&#x503C;&#x4E3A;bi) </span><br><span class="line">q = p-&gt;next;//&#x5934;&#x63D2;&#x6CD5;&#x4F1A;&#x4FEE;&#x6539;p&#x7684;next&#x57DF;&#xFF0C;&#x7528;q&#x4FDD;&#x5B58;p&#x7684;&#x540E;&#x7EE7;&#x7ED3;&#x70B9; </span><br><span class="line">p-&gt;next = L2-&gt;next;   </span><br><span class="line">L2-&gt;next = p;</span><br><span class="line">p = q;    //p&#x91CD;&#x65B0;&#x6307;&#x5411;ai+1&#x7684;&#x7ED3;&#x70B9; </span><br><span class="line">}</span><br><span class="line">r-&gt;next = NULL; </span><br><span class="line">}</span><br><span class="line">void DispList(Lnode *L)</span><br><span class="line">{</span><br><span class="line">Lnode *p = L-&gt;next;</span><br><span class="line">while(p)</span><br><span class="line">{</span><br><span class="line">printf(&quot;%d &quot;, p-&gt;value);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">}</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">}</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">Lnode *L = (Lnode *)malloc(sizeof(Lnode)), </span><br><span class="line">*L1 = (Lnode *)malloc(sizeof(Lnode)), </span><br><span class="line">*L2 = (Lnode *)malloc(sizeof(Lnode));</span><br><span class="line">L-&gt;next = NULL;</span><br><span class="line">L1-&gt;next = NULL;</span><br><span class="line">L2-&gt;next = NULL;</span><br><span class="line">Lnode *current = L;</span><br><span class="line">int i = 0;</span><br><span class="line">while(i&lt;1)</span><br><span class="line">{</span><br><span class="line">Lnode *p = (Lnode *)malloc(sizeof(Lnode));</span><br><span class="line">scanf(&quot;%d&quot;, &amp;p-&gt;value);</span><br><span class="line">current-&gt;next = p;</span><br><span class="line">current = p;</span><br><span class="line">if(getchar() == &apos;\n&apos;)</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line">current-&gt;next = NULL;</span><br><span class="line">Split(L, L1, L2);</span><br><span class="line">DispList(L1);</span><br><span class="line">DispList(L2);</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x8FD0;&#x884C;&#x7ED3;&#x679C;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br><img width="60%" src="/2019/10/26/Lnode/Lnode1.jpg"></p><h3 id="2-&#x5224;&#x65AD;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E2D;&#x6570;&#x636E;&#x7ED3;&#x70B9;-&#x542B;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x7ED3;&#x70B9;-&#x662F;&#x5426;&#x5BF9;&#x79F0;"><a href="#2-&#x5224;&#x65AD;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E2D;&#x6570;&#x636E;&#x7ED3;&#x70B9;-&#x542B;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x7ED3;&#x70B9;-&#x662F;&#x5426;&#x5BF9;&#x79F0;" class="headerlink" title="2.&#x5224;&#x65AD;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E2D;&#x6570;&#x636E;&#x7ED3;&#x70B9;(&#x542B;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x7ED3;&#x70B9;)&#x662F;&#x5426;&#x5BF9;&#x79F0;"></a>2.&#x5224;&#x65AD;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E2D;&#x6570;&#x636E;&#x7ED3;&#x70B9;(&#x542B;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x7ED3;&#x70B9;)&#x662F;&#x5426;&#x5BF9;&#x79F0;</h3><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>  P&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x626B;&#x63CF;L&#xFF0C;q&#x4ECE;&#x53F3;&#x5230;&#x5DE6;&#x626B;&#x63CF;L&#xFF0C;&#x7136;&#x540E;&#x5FAA;&#x73AF;&#xFF0C;&#x76F4;&#x5230;p=q  &#x6216; p=q-&gt;prior.<br>  IsSymm&#x51FD;&#x6570;&#x626B;&#x63CF;L.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int IsSymm(DLnode *L)</span><br><span class="line">{</span><br><span class="line">DLnode *p = L-&gt;next;//p&#x6307;&#x5411;&#x9996;&#x7ED3;&#x70B9;</span><br><span class="line">DLnode *q = L-&gt;prior;//q&#x6307;&#x5411;&#x5C3E;&#x7ED3;&#x70B9; </span><br><span class="line">while(p-&gt;value == q-&gt;value)    //&#x5F53;&#x7ED3;&#x70B9;&#x503C;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x9000;&#x51FA;&#x5FAA;&#x73AF; </span><br><span class="line">{</span><br><span class="line">    if(p==q || p-&gt;prior == q)  //&#x7ED3;&#x70B9;&#x6570;&#x4E3A;&#x5947;&#x6570;||&#x7ED3;&#x70B9;&#x6570;&#x4E3A;&#x5076;&#x6570; </span><br><span class="line">return 1;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q = q-&gt;prior;</span><br><span class="line">}</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x5B8C;&#x6574;&#x4EE3;&#x7801;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct Dlnode DLnode;</span><br><span class="line">struct Dlnode</span><br><span class="line">{</span><br><span class="line">int value;</span><br><span class="line">DLnode *prior;</span><br><span class="line">DLnode *next;</span><br><span class="line">};</span><br><span class="line">int IsSymm(DLnode *L)</span><br><span class="line">{</span><br><span class="line">DLnode *p = L-&gt;next;//p&#x6307;&#x5411;&#x9996;&#x7ED3;&#x70B9;</span><br><span class="line">DLnode *q = L-&gt;prior;//q&#x6307;&#x5411;&#x5C3E;&#x7ED3;&#x70B9; </span><br><span class="line">while(p-&gt;value == q-&gt;value)    //&#x5F53;&#x7ED3;&#x70B9;&#x503C;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x9000;&#x51FA;&#x5FAA;&#x73AF; </span><br><span class="line">{</span><br><span class="line">    if(p==q || p-&gt;prior == q)  //&#x7ED3;&#x70B9;&#x6570;&#x4E3A;&#x5947;&#x6570;||&#x7ED3;&#x70B9;&#x6570;&#x4E3A;&#x5076;&#x6570; </span><br><span class="line">return 1;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q = q-&gt;prior;</span><br><span class="line">}</span><br><span class="line">return 0;</span><br><span class="line">}</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">DLnode *L = (DLnode *)malloc(sizeof(DLnode));</span><br><span class="line">L-&gt;next = L-&gt;prior = NULL;</span><br><span class="line">int i = 0;</span><br><span class="line">DLnode *r = L, *p; </span><br><span class="line">while(i&lt;1)</span><br><span class="line">{</span><br><span class="line">p = (DLnode *)malloc(sizeof(DLnode));</span><br><span class="line">scanf(&quot;%d&quot;, &amp;p-&gt;value);</span><br><span class="line">r-&gt;next = p;</span><br><span class="line">p-&gt;prior = r;       // &#x53CC;&#x94FE;&#x8868;&#x5C3E;&#x63D2;&#x6CD5;&#x5B58;&#x5165;L </span><br><span class="line">r = p;                    </span><br><span class="line">if(getchar() == &apos;\n&apos;)</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line">r-&gt;next = L;</span><br><span class="line">L-&gt;prior = r;</span><br><span class="line">if(IsSymm(L))</span><br><span class="line">printf(&quot;&#x8BE5;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x5BF9;&#x79F0;\n&quot;);</span><br><span class="line">else</span><br><span class="line">printf(&quot;&#x8BE5;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E0D;&#x5BF9;&#x79F0;\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x8FD0;&#x884C;&#x7ED3;&#x679C;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><img width="60%" src="/2019/10/26/Lnode/Lnode2.jpg">]]></content>
      
      
      
        <tags>
            
            <tag> 链式存储 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
