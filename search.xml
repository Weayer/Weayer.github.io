<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>模运算的运用</title>
      <link href="/2020/04/24/%E6%A8%A1%E8%BF%90%E7%AE%97%E7%9A%84%E8%BF%90%E7%94%A8/"/>
      <url>/2020/04/24/%E6%A8%A1%E8%BF%90%E7%AE%97%E7%9A%84%E8%BF%90%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>&#x4E0D;&#x5B9A;&#x671F;&#x66F4;&#x65B0;&#x5728;&#x5404;&#x7F16;&#x7A0B;&#x7F51;&#x7AD9;&#x9898;&#x76EE;&#x4E2D;<strong>&#x6A21;&#x8FD0;&#x7B97;</strong>&#x7684;&#x8FD0;&#x7528;</p><a id="more"></a><h2 id="&#x591A;&#x7EC4;&#x540C;&#x4F59;"><a href="#&#x591A;&#x7EC4;&#x540C;&#x4F59;" class="headerlink" title="&#x591A;&#x7EC4;&#x540C;&#x4F59;"></a>&#x591A;&#x7EC4;&#x540C;&#x4F59;</h2><p>  &#x82E5;&#x5B58;&#x5728;&#x5143;&#x7D20;x,&#x5BF9;&#x4E8E;&#x4E00;&#x6570;&#x7EC4;&#x4E2D;&#x4EFB;&#x610F;&#x67D0;&#x4E2A;&#x5143;&#x7D20;e&#xFF0C;&#x6EE1;&#x8DB3;<br>  e += k * x (k&#x53D6;&#x4EFB;&#x610F;&#x6574;&#x6570;)<br>  &#x5219;&#x53EA;&#x9700;<span style="color:blue">&#x6570;&#x7EC4;&#x4E00;&#x4E2D;&#x6240;&#x6709;e&#x5BF9;x&#x540C;&#x4F59;(&#x5BF9;x&#x53D6;&#x6A21;&#x7ED3;&#x679C;&#x76F8;&#x540C;)</span>&#xFF1B;<br>  &#x82E5;&#x5B58;&#x5728;&#x6709;&#x4E24;&#x4E2A;&#x5143;&#x7D20;x y,&#x5BF9;&#x4E8E;&#x6570;&#x7EC4;&#x4E00;&#x4E2D;&#x4EFB;&#x610F;&#x67D0;&#x4E2A;&#x5143;&#x7D20;e &#xFF0C;&#x6EE1;&#x8DB3;<br>  e += a<em>x+b</em>y(a b&#x53D6;&#x4EFB;&#x610F;&#x6574;&#x6570;)<br>  &#x53C8;&#x56E0;&#x4E3A; a<em>x+b</em>y = k * Gcd(a, b)  (k&#x53D6;&#x4EFB;&#x610F;&#x6574;&#x6570;)<br>  &#x5219;&#x53EA;&#x9700;<span style="color:blue">&#x6570;&#x7EC4;&#x4E00;&#x4E2D;&#x6240;&#x6709;e&#x5BF9;Gcd(a, b)&#x540C;&#x4F59;(&#x5BF9;Gcd(a, b)&#x53D6;&#x6A21;&#x7ED3;&#x679C;&#x76F8;&#x540C;)</span>;</p><blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;&#xFF1A;<a href="https://www.jisuanke.com/course/6497/467062" target="_blank" rel="noopener">&#xB7;&#x8BA1;&#x849C;&#x5BA2;&#xB7;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;</a></p></blockquote><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong></p><ul><li>&#x7C7B;&#x63A8;&#x4E0B;&#x53BB;<br>&#x5219;&#x53EA;&#x9700; &#x6570;&#x7EC4;&#x4E00;&#x4E2D;&#x6240;&#x6709;e&#x5BF9;Gcd(&#x6570;&#x7EC4;&#x4E8C;&#x6240;&#x6709;&#x5143;&#x7D20;)&#x540C;&#x4F59;<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(!b)</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> Gcd(b, a%b);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> len1, len2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; len1 &gt;&gt; len2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">int</span> gcd;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len2; ++i)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">gcd = b[i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">gcd = Gcd(gcd, b[i]);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//cout &lt;&lt; gcd &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len1; ++i)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>]%gcd != a[i]%gcd)</span><br><span class="line">{</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><h2 id="&#x540C;&#x4F59;&#x65B9;&#x7A0B;&#xFF08;&#x6A21;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;&#xFF09;&#x6027;&#x8D28;"><a href="#&#x540C;&#x4F59;&#x65B9;&#x7A0B;&#xFF08;&#x6A21;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;&#xFF09;&#x6027;&#x8D28;" class="headerlink" title="&#x540C;&#x4F59;&#x65B9;&#x7A0B;&#xFF08;&#x6A21;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;&#xFF09;&#x6027;&#x8D28;"></a>&#x540C;&#x4F59;&#x65B9;&#x7A0B;&#xFF08;&#x6A21;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;&#xFF09;&#x6027;&#x8D28;</h2><p>&#x82E5; ax = b(mod n)<br>&#x5219; (a-b)%n = 0, a%n == b%n;<br>a&#x3001;b&#x53EF;&#x8FD0;&#x7528;&#x4E8E;&#x4E24;&#x4E2A;&#x524D;&#x7F00;&#x548C;</p><blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;<a href="http://lx.lanqiao.cn/problem.page?gpid=T444### " target="_blank" rel="noopener">&#xB7;&#x84DD;&#x6865;&#xB7;k&#x500D;&#x533A;&#x95F4;</a></p></blockquote><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong></p><ul><li>&#x524D;&#x7F00;&#x548C; + &#x540C;&#x4F59;<br>b[i]&#x8BB0;&#x5F55;a[i]&#x524D;&#x7F00;&#x548C;&#xFF0C;&#x5B50;&#x533A;&#x95F4;&#x5219;&#x53EF;&#x7528;b[i]-b[j]&#x8868;&#x793A;(0 &lt;= j &lt; i)<br>&#x6EE1;&#x8DB3;k&#x500D;&#x533A;&#x95F4;&#x53CA; (b[i]-b[j])%k==0<br>&#x4E8E;&#x662F;&#x5F88;&#x5BB9;&#x6613;&#x6709;&#x4EE5;&#x4E0B;&#x4EE3;&#x7801;<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">{</span><br><span class="line">b[i+<span class="number">1</span>] = b[i] + a[i];  <span class="comment">//&#x524D;&#x7F00;&#x548C;</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n; ++j)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>((b[j+<span class="number">1</span>] - b[i])%k == <span class="number">0</span>)</span><br><span class="line">++sum;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><p>&#x663E;&#x7136;n&#x7684;&#x5E73;&#x65B9;&#x590D;&#x6742;&#x5EA6;&#x4F1A;&#x8D85;&#x65F6;</p><ul><li>&#x4F18;&#x5316;&#x7684;&#x601D;&#x60F3;<br>k&#x500D;&#x533A;&#x95F4;&#x7684;&#x4E2A;&#x6570;&#x5373;&#x6C42;&#x591A;&#x5C11;&#x7EC4;b[i]&#x3001;b[j]&#x6EE1;&#x8DB3;<br><code>(b[i]-b[j])%k==0</code><br>&#x540C;&#x4F59;&#x6027;&#x8D28;&#x5F97; <code>b[i]%k == b[j]%k</code></li></ul><p>&#x5BF9;&#x4E8E;&#x6837;&#x4F8B;<br>Output&#xFF1A;<br>5 2<br>1 2 3 4 5<br>Input&#xFF1A;<br>6<br>&#xFF08;&#x4E00;&#xFF09;&#x5F97;&#x5230;&#x524D;&#x7F00;&#x548C;b[] 1 3 6 10 15<br>&#xFF08;&#x4E8C;&#xFF09;&#x5BF9; b[i]%k &#x5F97;&#x5230;0 1 1 0 0 1&#xFF08;&#x52A0;&#x4E86;&#x4E2A;0&#xFF0C;&#x7279;&#x6B8A;&#x5904;&#x7406;b[i]%k==0&#x7684;&#x60C5;&#x51B5;&#xFF09;1&#x7684;&#x4E2A;&#x6570;&#x4E3A;3&#xFF0C;0&#x7684;&#x4E2A;&#x6570;&#x4E3A;3<br>&#x7ED3;&#x679C;&#x6709;&#x591A;&#x5C11;&#x7EC4;&#x5462;&#xFF1F; C23 + C23 = 6&#x3002;<br>&#x6700;&#x7EC8;&#x4F18;&#x5316;&#x4EE3;&#x7801;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">100005</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">mp[<span class="number">0</span>] = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">{</span><br><span class="line">b[i+<span class="number">1</span>] = (b[i] + a[i]) % k;</span><br><span class="line">++mp[b[i+<span class="number">1</span>]];</span><br><span class="line">}</span><br><span class="line">ll sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">{</span><br><span class="line">sum += (ll)mp[i] * (mp[i]<span class="number">-1</span>) / <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ;++i)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">}</span><br><span class="line">solve(); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 模运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4月1日我成功地被mysql给愚弄了</title>
      <link href="/2020/04/01/4%E6%9C%881%E6%97%A5%E6%88%91%E6%88%90%E5%8A%9F%E5%9C%B0%E8%A2%ABmysql%E7%BB%99%E6%84%9A%E5%BC%84%E4%BA%86/"/>
      <url>/2020/04/01/4%E6%9C%881%E6%97%A5%E6%88%91%E6%88%90%E5%8A%9F%E5%9C%B0%E8%A2%ABmysql%E7%BB%99%E6%84%9A%E5%BC%84%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h3 id="&#x96EA;&#x7684;&#x6E90;&#x5934;"><a href="#&#x96EA;&#x7684;&#x6E90;&#x5934;" class="headerlink" title="&#x96EA;&#x7684;&#x6E90;&#x5934;"></a>&#x96EA;&#x7684;&#x6E90;&#x5934;</h3><p>4&#x6708;1&#x65E5;&#x524D;&#x65E5;&#x611A;&#x8822;&#x5730;&#x4F7F;&#x7528;SQLyog&#x5220;&#x9664;&#x4E86;&#x7CFB;&#x7EDF;&#x81EA;&#x5E26;&#x7684;mysql&#x6570;&#x636E;&#x5E93;&#x3002;</p><h3 id="&#x96EA;&#x7684;&#x6559;&#x8BAD;"><a href="#&#x96EA;&#x7684;&#x6559;&#x8BAD;" class="headerlink" title="&#x96EA;&#x7684;&#x6559;&#x8BAD;"></a>&#x96EA;&#x7684;&#x6559;&#x8BAD;</h3><a id="more"></a><p>&#x4E8E;&#x662F;&#x5C31;&#x6709;&#x4E86;&#xFF0C;&#x201D;windows&#x65E0;&#x6CD5;&#x542F;&#x52A8;mysql&#x670D;&#x52A1;&#xFF08;&#x4F4D;&#x4E8E;&#x672C;&#x5730;&#x8BA1;&#x7B97;&#x673A;&#x4E0A;&#x3002;&#x9519;&#x8BEF;1067&#xFF1A;&#x8FDB;&#x7A0B;&#x610F;&#x5916;&#x7EC8;&#x6B62;&#xFF09;&#x201D;&#xFF1B;<br>&#x63A5;&#x7740;&#x4E0A;&#x7F51;&#x641C;&#x7D22;&#x540E;&#x53D1;&#x73B0;&#x611A;&#x8822;&#x7684;&#x4EBA;&#x4E0D;&#x6B62;&#x6211;&#x4E00;&#x4E2A;&#xFF0C;&#x4E8E;&#x662F;&#x5728;&#x5404;&#x4F4D;&#x7F51;&#x53CB;&#x7684;&#x6210;&#x529F;&#x201D;&#x5F15;&#x5BFC;&#x201D;&#x4E0B;&#x5148;&#x540E;&#x53D1;&#x751F;&#x4E86; <strong>1067&#x9519;&#x8BEF;&#x3001;1045&#x9519;&#x8BEF;&#x3001;10061&#x9519;&#x8BEF;</strong>&#xFF1B;<br>&#x5F53;&#x65F6;&#x53EF;&#x628A;&#x6211;&#x611A;&#x5F04;&#x7684;&#x591F;&#x591F;&#x7684;&#xFF0C;&#x771F;&#x662F;&#x6BD4;&#x5B85;&#x5BB6;&#x4E24;&#x4E2A;&#x6708;&#x8FD8;&#x8981;&#x591F;&#x591F;&#x7684;&#xFF1B;<br>&#x540E;&#x6765;&#x75DB;&#x5B9A;&#x601D;&#x75DB;&#xFF0C;&#x5199;&#x4E0B;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#xFF0C;&#x4F9B;&#x8BF8;&#x4F4D;&#x201D;&#x5F15;&#x5BFC;&#x201D;&#x3002;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br>&#x867D;&#x7136;&#x7F51;&#x53CB;&#x7684;&#x65B9;&#x6CD5;&#x9C7C;&#x9F99;&#x6DF7;&#x6742;&#xFF0C;&#x8FD8;&#x662F;&#x8981;&#x611F;&#x8C22;&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#xFF1A;<br>&#xFF08;&#x4E00;&#xFF09;<a href="https://blog.csdn.net/qq_37915248/article/details/83005946?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/qq_37915248/article/details/83005946?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a><br>&#xFF08;&#x4E8C;&#xFF09;<a href="https://blog.csdn.net/lzf_hlh/article/details/80885139" target="_blank" rel="noopener">https://blog.csdn.net/lzf_hlh/article/details/80885139</a></p><ol><li><p>&#x9996;&#x5148;&#x5220;&#x9664;&#x7684;mysql&#x8981;&#x7ED9;&#x4EBA;&#x5BB6;&#x8FD8;&#x56DE;&#x6765;&#xFF1A;</p><blockquote><p>&#x590D;&#x5236;&#x5B89;&#x88C5;&#x8DEF;&#x5F84;&#x4E2D;&#x7684; C:\ProgramData\MySQL\MySQL Server 5.5\data\mysql<br>&#x5230; C:\ProgramData\MySQL\MySQL Server 5.5\data</p></blockquote></li><li><p>&#x4E0D;&#x7BA1;&#x662F;1067&#x8FD8;&#x662F;1045&#x8FD8;&#x662F;10061&#x9519;&#x8BEF;&#xFF0C;&#x90FD;&#x53EF;&#x5F52;&#x4E8E;&#x4E24;&#x70B9;</p><blockquote><p>&#xFF08;&#x4E00;&#xFF09;&#x7AEF;&#x53E3;&#x95EE;&#x9898;<br>&#x670D;&#x52A1;&#x5173;&#x95ED;&#x4E86;&#x7684;&#x8981;&#x6253;&#x5F00;&#xFF0C;&#x6216;&#x8005;&#x7AEF;&#x53E3;&#x88AB;&#x591A;&#x4E2A;&#x670D;&#x52A1;&#x5360;&#x7528;&#x4E86;&#x7684;&#x53EA;&#x4FDD;&#x7559;&#x4E00;&#x4E2A;</p><img src="/2020/04/01/4&#x6708;1&#x65E5;&#x6211;&#x6210;&#x529F;&#x5730;&#x88AB;mysql&#x7ED9;&#x611A;&#x5F04;&#x4E86;/1.jpg">&#xFF08;&#x4E8C;&#xFF09;&#x7528;&#x6237;&#x540D;&#x548C;&#x5BC6;&#x7801;&#x9519;&#x8BEF;&#x4E00;&#xFF09;&#x7F51;&#x53CB;&#x8BF4;&#x5148;&#x5173;&#x95ED;MySQL&#x670D;&#x52A1;&#xFF0C;&#x7136;&#x800C;&#x6211;&#x5E76;&#x6CA1;&#x6709;&#x5173;&#x95ED;&#x3002;&#x4E8C;&#xFF09;&#x6253;&#x5F00;&#x5B89;&#x88C5;&#x8DEF;&#x5F84;&#x4E2D;&#x7684; C:\Program Files (x86)\MySQL\MySQL Server 5.5\my.ini &#x5728; [mysqlld] &#x4E0B;&#x6DFB;&#x52A0; skip-grant-tables<img src="/2020/04/01/4&#x6708;1&#x65E5;&#x6211;&#x6210;&#x529F;&#x5730;&#x88AB;mysql&#x7ED9;&#x611A;&#x5F04;&#x4E86;/2.jpg">&#x4E09;&#xFF09;cmd&#x8F93;&#x5165; mysql -u root -p &#x7136;&#x540E;&#x56DE;&#x8F66;&#x518D;&#x56DE;&#x8F66;&#xFF08;&#x5BC6;&#x7801;&#x4E3A;&#x7A7A;&#xFF09;     &#x6CE8;&#xFF1A;**skip-grant-tables** &#x4F5C;&#x7528;&#x662F; MYSQL&#x670D;&#x52A1;&#x5668;&#x4E0D;&#x52A0;&#x8F7D;&#x6743;&#x9650;&#x5224;&#x65AD;&#xFF0C;&#x4EFB;&#x4F55;&#x7528;&#x6237;&#x90FD;&#x80FD;&#x8BBF;&#x95EE;&#x6570;&#x636E;&#x5E93;&#xFF0C;&#x6240;&#x4EE5;&#x5BC6;&#x7801;&#x4E3A;&#x7A7A;&#x3002;&#x56DB;&#xFF09;&#x63A5;&#x7740;&#x8FDB;&#x5165;&#x4E86;MySQL</blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;use mysql&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; //&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x6570;&#x636E;&#x5E93;</span><br><span class="line">mysql&gt;update user set password=password(&quot;&#x65B0;&#x5BC6;&#x7801;&quot;) where user=&quot;root&quot;;&#xA0;&#xA0; //&#x4FEE;&#x6539;&#x6570;&#x636E;&#x5E93;&#x7684;&#x5BC6;&#x7801;</span><br><span class="line">mysql&gt;flush privileges;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; //&#x5237;&#x65B0;&#x6570;&#x636E;&#x5E93;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>&#x4E94;&#xFF09;&#x539F;&#x6765;&#x6DFB;&#x52A0;&#x5230; my.ini &#x7684; skip-grant-tables &#x53EF;&#x4EE5;&#x5220;&#x9664;&#x4E86;&#xFF0C;<br>&#x91CD;&#x542F;&#x7535;&#x8111;&#xFF0C;&#x6B63;&#x5E38;&#x8FDB;&#x5165;cmd&#xFF0C;&#x8F93;&#x5165; mysql -u root -p &#x56DE;&#x8F66;&#x8F93;&#x5165;&#x65B0;&#x5BC6;&#x7801;&#x6210;&#x529F;&#x3002;<br>    &#x6CE8;&#xFF1A;&#x7F51;&#x53CB;&#x7684;&#x505A;&#x6CD5;&#x5927;&#x591A;&#x4E3A;&#x91CD;&#x542F;MySQL&#x670D;&#x52A1;&#xFF0C;&#x56E0;&#x4E3A;&#x5F00;&#x59CB;&#x7684;&#x65F6;&#x5019;&#x5173;&#x95ED;&#x4E86;&#x3002;&#x7136;&#x800C;&#x7ECF;&#x5C1D;&#x8BD5;&#x5931;&#x8D25;&#xFF0C;&#x770B;&#x6765;&#x8FD8;&#x662F;&#x91CD;&#x542F;&#x7535;&#x8111;&#x80FD;&#x89E3;&#x51B3;&#x8BF8;&#x591A;&#x7384;&#x800C;&#x53C8;&#x7384;&#x7684;&#x95EE;&#x9898;&#x3002;</p></blockquote><h3 id="&#x96EA;&#x7684;&#x5347;&#x534E;"><a href="#&#x96EA;&#x7684;&#x5347;&#x534E;" class="headerlink" title="&#x96EA;&#x7684;&#x5347;&#x534E;"></a>&#x96EA;&#x7684;&#x5347;&#x534E;</h3><p>&#x5199;&#x5728;&#x6700;&#x540E; &#x9047;&#x5230;&#x68D8;&#x624B;&#x6076;&#x5FC3;&#x9EBB;&#x6728;&#x5F00;&#x59CB;&#x6000;&#x7591;&#x4EBA;&#x751F;&#x7684;&#x95EE;&#x9898;&#x65F6;&#xFF0C;&#x4E0D;&#x59A8;&#x5148;&#x653E;&#x4E00;&#x653E;&#xFF0C;&#x505A;&#x70B9;&#x513F;&#x559C;&#x6B22;&#x7684;&#x4E8B;&#xFF0C;&#x751F;&#x6D3B;&#x8FD8;&#x6709;&#x5F88;&#x591A;&#x7F8E;&#x597D;&#x53EF;&#x4EE5;&#x53BB;&#x6316;&#x6398;&#xFF0C;&#x97EC;&#x5149;&#x517B;&#x6666;&#xFF0C;&#x4ECE;&#x5584;&#x5982;&#x6D41;&#x3002;</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 雪的教训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥-晚会节目单（ST表）</title>
      <link href="/2020/03/28/%E8%93%9D%E6%A1%A5-%E6%99%9A%E4%BC%9A%E8%8A%82%E7%9B%AE%E5%8D%95/"/>
      <url>/2020/03/28/%E8%93%9D%E6%A1%A5-%E6%99%9A%E4%BC%9A%E8%8A%82%E7%9B%AE%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p>&#x9898;&#x76EE;&#x6765;&#x6E90;</p><a id="more"></a><blockquote><p>&#x9898;&#x76EE;&#x5206;&#x6790;<br>&#x4E0D;&#x6539;&#x53D8;&#x8282;&#x76EE;&#x987A;&#x5E8F;&#xFF0C;&#x6BCF;&#x6B21;&#x90FD;&#x5E0C;&#x671B;&#x597D;&#x770B;&#x503C;value&#x6700;&#x5927;&#xFF0C;&#x5E76;&#x4E0D;&#x662F;&#x603B;&#x7684;value&#x6700;&#x5927;<br>&#x56E0;&#x6B64;n&#x7EC4;&#x8282;&#x76EE;&#x4E2D;&#x9009;&#x62E9;m&#x6B21;&#x7684;&#x539F;&#x59CB;&#x505A;&#x6CD5;&#x5E94;&#x662F;&#xFF1A;<br>&#x5C3A;&#x53D6;&#x6CD5;&#x5F00;&#x59CB;front=0, tail=n-m &#x5728;[front, tail]&#x533A;&#x95F4;&#x5185;&#x67E5;&#x627E;value&#x6700;&#x5927;&#x503C;&#xFF0C;&#x8BB0;&#x5F55;&#x4E0B;&#x6807;ans&#xFF0C;&#x66F4;&#x65B0;front&#xFF0C;tail<br>&#x63A5;&#x7740;front=ans+1, ++tail &#x67E5;&#x8BE2;m&#x6B21;&#x6570;&#x5373;&#x53EF;&#xFF0C;&#x590D;&#x6742;&#x5EA6;O(n^2),&#x4F18;&#x5316;&#x65B9;&#x6CD5;ST&#x8868;&#xFF0C;&#x590D;&#x6742;&#x5EA6;O(n*logn)</p></blockquote><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>ST&#x8868;&#x53EF;&#x5728;&#x591A;&#x6B21;&#x67E5;&#x8BE2;&#x533A;&#x95F4;&#x6700;&#x503C;&#x65F6;&#x5C06;&#x590D;&#x6742;&#x5EA6;&#x964D;&#x81F3; O(n*logn)<br>&#x5173;&#x4E8E;ST&#x8868;&#x8BE6;&#x7EC6;&#x6784;&#x5EFA;&#x53EF;&#x53C2;&#x8003;&#x6211;&#x7684;&#xFF1A; <a href="https://www.weayer.top/2020/03/28/Dp-ST&#x8868;&#xFF08;&#x6C42;&#x89E3;RMP&#xFF09;/" target="_blank" rel="noopener">https://www.weayer.top/2020/03/28/Dp-ST&#x8868;&#xFF08;&#x6C42;&#x89E3;RMP&#xFF09;/</a><br>&#x8FD9;&#x91CC;&#x7A0D;&#x5FAE;&#x4E0D;&#x540C;&#x7684;&#x662F;&#x4E0D;&#x4EC5;&#x8981;&#x6C42;&#x5F97;&#x533A;&#x95F4;[l,r]&#x7684;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x5173;&#x952E;&#x8981;&#x8BB0;&#x5F55;&#x4E0B;&#x6807;&#xFF08;&#x56E0;&#x4E3A;&#x5C3A;&#x53D6;&#x7684;&#x9700;&#x8981;&#xFF09;<br>&#x6240;&#x4EE5;ST&#x8868;&#x7684;&#x9884;&#x5904;&#x7406;&#x3001;&#x67E5;&#x8BE2;&#x5747;&#x7A0D;&#x4F5C;&#x4FEE;&#x6539;<br>&#x539F;dp&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;&#xFF1A;</p><blockquote><p>dp[i][j]=max(dp[i][j-1], dp[i+2^(j-1)][j-1])</p></blockquote><p>&#x73B0;dp&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;&#xFF1A;</p><blockquote><p>int ans1 = dp[i][j-1];<br>  int ans2 = dp[i+pow_(j-1)][j-1];<br>  dp[i][j] = a[ans1]&gt;=a[ans2] ? ans1: ans2;</p></blockquote><p>&#x539F;&#x67E5;&#x8BE2;&#x64CD;&#x4F5C;&#xFF1A;</p><blockquote><p>int k = log2(r-l+1.0);<br>  return max(dp[l][k], dp[r-2^k+1][k]);<br>&#x73B0;&#x67E5;&#x8BE2;&#x64CD;&#x4F5C;&#xFF1A;<br>int k = log2(r-l+1.0);<br> int ans1 = dp[l][k];<br> int ans2 = dp[r-2^k+1][k];<br> return a[ans1]&gt;=a[ans2] ? ans1: ans2;</p></blockquote><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">100005</span>][<span class="number">25</span>];</span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow_</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ST</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        dp[i][<span class="number">0</span>] = i;       <span class="comment">//&#x4E0D;&#x540C;&#x7684;&#x662F;&#xFF0C;dp&#x8BB0;&#x5F55;&#x6700;&#x503C;&#x7684;&#x4E0B;&#x6807;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; pow_(j) &lt; m; ++j)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i+pow_(j<span class="number">-1</span>) &lt; m; ++i)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> ans1 = dp[i][j<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">int</span> ans2 = dp[i+pow_(j<span class="number">-1</span>)][j<span class="number">-1</span>];</span><br><span class="line">            dp[i][j] = a[ans1]&gt;=a[ans2] ? ans1: ans2;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> k = log2(r-l+<span class="number">1.0</span>);</span><br><span class="line">    <span class="keyword">int</span> ans1 = dp[l][k];</span><br><span class="line">    <span class="keyword">int</span> ans2 = dp[r-pow_(k)+<span class="number">1</span>][k];</span><br><span class="line">    <span class="keyword">return</span> a[ans1]&gt;=a[ans2] ? ans1: ans2;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m&gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">int</span> front = <span class="number">0</span>, tail = m-n, k = <span class="number">0</span>;</span><br><span class="line">    ST();</span><br><span class="line">    <span class="comment">// for(;;)</span></span><br><span class="line">    <span class="comment">// {</span></span><br><span class="line">    <span class="comment">//     int x, y;</span></span><br><span class="line">    <span class="comment">//     cin &gt;&gt; x &gt;&gt; y;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; solve(x, y) &lt;&lt;endl; </span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">   <span class="keyword">while</span>(tail&lt;m &amp;&amp; front&lt;=tail) <span class="comment">//&#x5C3A;&#x53D6;&#x6CD5;&#xFF0C;&#x67E5;&#x627E;n&#x6B21;</span></span><br><span class="line">   {</span><br><span class="line">       <span class="keyword">int</span> ans = solve(front, tail);</span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt; a[ans] &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">       front = ans+<span class="number">1</span>;</span><br><span class="line">       tail++;</span><br><span class="line">   }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 查找 </tag>
            
            <tag> 蓝桥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dp-ST表（求解RMP）</title>
      <link href="/2020/03/28/Dp-ST/"/>
      <url>/2020/03/28/Dp-ST/</url>
      
        <content type="html"><![CDATA[<p>RMQ&#xFF08;Range Minimum/Maximum Query&#xFF09;&#x5373;&#x533A;&#x95F4;&#x6700;&#x503C;&#x67E5;&#x8BE2;&#xFF1A;<br>&#x5BF9;&#x4E8E;&#x957F;&#x5EA6;&#x4E3A;n&#x7684;&#x6570;&#x5217;A&#xFF0C;&#x6C42;&#x89E3;&#x82E5;&#x5E72;RMQ(i, j) (i,j&lt;=n),&#x8FD4;&#x56DE;A[i]~A[j]&#x7684;&#x6700;&#x503C;&#x3002;<br>ST&#xFF08;Sparse Table&#xFF09;&#x53EF;&#x5728;&#x7EBF;&#x5904;&#x7406;RMQ&#x95EE;&#x9898;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;O&#xFF08;nlogn&#xFF09;&#x5185;&#x8FDB;&#x884C;&#x9884;&#x5904;&#x7406;&#xFF0C;&#x7136;&#x540E;&#x5728;O(1)&#x5185;&#x67E5;&#x8BE2;&#x3002;</p><a id="more"></a><blockquote><p>&#x611F;&#x8C22;&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#xFF08;&#x5199;&#x7684;&#x5F88;&#x8BE6;&#x7EC6;&#xFF0C;&#x8FD9;&#x91CC;&#x53EA;&#x7A0D;&#x4F5C;&#x603B;&#x7ED3;&#xFF09;:<br><a href="https://www.jianshu.com/p/8eebc50ad28a" target="_blank" rel="noopener">https://www.jianshu.com/p/8eebc50ad28a</a><br><a href="https://www.cnblogs.com/zyf0163/p/4782133.html" target="_blank" rel="noopener">https://www.cnblogs.com/zyf0163/p/4782133.html</a></p></blockquote><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong></p><ol><li>&#x9884;&#x5904;&#x7406;&#xFF08;O(nlogn)&#xFF09;</li></ol><p>&#xB7; &#x786E;&#x5B9A;&#x6570;&#x5217;A[i]&#x81F3;A[j]&#x7684;&#x6700;&#x503C;&#xFF0C;&#x4E24;&#x91CD;&#x5FAA;&#x73AF;n^2&#x590D;&#x6742;&#x5EA6;&#xFF0C;dp&#x7684;&#x601D;&#x60F3;&#x662F;:<br>dp[i][j] &#x8BB0;&#x5F55;&#x7B2C;i&#x4F4D;~&#x7B2C;i+2^j&#x4E2D;&#x7684;&#x6700;&#x503C;&#xFF0C;dp[i][j]&#x7EF4;&#x62A4;&#x7684;&#x533A;&#x95F4;&#x662F;[i,i+2^j-1],&#x6784;&#x5EFA;&#x7684;&#x8FC7;&#x7A0B;&#x5C06;&#x533A;&#x95F4;&#x5206;&#x6210;&#x4E24;&#x534A;&#xFF0C;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;&#x5982;&#x4E0B;</p><blockquote><p>dp[i][j]=max/min(dp[i][j-1], dp[i+2^(j-1)][j-1])</p></blockquote><p>&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ST</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span>&lt;&lt;j) &lt;= n; ++j)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span> &lt;= n; ++i)</span><br><span class="line">        {</span><br><span class="line">            maxn[i][j] = max(maxn[i][j<span class="number">-1</span>], maxn[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">            minn[i][j] = min(minn[i][j<span class="number">-1</span>], minn[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x5F53;&#x7136;&#x8FD8;&#x6709;&#x8F93;&#x5165;&#x65F6;&#x7684;&#x9884;&#x5904;&#x7406;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    maxn[i][<span class="number">0</span>] = minn[i][<span class="number">0</span>] = t;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol><li>&#x67E5;&#x8BE2;(O(1))</li></ol><p>&#xB7;&#x7136;&#x800C;dp&#x8FD8;&#x4E0D;&#x80FD;&#x5F97;&#x5230;&#x533A;&#x95F4;i~j&#x7684;&#x6700;&#x503C;&#xFF0C;&#x8FD9;&#x91CC;&#x5F88;&#x5BB9;&#x6613;&#x60F3;&#x5230;&#x4EE4;k=log2(j-i+1),&#x6C42;dp[i][k]&#x4E0D;&#x5C31;&#x53EF;&#x4EE5;&#x5417;&#xFF1F;<br>&#x6CA1;&#x90A3;&#x4E48;&#x7B80;&#x5355;&#xFF0C;k&#x8981;&#x53D6;&#x6574;&#x6240;&#x4EE5;dp&#x8303;&#x56F4;&#x4F1A;&#x7F29;&#x5C0F;&#xFF0C;&#x4E8E;&#x662F;&#x8FD4;&#x56DE;&#x7684;&#x662F;</p><blockquote><p>return  max(dp[i][k], dp[j-2^k+1][k])</p></blockquote><p>&#x5206;&#x522B;&#x5BF9;&#x5E94;&#x533A;&#x95F4;[i][i+2^k-1], [j-2^k+1][j]&#x6BEB;&#x65E0;&#x7591;&#x95EE;&#x5982;&#x679C;&#x6709; k &gt;= j-2^k+1 &#x8FD9;&#x4E48;&#x8FD4;&#x56DE;&#x6CA1;&#x95EE;&#x9898;,&#x5173;&#x4E8E;&#x8BC1;&#x660E;&#xFF0C;&#x53C2;&#x8003;&#x7684;&#x7B2C;&#x4E8C;&#x7BC7;&#x535A;&#x5BA2;&#x5199;&#x7684;&#x5F88;&#x6E05;&#x695A;<br>&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> k = log2(j-i+<span class="number">1.0</span>);    </span><br><span class="line">    <span class="comment">//int k = log(j-i+1.0) / log(2.0);</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;max:&quot;</span> &lt;&lt; max(maxn[i][k], maxn[j-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;min:&quot;</span> &lt;&lt; min(minn[i][k], minn[j-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x5B8C;&#x6574;&#x4EE3;&#x7801;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, q;   <span class="comment">//n&#x4E2A;&#x6570;&#x91CC;&#x67E5;&#x627E;q&#x6B21;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> maxn[N][<span class="number">25</span>];</span><br><span class="line"><span class="keyword">int</span> minn[N][<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ST</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span>&lt;&lt;j) &lt;= <span class="number">20</span>; ++j)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span> &lt;= n; ++i)</span><br><span class="line">        {</span><br><span class="line">            maxn[i][j] = max(maxn[i][j<span class="number">-1</span>], maxn[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">            minn[i][j] = min(minn[i][j<span class="number">-1</span>], minn[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> k = log2(j-i+<span class="number">1.0</span>);    </span><br><span class="line">    <span class="comment">//int k = log(j-i+1.0) / log(2.0);</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;max:&quot;</span> &lt;&lt; max(maxn[i][k], maxn[j-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;min:&quot;</span> &lt;&lt; min(minn[i][k], minn[j-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        maxn[i][<span class="number">0</span>] = minn[i][<span class="number">0</span>] = t;</span><br><span class="line">    }</span><br><span class="line">    ST(n);</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        solve(x, y);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ax+By=C问题</title>
      <link href="/2020/03/11/ax-by-c%E9%97%AE%E9%A2%98/"/>
      <url>/2020/03/11/ax-by-c%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>&#x603B;&#x7ED3;&#x603B;&#x7ED3; Ax+By=C</p><a id="more"></a><h3 id="Ax-By-C&#x7684;&#x89E3;&#x7684;&#x8BA8;&#x8BBA;-&#x4EC5;A-B&#x4E3A;&#x5E38;&#x6570;"><a href="#Ax-By-C&#x7684;&#x89E3;&#x7684;&#x8BA8;&#x8BBA;-&#x4EC5;A-B&#x4E3A;&#x5E38;&#x6570;" class="headerlink" title="Ax+By=C&#x7684;&#x89E3;&#x7684;&#x8BA8;&#x8BBA;(&#x4EC5;A,B&#x4E3A;&#x5E38;&#x6570;)"></a>Ax+By=C&#x7684;&#x89E3;&#x7684;&#x8BA8;&#x8BBA;(&#x4EC5;A,B&#x4E3A;&#x5E38;&#x6570;)</h3><p>1.&#x82E5;A,B&#x4E92;&#x8D28;&#xFF0C;&#x5219;&#x5BF9;&#x4EFB;&#x610F;C,x,y&#x4E00;&#x5B9A;&#x6709;&#x89E3;&#x4E14;&#x6709;&#x65E0;&#x7A77;&#x591A;&#x4E2A;&#xFF1B;<br>  &#x82E5;&#x8FD8;&#x8981;&#x6C42;x&#xFF0C;y&#x7684;&#x89E3;&#x975E;&#x8D1F;&#xFF0C;&#x90A3;&#x4E48;&#x6EE1;&#x8DB3;Ax+By=C&#x7684;&#x65E0;&#x89E3;&#x7684;C&#x7684;&#x4E2A;&#x6570;&#x6709;&#x9650;&#xFF0C;C&#x6700;&#x5927;&#x53D6;<br>   max{C|C&#x5BFC;&#x81F4;&#x65E0;&#x89E3;}=A*B+A+B&#xFF1B;<br>2.&#x82E5;A,B&#x4E0D;&#x4E92;&#x8D28;&#xFF0C;&#x5219;&#x5BF9;&#x4EFB;&#x610F;C,&#x4E0D;&#x80FD;&#x4FDD;&#x8BC1;x&#xFF0C;y&#x4E00;&#x5B9A;&#x6709;&#x89E3;&#xFF1B;<br>  &#x8FD9;&#x65F6;&#x4EC5; C%GCD(A,B)==0 &#x6709;&#x89E3;&#xFF1B;<br>  &#x4E0D;&#x80FD;&#x4FDD;&#x8BC1;&#x6709;&#x89E3;&#x5373;&#x6EE1;&#x8DB3;Ax+By=C&#x7684;&#x65E0;&#x89E3;&#x7684;C&#x7684;&#x4E2A;&#x6570;&#x4E3A;INF</p><h3 id="Ax-By-C&#x7684;&#x89E3;-A-B-C&#x5747;&#x4E3A;&#x5E38;&#x6570;"><a href="#Ax-By-C&#x7684;&#x89E3;-A-B-C&#x5747;&#x4E3A;&#x5E38;&#x6570;" class="headerlink" title="Ax+By=C&#x7684;&#x89E3;(A,B,C&#x5747;&#x4E3A;&#x5E38;&#x6570;)"></a>Ax+By=C&#x7684;&#x89E3;(A,B,C&#x5747;&#x4E3A;&#x5E38;&#x6570;)</h3><p>&#x5206;&#x4E24;&#x79CD;&#x60C5;&#x51B5;:<br>1.C%GCD(A,B)==0 &#x65B9;&#x7A0B;&#x6709;&#x89E3;&#xFF0C;&#x7279;&#x522B;&#x7684;GCD(A,B)=1,&#x65B9;&#x7A0B;&#x6709;&#x552F;&#x4E00;&#x89E3;<br>2.&#x53CD;&#x4E4B;&#x65E0;&#x89E3;<br>&#x8BE5;&#x65B9;&#x7A0B;&#x7684;&#x89E3;&#x540C;&#x65F6;&#x53EF;&#x8F6C;&#x6362;&#x4E3A;&#x6A21;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;(&#x540C;&#x4F59;&#x65B9;&#x7A0B;)&#x7684;&#x89E3;&#xFF1A;<br>&#x6C42;&#x89E3;&#x6A21;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;(&#x540C;&#x4F59;&#x65B9;&#x7A0B;)ax=b(mod n)</p><ul><li>&#x8BBE;d = gcd(a, n), &#x5047;&#x5B9A;&#x5BF9;&#x6574;&#x6570;x&#x2019;, y&#x2019;, &#x6709;d = ax&#x2019; + ny&#x2019;&#xFF0C;<br>&#x5982;&#x679C;d | b, &#x5219;&#x65B9;&#x7A0B;ax = b(mod n)&#x6709;&#x4E00;&#x4E2A;&#x89E3;&#x7684;&#x503C;&#x4E3A;x0, &#x6EE1;&#x8DB3;&#xFF1A;<br>x0 = x&#x2019;(b / d)(mod n&#xFF09;<br>&#x4E8E;&#x662F;&#x6C42;&#x5F97;x&#x2019;&#x7684;&#x89E3;&#x5C31;&#x53EF;&#x5F97;&#x5230;x0&#x7684;&#x89E3;&#x5373;&#x65B9;&#x7A0B; ax-ny=b&#x7684;&#x89E3;<br>&#x800C;ax&#x2019;+ny&#x2019;=d&#x7684;&#x89E3;&#x53C8;&#x9700;&#x8981;&#x7528;&#x5230;Extend_Eculid&#x5B9A;&#x7406;<br>&#x6709;&#x5173;Extend_Eculid&#x7684;&#x901A;&#x89E3;&#x53EF;&#x53C2;&#x8003;&#x6211;&#x7684;&#xFF1A;<a href="https://www.weayer.top/2020/03/11/Extend_Eculid/" target="_blank" rel="noopener">https://www.weayer.top/2020/03/11/Extend_Eculid/</a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">Extend_Eculid</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>{               <span class="comment">//&#x6C42;&#x89E3;ax + by = Gcd(a,b) &#x51FD;&#x6570;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x4E3A;GCD(a,b)</span></span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    {</span><br><span class="line">        x = <span class="number">1</span>; y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        ll temp = Extend_Eculid(b, a%b, y, x);</span><br><span class="line">        y = y - a/b*x;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><p>&#x8F93;&#x51FA;&#x4E00;&#x7EC4;&#x7279;&#x89E3;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ll a, n, b, d, x, y; </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;n&gt;&gt;b;        <span class="comment">//ax=b(mod n)</span></span><br><span class="line">    d= Extend_Eculid(a, n, &amp;x, &amp;y);    <span class="comment">//&#x8FD4;&#x56DE;&#x503C;d = Gcd(a, n),&#x5E76;&#x5F97;&#x5230;&#x4E00;&#x7EC4;&#x7279;&#x89E3;x&apos;,y&apos; </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Gcd(a,n) = %lld\n&quot;</span>, d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x0=%lld, y0=%d\n&quot;</span>, x, y);</span><br><span class="line">    <span class="keyword">if</span>(b%d)            <span class="comment">//&#x5F53;d|b&#xFF0C;&#x65B9;&#x7A0B;&#x624D;&#x6709;&#x89E3;  </span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> x0 = x*(b/d)%n; </span><br><span class="line">        <span class="keyword">int</span> y0 = (b-a*x0)/n;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&#x7279;&#x89E3;&#xFF1A;%d %d\n&quot;</span>, x0, y0);</span><br><span class="line">            </span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&#x5F53;&#x7136;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x4E00;&#x7EC4;x0&#x4E86;&#x53EF;&#x4EE5;&#x7B97;&#x4E00;&#x4E0B;&#x5176;&#x4ED6;&#x901A;&#x89E3;</span><br><span class="line">```c++</span><br><span class="line"><span class="keyword">int</span> x1 = x0 + i*(n/d);</span><br></pre></td></tr></table></figure><p>&#x5BF9;&#x4E8E;&#x7279;&#x522B;&#x7684; GCD(A,B)=1 &#x6709;&#x552F;&#x4E00;&#x89E3;&#xFF0C;&#x5176;&#x89E3;&#x5373;&#x4E3A;a&#x7684;&#x9006;<br>&#x6709;&#x5173;&#x9006;&#x5143;&#x53EF;&#x53C2;&#x8003;&#x6211;&#x7684;&#xFF1A; <a href="https://www.weayer.top/2020/02/28/Inverse/" target="_blank" rel="noopener">https://www.weayer.top/2020/02/28/Inverse/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Extend_Eculid</title>
      <link href="/2020/03/11/Extend-Eculid/"/>
      <url>/2020/03/11/Extend-Eculid/</url>
      
        <content type="html"><![CDATA[<p>Extend_Eculid&#x6269;&#x5C55;&#x6B27;&#x51E0;&#x91CC;&#x5F97;&#x7B97;&#x6CD5;&#xFF1A;ax + by = Gcd(a,b)</p><a id="more"></a><p>&#x6CE8;&#x610F;a&#xFF0C;b&#x8981;&#x6C42;&#x4E3A;&#x975E;&#x8D1F;&#x6574;&#x6570;&#xFF0C;&#x5E76;&#x4E14;&#x8BE5;&#x65B9;&#x7A0B;&#x4E00;&#x5B9A;&#x6709;&#x89E3;<br>&#x901A;&#x8FC7;&#x63A8;&#x5BFC;&#x53EF;&#x5F97;&#x5230;&#x4E00;&#x7EC4;&#x7279;&#x89E3;x0<br>ax1+ by1 = ax2 +by2 &#x540C;&#x65F6;&#x9664;&#x4EE5;Gcd(a,b)<br>a<code>(x1-x2) = b</code>(y2-y1)<br>&#x9664;&#x4EE5;Gcd(a,b)&#x540E;a<code>b</code>&#x4E92;&#x7D20;<br>&#x5219;x1-x2 = t<em>b` y2-y1=t</em>a`  (t=&#x2026;-2,-1,0,1,2&#x2026;)<br>&#x5F97;&#x901A;&#x89E3;    x = x0 + t*b/Gcd(a,b)   (t=&#x2026;-2,-1,0,1,2&#x2026;)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Extend_Eculid</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>{               <span class="comment">//&#x6C42;&#x89E3;ax + by = Gcd(a,b) </span></span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    {</span><br><span class="line">        x = <span class="number">1</span>; y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        Extend_Eculid(b, a%b, y, x);</span><br><span class="line">        y = y - a/b*x;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>·[51nod-1009]数字1的数量</title>
      <link href="/2020/03/10/51nod-1009%E6%95%B0%E5%AD%971%E7%9A%84%E6%95%B0%E9%87%8F/"/>
      <url>/2020/03/10/51nod-1009%E6%95%B0%E5%AD%971%E7%9A%84%E6%95%B0%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;&#xFF1A;<a href="http://www.51nod.com/Challenge/Problem.html#problemId=1009" target="_blank" rel="noopener">http://www.51nod.com/Challenge/Problem.html#problemId=1009</a></p></blockquote><a id="more"></a><h3 id="&#x9898;&#x89E3;1"><a href="#&#x9898;&#x89E3;1" class="headerlink" title="&#x9898;&#x89E3;1"></a>&#x9898;&#x89E3;1</h3><p>&#x611F;&#x8C22;&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#xFF1A; <a href="https://blog.csdn.net/adusts/article/details/80730383" target="_blank" rel="noopener">https://blog.csdn.net/adusts/article/details/80730383</a><br>&#x4EE5;&#x4E0A;&#x535A;&#x5BA2;&#x5199;&#x7684;&#x5F88;&#x8BE6;&#x7EC6;&#xFF0C;&#x8FD9;&#x91CC;&#x7A0D;&#x4F5C;&#x603B;&#x7ED3;<br><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5982;&#x8F93;&#x5165;&#xFF1A;n=43102&#xFF0C;&#x5219;&#x8F93;&#x51FA;&#x7684;&#x662F;1`4321&#x4E2D;1&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;</p><ul><li>1.&#x904D;&#x5386;43102&#x7684;&#x6BCF;&#x4E00;&#x4F4D;(i=1,2,3,4,5)&#xFF0C;&#x904D;&#x5386;&#x987A;&#x5E8F;1-n&#xFF0C;&#x8BB0;&#x5F55;&#x7B2C;i&#x4F4D;&#x51FA;&#x73B0;1&#x7684;&#x6B21;&#x6570;ans&#xFF0C;&#x7136;&#x540E;&#x76F8;&#x52A0;&#x5F97;&#x7ED3;&#x679C;<br>2.&#x5BF9;&#x4E8E;&#x7B2C;i&#x4F4D;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x5C0F;&#x4E8E;1(&#x5982;&#x5341;&#x4F4D;&#x6570;1)&#xFF0C;ans = 431<em>10     {10,11,19,&#x2026;,43110,43119}<br>  &#x5982;&#x679C;&#x5927;&#x4E8E;1(&#x5982;&#x5343;&#x4F4D;&#x6570;3)&#xFF0C;ans = (4+1)</em>1000 {1000,1001,&#x2026;,1999,21000,&#x2026;,21999,31000,&#x2026;41999}<br>  &#x5982;&#x679C;&#x7B49;&#x4E8E;1(&#x5982;&#x767E;&#x4F4D;&#x6570;1)&#xFF0C;ans = 43*100+2   {100,&#x2026;,199,1100,&#x2026;,43199,43101,43102}<br>  (&#x6CE8;&#xFF1A;&#x94FE;&#x63A5;&#x535A;&#x5BA2;&#x4E2D;&#x7B49;&#x4E8E;1&#x7684;&#x60C5;&#x51B5;&#x6709;&#x70B9;&#x9519;&#x8BEF;)<br>&#x6309;&#x6B64;&#x89C4;&#x5F8B;&#xFF0C;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ll i = <span class="number">1</span>, front = <span class="number">0</span>, after = <span class="number">0</span>, now = <span class="number">0</span>;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n/i)</span><br><span class="line">    {</span><br><span class="line">        front = n / (<span class="number">10</span>*i);</span><br><span class="line">        after = n % i;            <span class="comment">// after = n - n/i%i;</span></span><br><span class="line">        now = n % (<span class="number">10</span>*i) / i;    <span class="comment">// now = n/i%10;</span></span><br><span class="line">        <span class="keyword">if</span>(now == <span class="number">0</span>)</span><br><span class="line">            ans += front*i;</span><br><span class="line">        <span class="keyword">if</span>(now == <span class="number">1</span>)</span><br><span class="line">            ans += (front*i + after + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(now &gt; <span class="number">1</span>)</span><br><span class="line">            ans += (front+<span class="number">1</span>)*i;</span><br><span class="line">        i *= <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><h3 id="&#x9898;&#x89E3;2-&#x6570;&#x4F4D;dp"><a href="#&#x9898;&#x89E3;2-&#x6570;&#x4F4D;dp" class="headerlink" title="&#x9898;&#x89E3;2-&#x6570;&#x4F4D;dp"></a>&#x9898;&#x89E3;2-&#x6570;&#x4F4D;dp</h3><p>&#x53C2;&#x8003;&#x6211;&#x7684;dp-digit: <a href="https://www.weayer.top/2020/03/10/dp-digit/" target="_blank" rel="noopener">https://www.weayer.top/2020/03/10/dp-digit/</a><br><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>1.&#x5BF9;&#x4E8E;10^i&#x5185;&#x8BB0;&#x5F55;1&#x51FA;&#x73B0;&#x6B21;&#x6570;<br>2.&#x540C;&#x6837;&#x5982;n=43102&#xFF0C;&#x904D;&#x5386;&#x6BCF;&#x4E00;&#x4F4D;&#x6570;&#xFF0C;&#x4F46;&#x904D;&#x5386;&#x987A;&#x5E8F;&#x4ECE;n&#x5230;1&#xFF0C;&#x8FD8;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x662F;&#x8FD9;&#x91CC;&#x5C06;&#x5176;&#x62C6;&#x4E3A;m[] = {40000,3000,100,0,2}<br>&#x5BF9;&#x4E8E;&#x7B2C;i&#x4F4D;&#xFF0C;&#x8BB0;&#x5F55;m[i-1]&#x5185;1&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;res&#xFF0C;&#x800C;10^i&#x5185;1&#x7684;&#x6B21;&#x6570;&#x5DF2;&#x7ECF;&#x5F97;&#x5230;&#x4E86;(&#x5982;&#x5343;&#x4F4D;&#x6570;3&#xFF0C;ans = 3*dp[3])<br>&#x5F53;&#x7136;&#x5355;&#x72EC;&#x8BA1;&#x7B97;ans&#x7136;&#x540E;&#x7D2F;&#x52A0;&#x80AF;&#x5B9A;&#x662F;&#x4E0D;&#x884C;&#x7684;&#xFF0C;&#x7B2C;i&#x4F4D;&#x6570;&#x7684;&#x8D21;&#x732E;&#x503C;&#x8FD8;&#x4E0E;&#x4F4E;&#x4F4D;&#x7684;&#x6570;&#x6709;&#x5173;(&#x5982;&#x5343;&#x4F4D;&#x6570;3&#xFF0C;&#x4EC5;&#x8BB0;&#x5F55;&#x4E86;3000&#x5185;1&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x540E;&#x9762;102&#x540C;&#x6837;&#x4F1A;&#x7528;&#x5230;3)&#x6240;&#x4EE5;&#x7C7B;&#x4F3C;&#x9898;&#x89E3;1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll a[<span class="number">25</span>], dp[<span class="number">25</span>], digit[<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span>      <span class="comment">//&#x7EDF;&#x8BA1;10^(i-1)&#x5185;&#x5404;&#x6570;&#x51FA;&#x73B0;&#x6B21;&#x6570;,dp[i]&#x5B58;&#x50A8; </span></span></span><br><span class="line"><span class="function"></span>{               <span class="comment">//dp[i] = 10*dp[i-1] + 10^(i-1)</span></span><br><span class="line">    digit[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; ++i)</span><br><span class="line">    {</span><br><span class="line">        dp[i] = dp[i<span class="number">-1</span>]*<span class="number">10</span> + digit[i<span class="number">-1</span>];</span><br><span class="line">        digit[i] = digit[i<span class="number">-1</span>] * <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll m)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ll ans = m, len = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(m)</span><br><span class="line">    {</span><br><span class="line">        a[++len] = m % <span class="number">10</span>;</span><br><span class="line">        m /= <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = len; k &gt;=<span class="number">1</span>; --k)</span><br><span class="line">    {</span><br><span class="line">        sum += a[k] * dp[k<span class="number">-1</span>];</span><br><span class="line">        ans -= a[k] * digit[k<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(a[k] == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[k] == <span class="number">1</span>)</span><br><span class="line">            sum += (ans + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sum += digit[k<span class="number">-1</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dp-digit</title>
      <link href="/2020/03/10/dp-digit/"/>
      <url>/2020/03/10/dp-digit/</url>
      
        <content type="html"><![CDATA[<p>&#x6570;&#x4F4D;dp&#x4E00;&#x822C;&#x5C31;&#x662F;&#x8981;&#x7EDF;&#x8BA1;&#x4E00;&#x4E2A;&#x533A;&#x95F4;[l,r]&#x5185;&#x6EE1;&#x8DB3;&#x4E00;&#x4E9B;&#x6761;&#x4EF6;&#x6570;&#x7684;&#x4E2A;&#x6570;&#x3002;</p><a id="more"></a><blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;: <a href="http://www.51nod.com/Challenge/Problem.html#problemId=1042" target="_blank" rel="noopener">http://www.51nod.com/Challenge/Problem.html#problemId=1042</a></p></blockquote><p>&#x611F;&#x8C22;&#x4F18;&#x79C0;&#x535A;&#x5BA2;&#xFF1A;<a href="https://www.cnblogs.com/y2823774827y/p/10301145.html" target="_blank" rel="noopener">https://www.cnblogs.com/y2823774827y/p/10301145.html</a><br>&#x4EE5;&#x4E0A;&#x535A;&#x5BA2;&#x5199;&#x7684;&#x5F88;&#x8BE6;&#x7EC6;&#xFF0C;&#x8FD9;&#x91CC;&#x7A0D;&#x4F5C;&#x603B;&#x7ED3;<br><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong></p><ul><li><p>1.&#x9996;&#x5148;&#x8BA1;&#x7B97;10^i&#x5185;1-9&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x4E0B;&#x9762;&#x7B80;&#x79F0;&#x4E3A;&#x5404;&#x6570;&#x8D21;&#x732E;&#x503C;b<a href="j=0,1,2,...,9">j</a><br>dp[i] = 10<em>dp[i-1] + 10^(i-1)<br>&#x5176;&#x5B9E;&#x5F88;&#x597D;&#x7406;&#x89E3;&#xFF0C;&#x5982;i=1,&#x663E;&#x7136;10&#x4EE5;&#x5185;1-9&#x5404;&#x6570;&#x8D21;&#x732E;&#x503C;&#x5747;&#x4E3A;1;i=2,100&#x4EE5;&#x5185;&#x5404;&#x6570;&#x8D21;&#x732E;&#x503C;10</em>1+10</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll a[<span class="number">25</span>], digit[<span class="number">25</span>], dp[<span class="number">25</span>], countl[<span class="number">20</span>], countr[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span>        <span class="comment">//&#x7EDF;&#x8BA1;10^(i-1)&#x5185;&#x5404;&#x6570;&#x51FA;&#x73B0;&#x6B21;&#x6570;,dp[i]&#x5B58;&#x50A8; </span></span></span><br><span class="line"><span class="function"></span>{                <span class="comment">//dp[i] = 10*dp[i-1] + 10^(i-1)</span></span><br><span class="line">    digit[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; ++i)</span><br><span class="line">    {</span><br><span class="line">        dp[i] = (dp[i<span class="number">-1</span>]&lt;&lt;<span class="number">3</span>) + (dp[i<span class="number">-1</span>]&lt;&lt;<span class="number">1</span>) + digit[i<span class="number">-1</span>];</span><br><span class="line">        digit[i] = (digit[i<span class="number">-1</span>]&lt;&lt;<span class="number">3</span>) + (digit[i<span class="number">-1</span>]&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>2.&#x63A5;&#x7740;&#x8BA1;&#x7B97;&#x6570;n&#x5185;&#x5404;&#x6570;&#x8D21;&#x732E;&#x503C;<br>&#x5982;n=43102&#xFF0C;&#x904D;&#x5386;&#x6BCF;&#x4E00;&#x4F4D;&#x6570;&#xFF0C;&#x904D;&#x5386;&#x987A;&#x5E8F;&#x4ECE;n&#x5230;1&#xFF0C;&#x5C06;&#x5176;&#x62C6;&#x4E3A;{40000,3000,100,0,2}<br>&#x5BF9;&#x4E8E;&#x7B2C;i&#x4F4D;&#xFF0C;&#x8BB0;&#x5F55;2&#x9879; 1)&#x62C6;&#x5206;&#x7684;&#x7B2C;i&#x4F4D;&#x6570;&#x8D21;&#x732E;&#x503C;(&#x5982;i=1,&#x4E3A;b[j]+=4*dp[5])<br>2)&#x7B2C;i&#x4F4D;&#x6570;&#x7684;&#x8D21;&#x732E;&#x503C;(&#x5982;i=1,&#x4E3A;b[j]+=(3102+1))</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> m, ll *b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ll len = <span class="number">0</span>, ans = m;</span><br><span class="line">    <span class="keyword">while</span>(m)        <span class="comment">//&#x5B57;&#x7B26;&#x4E32;&#x5B58;&#x50A8;m </span></span><br><span class="line">    {</span><br><span class="line">        a[++len] = m % <span class="number">10</span>;</span><br><span class="line">        m /= <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(ll k = len; k&gt;=<span class="number">1</span>; --k)    </span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">            b[i] += dp[k<span class="number">-1</span>] * a[k];        <span class="comment">//10^(k-1)&#x5185;&#x5404;&#x6570;&#x7684;&#x8D21;&#x732E;&#x503C; </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a[k]; ++i)</span><br><span class="line">            b[i] += digit[k<span class="number">-1</span>];        <span class="comment">//&#x7B2C;k&#x4F4D;&#x6570;&#x7684;&#x8D21;&#x732E;&#x503C;,&#x4E0D;&#x5305;&#x542B;a[k] </span></span><br><span class="line">        ans -= a[k]*digit[k<span class="number">-1</span>];    <span class="comment">//m = m % ( 10^(k-1) ) </span></span><br><span class="line">        b[a[k]] += (ans + <span class="number">1</span>);        <span class="comment">//a[k]&#x7684;&#x8D21;&#x732E;&#x503C; </span></span><br><span class="line">        b[<span class="number">0</span>] -= digit[k<span class="number">-1</span>];        <span class="comment">//0&#x7684;&#x8D21;&#x732E;&#x503C;&#x5728;&#x4E4B;&#x524D;&#x52A0;&#x4E0A;&#x7684;&#x8981;&#x5220;&#x53BB; </span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>3.&#x6700;&#x540E;&#x53EF;&#x4EE5;&#x6C42;[a,b]&#x95F4;&#x5404;&#x6570;&#x7684;&#x8D21;&#x732E;&#x503C;&#xFF0C;&#x7B97;&#x4E24;&#x6B21;&#x5373;&#x53EF; solve(b) - solve[a-1]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    init();</span><br><span class="line">    ll m, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">    solve(m<span class="number">-1</span>, countl);</span><br><span class="line">    solve(n, countr);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, countl[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, countr[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,countr[i] - countl[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>·[NOIP-2015]·[POJ-2456]</title>
      <link href="/2020/03/07/NOIP-2015-POJ-2456/"/>
      <url>/2020/03/07/NOIP-2015-POJ-2456/</url>
      
        <content type="html"><![CDATA[<h3 id="&#x9898;&#x76EE;1-NOIP-2015"><a href="#&#x9898;&#x76EE;1-NOIP-2015" class="headerlink" title="&#x9898;&#x76EE;1[NOIP-2015]"></a>&#x9898;&#x76EE;1[NOIP-2015]</h3><blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;&#xFF1A;<a href="https://nanti.jisuanke.com/t/T2028" target="_blank" rel="noopener">https://nanti.jisuanke.com/t/T2028</a></p></blockquote><a id="more"></a><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>1.&#x6C42;&#x6700;&#x77ED;&#x8DDD;&#x79BB;&#x7684;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x679C;&#x65AD;&#x4E8C;&#x5206;&#xFF0C;&#x6CE8;&#x610F;&#x8FD9;&#x91CC;&#x5C06;&#x8D77;&#x70B9;&#xFF0C;&#x7EC8;&#x70B9;&#x90FD;&#x770B;&#x4F5C;&#x77F3;&#x5934;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">a[n+<span class="number">1</span>]=l;        <span class="comment">//&#x5C06;&#x8D77;&#x70B9;&#x3001;&#x7EC8;&#x70B9;&#x90FD;&#x770B;&#x505A;&#x77F3;&#x5934;</span></span><br></pre></td></tr></table></figure><p>2.&#x5224;&#x65AD;&#x6700;&#x77ED;&#x8DDD;&#x79BB;middle&#x662F;&#x5426;&#x53EF;&#x884C;&#x65F6;&#xFF0C;&#x904D;&#x5386;&#x6570;&#x7EC4;&#xFF0C;&#x82E5;&#x4E24;&#x4E24;&#x8DDD;&#x79BB;&#x5C0F;&#x4E8E;middle&#xFF0C;&#x77F3;&#x5934;&#x79FB;&#x8D70;++cnt</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lower_bound</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span>    <span class="comment">//&#x6C42;&#x89E3;&#x6700;&#x77ED;&#x8DDD;&#x79BB;&#x7684;&#x6700;&#x5927;&#x503C;</span></span></span><br><span class="line"><span class="function"></span>{                    <span class="comment">//&#x5373;&#x4E8C;&#x5206;&#x67E5;&#x627E;1-l </span></span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> middle;        <span class="comment">//middle&#x4E3A;&#x6700;&#x77ED;&#x8DDD;&#x79BB; </span></span><br><span class="line">        middle= (low+high)&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(judge(middle))    <span class="comment">//judge(middle)&#x4E3A;&#x771F;&#x5219;&#x7EE7;&#x7EED;&#x67E5;&#x627E;(middle+1)`high</span></span><br><span class="line">        {</span><br><span class="line">            ans= middle;</span><br><span class="line">            low= middle+<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>        <span class="comment">//judge(middle)&#x4E3A;&#x5047;&#x5219;&#x67E5;&#x627E;low`(middle-1) </span></span><br><span class="line">            high=middle<span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span>    <span class="comment">//judge()&#x4E3A;&#x771F;&#x5219;&#x6EE1;&#x8DB3;&#xFF1A;&#x81F3;&#x591A;&#x79FB;&#x8D70;m&#x4E2A;&#x77F3;&#x5934;&#xFF0C;&#x6700;&#x77ED;&#x8DDD;&#x79BB;&#x4E3A;x </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> count= <span class="number">0</span>, now=<span class="number">0</span>;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(a[i]- a[now]&lt; x)   <span class="comment">//&#x76F8;&#x90BB;&#x77F3;&#x5934;&#x95F4;&#x8DDD;&#x79BB;&#x82E5;&#x5C0F;&#x4E8E;x,&#x77F3;&#x5934;&#x5FC5;&#x987B;&#x79FB;&#x8D70; </span></span><br><span class="line">            count++;</span><br><span class="line">        <span class="keyword">else</span>         </span><br><span class="line">            now= i;</span><br><span class="line">    }          <span class="comment">//&#x6700;&#x7EC8;&#x5F97;&#x5230;count&#x503C;&#x4E3A;&#x81F3;&#x5C11;&#x79FB;&#x8D70;&#x77F3;&#x5934;&#x4E2A;&#x6570; </span></span><br><span class="line">    <span class="keyword">return</span> count &lt;= m;   <span class="comment">//&#x81F3;&#x5C11;&#x79FB;&#x8D70;&#x4E2A;&#x6570;count&#x4E0D;&#x5927;&#x4E8E;&#x6700;&#x591A;&#x80FD;&#x79FB;&#x8D70;&#x4E2A;&#x6570;m&#x65F6;,&#x4E3A;&#x771F; </span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x9898;&#x76EE;2-POJ-2456"><a href="#&#x9898;&#x76EE;2-POJ-2456" class="headerlink" title="&#x9898;&#x76EE;2[POJ-2456]"></a>&#x9898;&#x76EE;2[POJ-2456]</h3><blockquote><p>&#x9898;&#x76EE;&#x6765;&#x6E90;&#xFF1A;<a href="https://vjudge.net/problem/POJ-2456" target="_blank" rel="noopener">https://vjudge.net/problem/POJ-2456</a></p></blockquote><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>1.&#x540C;&#x6837;&#x6C42;&#x6700;&#x77ED;&#x8DDD;&#x79BB;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x65E0;&#x9700;&#x589E;&#x52A0;&#x8D77;&#x70B9;&#x7EC8;&#x70B9;&#xFF0C;&#x6CE8;&#x610F;&#x8981;&#x6392;&#x5E8F;<br>2.&#x9009;&#x62E9;&#x5976;&#x725B;&#x6240;&#x5728;&#x4F4D;&#x7F6E;&#xFF0C;&#x5373;&#x4E0A;&#x9898;&#x786E;&#x5B9A;&#x77F3;&#x5934;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x90A3;&#x4E48;&#x8BB0;&#x5F55;&#x7A7A;&#x4F4D;&#x7F6E;&#xFF0C;&#x5373;&#x4E0A;&#x9898;&#x9700;&#x8981;&#x79FB;&#x8D70;&#x7684;&#x77F3;&#x5934;&#x6570;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span>       <span class="comment">//judge()&#x4E3A;&#x771F;&#x5219;&#x6EE1;&#x8DB3;&#xFF1A;&#x653E;&#x7F6E;m&#x5934;&#x5976;&#x725B;&#xFF0C;&#x6700;&#x77ED;&#x8DDD;&#x79BB;&#x4E3A;x </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(l[i] - l[now] &lt; x)   <span class="comment">//&#x76F8;&#x90BB;&#x8DDD;&#x79BB;&#x82E5;&#x5C0F;&#x4E8E;x,&#x4E0D;&#x80FD;&#x653E;&#x5976;&#x725B;(&#x77F3;&#x5934;&#x5FC5;&#x987B;&#x79FB;&#x8D70;) </span></span><br><span class="line">        {</span><br><span class="line">            ++cnt;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            now = i;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> cnt &lt;= (n-m);    <span class="comment">//&#x6700;&#x5C11;&#x7A7A;&#x4F4D;&#x7F6E;&#x6570;cnt&#x4E0D;&#x5927;&#x4E8E;n-m&#xFF0C;&#x4E3A;&#x771F;</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    sort(l, l+n);</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>, high = l[n<span class="number">-1</span>] - l[<span class="number">0</span>]+<span class="number">1</span>, ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> middle = (low + high) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(judge(middle))</span><br><span class="line">        {</span><br><span class="line">            ans = middle;</span><br><span class="line">            low = middle + <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            high = middle - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>heap</title>
      <link href="/2020/03/05/heap/"/>
      <url>/2020/03/05/heap/</url>
      
        <content type="html"><![CDATA[<p>&#x5806;&#x662F;&#x4E00;&#x79CD;&#x7279;&#x6B8A;&#x7684;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x6709;&#x6700;&#x5C0F;&#x5806;&#x548C;&#x6700;&#x5927;&#x5806;&#x4E24;&#x79CD;&#x3002;</p><a id="more"></a><p>&#x5982;&#x56FE;&#x4E3A;&#x6700;&#x5C0F;&#x5806;&#xFF0C;&#x6EE1;&#x8DB3;&#x6240;&#x6709;&#x7236;&#x7ED3;&#x70B9;&#x90FD;&#x6BD4;&#x5B50;&#x7ED3;&#x70B9;&#x5C0F;&#x3002;&#x6700;&#x5927;&#x5806;&#x53CD;&#x4E4B;&#x3002;<br>&#x663E;&#x7136;&#x6700;&#x5C0F;&#x5806;&#x7684;&#x7279;&#x6027;&#x662F;&#x6839;&#x7ED3;&#x70B9;&#x7684;&#x503C;&#x6700;&#x5C0F;&#x3002;<br><img width="50%" src="/2020/03/05/heap/1.png"></p><h2 id="&#x6784;&#x5EFA;&#x6700;&#x5C0F;&#x5806;"><a href="#&#x6784;&#x5EFA;&#x6700;&#x5C0F;&#x5806;" class="headerlink" title="&#x6784;&#x5EFA;&#x6700;&#x5C0F;&#x5806;"></a>&#x6784;&#x5EFA;&#x6700;&#x5C0F;&#x5806;</h2><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>1.&#x628A;n&#x4E2A;&#x5143;&#x7D20;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x5806;&#xFF0C;&#x6CE8;&#x610F;&#x8FD9;&#x91CC;&#x727A;&#x7272;&#x4E86;h[0]&#x5B58;&#x50A8;&#xFF0C;&#x5C06;n&#x4E2A;&#x7ED3;&#x70B9;&#x81EA;&#x9876;&#x5411;&#x4E0B;&#xFF0C;&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x7684;&#x65B9;&#x5F0F;&#x4ECE;1&#x5230;n&#x7F16;&#x7801;&#x3002;&#x8FD9;&#x6837;&#x4FBF;&#x5C06;n&#x4E2A;&#x7ED3;&#x70B9;&#x8F6C;&#x6362;&#x4E3A;&#x4E00;&#x68F5;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811;&#x3002;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> h[]={<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>};</span><br><span class="line"><span class="keyword">int</span> n=<span class="number">8</span>;    <span class="comment">//&#x5B58;&#x50A8;&#x5806;&#x4E2D;&#x5143;&#x7D20;&#x4E2A;&#x6570;&#xFF0C;&#x5373;&#x5806;&#x7684;&#x5927;&#x5C0F;</span></span><br></pre></td></tr></table></figure><p>2.&#x4ECE;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x975E;&#x53F6;&#x7ED3;&#x70B9;(&#x7F16;&#x53F7;&#x4E3A;n/2)&#x5F00;&#x59CB;&#x5230;&#x6839;&#x7ED3;&#x70B9;(&#x7F16;&#x53F7;&#x4E3A;1)&#x9010;&#x4E2A;&#x626B;&#x63CF;&#xFF0C;&#x6BCF;&#x6B21;&#x626B;&#x63CF;&#x5C31;&#x662F;&#x5C06;&#x7ED3;&#x70B9;&#x5411;&#x4E0B;&#x8C03;&#x6574;&#x3002;<br>&#x6CE8;&#xFF1A;&#x5411;&#x4E0B;&#x8C03;&#x6574;&#x5373;&#x8BA9;&#x5B50;&#x6811;&#x7B26;&#x5408;&#x5806;&#x7684;&#x7279;&#x6027;&#x3002;<br><img width="60%" src="/2020/03/05/heap/2.png"><br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">()</span>    <span class="comment">//&#x6784;&#x5EFA;&#x6700;&#x5C0F;&#x5806; </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> i;      <span class="comment">//&#x4ECE;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x975E;&#x53F6;&#x7ED3;&#x70B9;&#x5230;&#x7B2C;1&#x4E2A;&#x7ED3;&#x70B9;&#x4F9D;&#x6B21;&#x5411;&#x4E0A;&#x8C03;&#x6574; </span></span><br><span class="line">    <span class="keyword">for</span>(i = n/<span class="number">2</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        siftdown(i);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x5411;&#x4E0B;&#x8C03;&#x6574;"><a href="#&#x5411;&#x4E0B;&#x8C03;&#x6574;" class="headerlink" title="&#x5411;&#x4E0B;&#x8C03;&#x6574;"></a>&#x5411;&#x4E0B;&#x8C03;&#x6574;</h3><p>&#x4ECE;&#x7F16;&#x53F7;&#x4E3A;i&#x7684;&#x7ED3;&#x70B9;&#x5F00;&#x59CB;&#x5411;&#x4E0B;&#x8C03;&#x6574;&#xFF0C;&#x56E0;&#x4E3A;&#x8981;&#x6784;&#x5EFA;&#x6700;&#x5C0F;&#x5806;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x8BA9;&#x5B50;&#x6811;&#x4E2D;&#x7236;&#x7ED3;&#x70B9;&#x59CB;&#x7EC8;&#x662F;&#x6700;&#x5C0F;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x5B50;&#x7ED3;&#x70B9;&#x6BD4;&#x7236;&#x7ED3;&#x70B9;&#x5C0F;&#xFF0C;&#x5C31;&#x4EA4;&#x6362;&#xFF0C;&#x7EE7;&#x7EED;&#x5411;&#x4E0A;&#x8C03;&#x6574;&#x3002;<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span>    <span class="comment">//&#x4EA4;&#x6362;&#x5806;&#x4E2D;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x503C; </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    t=h[x];</span><br><span class="line">    h[x]=h[y];</span><br><span class="line">    h[y]=t;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">siftdown</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>{                    <span class="comment">//&#x4ECE;&#x7F16;&#x53F7;&#x4E3A;i&#x7684;&#x8282;&#x70B9;&#x5F00;&#x59CB;&#x5411;&#x4E0B;&#x8C03;&#x6574; </span></span><br><span class="line">    <span class="keyword">int</span> t, flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i*<span class="number">2</span> &lt;= n &amp;&amp; !flag)<span class="comment">//&#x5F53;&#x7ED3;&#x70B9;i&#x6709;&#x513F;&#x5B50;&#x5E76;&#x4E14;&#x6709;&#x9700;&#x8981;&#x7EE7;&#x7EED;&#x8C03;&#x6574;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x6267;&#x884C; </span></span><br><span class="line">    {                <span class="comment">//t&#x8BB0;&#x5F55;&#x503C;&#x8F83;&#x5C0F;&#x7684;&#x7ED3;&#x70B9;&#x7F16;&#x53F7; </span></span><br><span class="line">        <span class="keyword">if</span>(h[i] &gt; h[<span class="number">2</span>*i])    <span class="comment">//&#x5224;&#x65AD;&#x548C;&#x5DE6;&#x513F;&#x5B50;&#x7684;&#x5173;&#x7CFB; </span></span><br><span class="line">            t = <span class="number">2</span>*i;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            t = i;</span><br><span class="line">        <span class="keyword">if</span>((<span class="number">2</span>*i + <span class="number">1</span>) &lt;= n)</span><br><span class="line">        {        <span class="comment">//&#x5982;&#x679C;&#x6709;&#x53F3;&#x513F;&#x5B50;&#xFF0C;&#x5224;&#x65AD;&#x548C;&#x53F3;&#x513F;&#x5B50;&#x5173;&#x7CFB; </span></span><br><span class="line">            <span class="keyword">if</span>(h[t] &gt; h[<span class="number">2</span>*i + <span class="number">1</span>])</span><br><span class="line">                t = <span class="number">2</span>*i+<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(t != i)    <span class="comment">// t != i&#xFF0C;&#x5373;&#x5B50;&#x7ED3;&#x70B9;&#x4E2D;&#x6709;&#x66F4;&#x5C0F;&#x7684; </span></span><br><span class="line">        {</span><br><span class="line">            swap(t, i);    <span class="comment">//&#x4EA4;&#x6362;&#x4E24;&#x4E2A;&#x7ED3;&#x70B9;&#x7684;&#x503C;</span></span><br><span class="line">            i=t;        <span class="comment">//&#x66F4;&#x65B0;i&#xFF0C;&#x7EE7;&#x7EED;&#x5411;&#x4E0B;&#x8C03;&#x6574; </span></span><br><span class="line">        }       <span class="comment">//&#x53CD;&#x4E4B;&#xFF0C;&#x4E0D;&#x7528;&#x5411;&#x4E0B;&#x8C03;&#x6574;&#x4E86;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x5411;&#x4E0A;&#x8C03;&#x6574;"><a href="#&#x5411;&#x4E0A;&#x8C03;&#x6574;" class="headerlink" title="&#x5411;&#x4E0A;&#x8C03;&#x6574;"></a>&#x5411;&#x4E0A;&#x8C03;&#x6574;</h3><p>&#x6700;&#x5C0F;&#x5806;&#x5DF2;&#x7ECF;&#x6784;&#x5EFA;&#x597D;&#x4E86;&#xFF0C;&#x5982;&#x679C;&#x8981;&#x63D2;&#x5165;&#x5143;&#x7D20;&#x9700;&#x8981;&#x5411;&#x4E0A;&#x8C03;&#x6574;&#x3002;<br>&#x4ECE;&#x7F16;&#x53F7;&#x4E3A;i&#x7684;&#x975E;&#x53F6;&#x7ED3;&#x70B9;&#x5F00;&#x59CB;&#x5411;&#x4E0A;&#x8C03;&#x6574;&#xFF0C;&#x4E3A;&#x4E86;&#x7EF4;&#x62A4;&#x6700;&#x5C0F;&#x5806;&#x7279;&#x6027;&#xFF0C;&#x8981;&#x5C06;&#x8BE5;&#x70B9;&#x4E0E;&#x5176;&#x7236;&#x7ED3;&#x70B9;&#x6BD4;&#x8F83;&#xFF0C;&#x82E5;&#x7236;&#x7ED3;&#x70B9;&#x8F83;&#x5C0F;&#xFF0C;&#x5C31;&#x4EA4;&#x6362;&#xFF0C;&#x7EE7;&#x7EED;&#x5411;&#x4E0A;&#x8C03;&#x6574;&#x3002;<br><img width="60%" src="/2020/03/05/heap/3.png"><br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">siftup</span><span class="params">(<span class="keyword">int</span> i)</span>    <span class="comment">//&#x4ECE;&#x7F16;&#x53F7;&#x4E3A;i&#x5143;&#x7D20;&#x5F00;&#x59CB;&#x5411;&#x4E0A;&#x8C03;&#x6574; </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> t,flag=<span class="number">0</span>;</span><br><span class="line">    n++;</span><br><span class="line">    <span class="keyword">while</span>(i!=<span class="number">1</span> &amp;&amp; !flag)</span><br><span class="line">    {           <span class="comment">//&#x53EA;&#x9700;&#x548C;&#x7236;&#x7ED3;&#x70B9;&#x6BD4;&#x8F83;&#x5927;&#x5C0F;&#x5373;&#x53EF;</span></span><br><span class="line">        <span class="keyword">if</span>(h[i]&lt;h[i/<span class="number">2</span>])</span><br><span class="line">            t=i/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            t=i;</span><br><span class="line">        <span class="keyword">if</span>(t!=i)    <span class="comment">//&#x5982;&#x679C;&#x9700;&#x8981;&#x4EA4;&#x6362;&#xFF0C;&#x5C31;&#x7EE7;&#x7EED;&#x5411;&#x4E0A;&#x8C03;&#x6574;</span></span><br><span class="line">        {</span><br><span class="line">            swap(t,i);</span><br><span class="line">            i=t;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="&#x5806;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;"><a href="#&#x5806;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;" class="headerlink" title="&#x5806;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;"></a>&#x5806;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;</h2><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>1.&#x6784;&#x5EFA;&#x6700;&#x5927;&#x5806;&#xFF0C;&#x8FD9;&#x6837;&#x6700;&#x5927;&#x7684;&#x5143;&#x7D20;&#x5728;h[1]&#xFF0C;&#x7136;&#x540E;&#x5C06;h[1]&#x4E0E;h[n]&#x4EA4;&#x6362;(&#x6700;&#x5927;&#x7684;&#x5DF2;&#x5F52;&#x4F4D;)&#xFF0C;&#x8BB0;&#x5F97;h[1]&#x5411;&#x4E0B;&#x8C03;&#x6574;&#x4EE5;&#x4FDD;&#x6301;&#x5806;&#x7684;&#x7279;&#x6027;&#x3002;<br>2.&#x6267;&#x884C;&#x2013;n&#xFF0C;h[1]&#x4E0E;h[n]&#x4EA4;&#x6362;(&#x7B2C;&#x4E8C;&#x5927;&#x7684;&#x5DF2;&#x5F52;&#x4E3A;)&#xFF0C;h[1]&#x5411;&#x4E0B;&#x8C03;&#x6574;&#x3002;&#x5982;&#x6B64;&#x53CD;&#x590D;&#xFF0C;&#x76F4;&#x5230;&#x5806;&#x7684;&#x5927;&#x5C0F;&#x4E3A;1&#x3002;</p><p>&#x5806;&#x6392;&#x5E8F;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;O(n log n)<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapsort</span><span class="params">()</span>  <span class="comment">//&#x5806;&#x6392;&#x5E8F; </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">1</span>)   <span class="comment">//&#x5C06;h[1]&#x548C;h[n]&#x4EA4;&#x6362;&#x5F97;&#x5230;&#x6700;&#x5927;&#x5143;&#x7D20;h[n],&#x7136;&#x540E;&#x5C06;h[1]&#x5411;&#x4E0B;&#x8C03;&#x6574; </span></span><br><span class="line">    {</span><br><span class="line">        swap(<span class="number">1</span>,n);</span><br><span class="line">        n--;     <span class="comment">//&#x76F4;&#x5230;&#x5806;&#x7684;&#x5927;&#x5C0F;&#x4E3A;1&#x4E3A;&#x6B62; </span></span><br><span class="line">        siftdown(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inverse</title>
      <link href="/2020/02/28/Inverse/"/>
      <url>/2020/02/28/Inverse/</url>
      
        <content type="html"><![CDATA[<p> &#x9006;&#x5143;&#x5B9A;&#x4E49;&#xFF1A;&#x6A21;m&#x610F;&#x4E49;&#x4E0B;&#xFF0C;&#x6570;a&#x5982;&#x679C;&#x6709;&#x9006;&#x5143;x&#xFF0C;&#x90A3;&#x4E48;&#x9664;&#x4EE5;a&#x76F8;&#x5F53;&#x4E8E;&#x4E58;&#x4EE5;x</p><p>&#x5373;   ($b\times a$)%m = $\left(b\times m\right)% m$%m  &#x79F0;x&#x4E3A;a&#x7684;&#x9006; .&#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x8981;&#x6C42;  a&#x548C;m &#x4E92;&#x8D28;&#x4E14;&#x975E;&#x8D1F;</p><a id="more"></a><p>&#x7ED9;&#x5B9A;&#x6A21;&#x6570;m&#xFF0C;&#x6C42;a&#x7684;&#x9006;&#x76F8;&#x5F53;&#x4E8E; $ax\equiv1{(mod,m)}$   </p><p>&#x5373; ax - my = 1 &#x5B9E;&#x9645;&#x4E0A;&#x7EBF;&#x6027;&#x4E0D;&#x5B9A;&#x65B9;&#x7A0B;&#x65E0;&#x7A77;&#x591A;&#x89E3;&#xFF0C;&#x8FD9;&#x91CC;&#x53EA;&#x6C42;&#x6B63;&#x7684;&#x6700;&#x5C0F;&#x9006;&#x5143;</p><p>a, m&#x8981;&#x6C42;&#x975E;&#x8D1F;&#xFF0C;&#x4E14; Gcd(a, m) = 1 &#x5373;a, m&#x4E92;&#x8D28;</p><p>&#x9006;&#x5143;&#x6C42;&#x89E3;&#xFF1A;</p><p>1&#xFF09;&#x6269;&#x5C55;&#x6B27;&#x51E0;&#x91CC;&#x5F97;</p><p>2&#xFF09;&#x8D39;&#x9A6C;&#x5C0F;&#x5B9A;&#x7406;</p><p>3&#xFF09;&#x7EBF;&#x6027;&#x6C42;&#x89E3;</p><h3 id="&#x6269;&#x5C55;&#x6B27;&#x51E0;&#x91CC;&#x5F97;&#x5B9A;&#x7406;&#xFF1A;"><a href="#&#x6269;&#x5C55;&#x6B27;&#x51E0;&#x91CC;&#x5F97;&#x5B9A;&#x7406;&#xFF1A;" class="headerlink" title="&#x6269;&#x5C55;&#x6B27;&#x51E0;&#x91CC;&#x5F97;&#x5B9A;&#x7406;&#xFF1A;"></a>&#x6269;&#x5C55;&#x6B27;&#x51E0;&#x91CC;&#x5F97;&#x5B9A;&#x7406;&#xFF1A;</h3><p>&#x5DF2;&#x77E5;a,b&#x6C42;&#x89E3;&#x4E00;&#x7EC4;x,y &#x6EE1;&#x8DB3; ax + by = Gcd(a, b). &#x5E76;&#x4E14;&#x5DF2;&#x77E5;&#x8BE5;&#x65B9;&#x7A0B;&#x4E00;&#x5B9A;&#x6709;&#x89E3;</p><p>&#x800C;&#x9006;&#x5143;&#x6C42; ax - my = 1 &#x5373;&#x8981; Gcd(a,m) = 1 &#x4E14; a,m&#x975E;&#x8D1F;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">Extend_Eculid</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(!b)</span><br><span class="line">{</span><br><span class="line">*x = <span class="number">1</span>; *y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">ll temp = Extend_Eculid(b, a%b, y, x);</span><br><span class="line">y = y - a/b*x;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x5F97;&#x5230;&#x8FD4;&#x56DE;&#x503C;d &#x8981;&#x5224;&#x65AD;&#x4E00;&#x4E0B;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">ll a, m, x, y, d ;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;m;</span><br><span class="line">d = Extend_Eculid(a, m, &amp;x, &amp;y);<span class="comment">//&#x6269;&#x6B27;&#x5B9A;&#x7406;,&#x8FD4;&#x56DE;Gcd(a, m) </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; (d == <span class="number">1</span>? (x%m+m)%m : <span class="number">-1</span>)&lt;&lt; <span class="built_in">endl</span>;<span class="comment">//&#x53EF;&#x80FD;x%m&#x4E3A;&#x8D1F;,&#x6240;&#x4EE5;&#x518D;&#x52A0;&#x4E0A;m</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x8D39;&#x9A6C;&#x5C0F;&#x5B9A;&#x7406;&#xFF1A;"><a href="#&#x8D39;&#x9A6C;&#x5C0F;&#x5B9A;&#x7406;&#xFF1A;" class="headerlink" title="&#x8D39;&#x9A6C;&#x5C0F;&#x5B9A;&#x7406;&#xFF1A;"></a>&#x8D39;&#x9A6C;&#x5C0F;&#x5B9A;&#x7406;&#xFF1A;</h3><p>&#x82E5;p&#x4E3A;&#x7D20;&#x6570;&#xFF0C;a&#x4E3A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x4E14;a&#x3001;p&#x4E92;&#x8D28;.&#x5219;&#x6709;    $a^{p-1} = 1(mod,,p)$</p><p>&#x90A3;&#x4E48;  $a\times a^{p-2} = 1(mod,,p)$</p><p>&#x8FD9;&#x6837;a&#x7684;&#x9006;&#x5143;&#x7684;&#x89E3;&#x5373;  $ x = a^{p-2}$ ,&#x4F7F;&#x7528;&#x5FEB;&#x901F;&#x5E42;&#x6C42;&#x89E3; $a^{p-2}$ &#x5373;&#x53EF;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">mod_pow</span><span class="params">(ll x, ll n, ll p)</span><span class="comment">//&#x4EE3;&#x5165; a, m-2, m</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">ll res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">res = res*x%p;</span><br><span class="line">x = x*x%p;</span><br><span class="line">n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 逆元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>n的阶乘(High-precision)</title>
      <link href="/2020/02/28/High-precision1/"/>
      <url>/2020/02/28/High-precision1/</url>
      
        <content type="html"><![CDATA[<p>n&#x7684;&#x9636;&#x4E58;&#x6C42;f(n)&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x53EA;&#x80FD;&#x7B97;&#x5230;n = 20, &#x518D;&#x60F3;&#x8BA1;&#x7B97;&#x663E;&#x7136;&#x7528;&#x9AD8;&#x7CBE;&#x5EA6;&#x4E58;&#x6CD5;(&#x5B57;&#x7B26;&#x4E32;&#x5B58;&#x50A8;)&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x3002;</p><a id="more"></a><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong><em>n=23&#x8FD0;&#x884C;&#x7ED3;&#x679C;(&#x5DE6;&#x56FE;&#x9012;&#x5F52;&#x3001;&#x53F3;&#x56FE;&#x9AD8;&#x7CBE;&#x5EA6;)</em></strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><p><img width="45%" src="/2020/02/28/High-precision1/1.JPG"><img width="50%" src="/2020/02/28/High-precision1/2.JPG"></p><ul><li><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong> </p><blockquote><p>f(n) = 1* 2* 3<em>&#x2026;</em>n<br>&#x5176;&#x4E2D; f(i)*f(i+1) &#x4F7F;&#x7528;&#x9AD8;&#x7CBE;&#x5EA6;&#x4E58;&#x6CD5;,&#x90A3;&#x4E48;&#x8C03;&#x7528;n-1&#x6B21;&#x5373;&#x53EF;</p></blockquote></li></ul><p>&#x8FD9;&#x91CC;&#x4F7F;&#x7528;<strong>&#x9AD8;&#x7CBE;&#x5EA6;&#x52A0;&#x6CD5;</strong>&#x5B9E;&#x73B0;&#x9AD8;&#x7CBE;&#x5EA6;&#x4E58;&#x6CD5;,&#x6240;&#x4EE5;&#x5148;&#x4ECB;&#x7ECD;&#x9AD8;&#x7CBE;&#x5EA6;&#x52A0;&#x6CD5;<br>&#x9AD8;&#x7CBE;&#x5EA6;&#x52A0;&#x6CD5;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x8BA1;&#x7B97;&#x4E24;&#x4E2A;&#x6570;&#x76F8;&#x52A0;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x4F7F;&#x7528;&#x591A;&#x4E2A;&#x5B58;&#x50A8;&#x5355;&#x5143;&#xFF0C;&#x5C06;&#x6570;&#x5B57;&#x5B57;&#x7B26;&#x5B58;&#x50A8;&#x5230;&#x4E32;&#x4E2D;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x6570;&#x503C;&#x8303;&#x56F4;&#x8F83;&#x5927;&#x7684;&#x52A0;&#x6CD5;&#x8FD0;&#x7B97;,&#x5982;&#x56FE;&#x3002;</p><p>$ 666666+55555=(6+5)+(60+50)+(600+500)+(6000+5000)+(600000+50000)+(600000) $</p><img width="450px" src="/2020/02/28/High-precision1/3.png"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Add</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span>  <span class="comment">//&#x8BA1;&#x7B97;a+b</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">string</span> sum;</span><br><span class="line"><span class="keyword">if</span>(a.size() &lt; b.size())<span class="comment">//a&#x8BBE;&#x4E3A;&#x4F4D;&#x6570;&#x8F83;&#x5927;&#x7684;&#x6570;,&#x4FBF;&#x4E8E;&#x540E;&#x9762;&#x8BA1;&#x7B97; </span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">string</span> temp;</span><br><span class="line">temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> len = a.size();</span><br><span class="line">a = <span class="string">&apos;0&apos;</span>+a;<span class="comment">//&#x4E24;&#x6570;&#x76F8;&#x52A0;&#x7684;&#x7ED3;&#x679C;&#x4F4D;&#x6570;&#x6700;&#x5927;&#x4E5F;&#x5C31; a.size()+1 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len-b.size(); i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">b = <span class="string">&apos;0&apos;</span>+b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=len; ++i)</span><br><span class="line">sum += <span class="string">&apos;0&apos;</span>;<span class="comment">//&#x5C06;b, sum&#x524D;&#x9762;&#x6DFB;0&#x4F7F;&#x4F4D;&#x6570;&#x90FD;&#x4E3A; a.size()+1</span></span><br><span class="line"><span class="keyword">int</span> t,c=<span class="number">0</span>;<span class="comment">//c&#x8BB0;&#x5F55;&#x52A0;&#x6CD5;&#x8FDB;&#x4F4D;&#x503C; </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len; i&gt;=<span class="number">0</span>; --i) <span class="comment">//&#x4F4D;&#x6570;&#x76F8;&#x540C;&#x5C31;&#x4FBF;&#x4E8E;&#x4F9D;&#x6B21;&#x76F8;&#x52A0;&#x4E86;,&#x6CE8;&#x610F;&#x8FDB;&#x4F4D; </span></span><br><span class="line">{</span><br><span class="line">t = ((a[i]-<span class="string">&apos;0&apos;</span>)+(b[i]-<span class="string">&apos;0&apos;</span>)+c);<span class="comment">//t&#x8BB0;&#x5F55;&#x6BCF;&#x4F4D;&#x76F8;&#x52A0;&#x7684;&#x548C; </span></span><br><span class="line">c = t/<span class="number">10</span>;</span><br><span class="line">sum[i] += t%<span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(sum[<span class="number">0</span>]==<span class="string">&apos;0&apos;</span>) <span class="comment">//&#x82E5; a.size()+1 &#x4F4D;&#x6CA1;&#x6709;&#x8FDB;&#x4F4D;,&#x6709;&#x6548;&#x4F4D;&#x5C31;&#x53EA;&#x6709;a.size() </span></span><br><span class="line">sum = sum.substr(<span class="number">1</span>, sum.size());</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x4E58;&#x6CD5;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x591A;&#x6B21;&#x76F8;&#x52A0;,&#x6240;&#x4EE5;&#x9AD8;&#x7CBE;&#x5EA6;&#x4E58;&#x6CD5;&#x53EF;&#x4EE5;&#x7531;&#x591A;&#x6B21;&#x9AD8;&#x7CBE;&#x5EA6;&#x52A0;&#x6CD5;&#x5B9E;&#x73B0; a*b &#x5373; b&#x4E2A;a&#x76F8;&#x52A0;&#xFF0C; &#x5982;&#x56FE;</p><p>$ 333333\times22222 = 333333\times\left(20000+2000+200+20+2\right) $<img width="450px" src="/2020/02/28/High-precision1/4.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Mult</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span> <span class="comment">//&#x8BA1;&#x7B97;a*b</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(a.size()&lt;b.size())</span><br><span class="line">{<span class="comment">//a&#x8BBE;&#x4E3A;&#x4F4D;&#x6570;&#x8F83;&#x5927;&#x7684;&#x6570;</span></span><br><span class="line"><span class="built_in">string</span> temp;</span><br><span class="line">temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> len=b.size();</span><br><span class="line"><span class="built_in">string</span> sum=<span class="string">&quot;0&quot;</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">{<span class="comment">//&#x4EE4;b&#x6BCF;&#x4E00;&#x4F4D;&#x4F9D;&#x6B21;&#x4E0E;a&#x76F8;&#x4E58;,&#x7136;&#x540E;&#x76F8;&#x52A0;</span></span><br><span class="line"><span class="keyword">if</span>(i&lt;len<span class="number">-1</span>)</span><br><span class="line">a += <span class="string">&apos;0&apos;</span>;<span class="comment">//b[i]&#x6240;&#x5728;&#x7684;&#x662F;&#x7B2C;&#x51E0;&#x4F4D;,&#x4E0E;a&#x76F8;&#x4E58;&#x4E4B;&#x524D;&#x5C31;&#x7ED9;a&#x589E;&#x52A0;&#x591A;&#x5C11;&#x4E2A;0 </span></span><br><span class="line"><span class="built_in">string</span> ans = a;</span><br><span class="line"><span class="keyword">if</span>(b[i] != <span class="string">&apos;0&apos;</span>)<span class="comment">//b[i]&#x4E3A;&apos;0&apos;&#x5C31;&#x4E0D;&#x4E0E;a&#x76F8;&#x4E58; </span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;b[i]-<span class="string">&apos;0&apos;</span>; ++j)<span class="comment">//&#x4E58;&#x6CD5;&#x8F6C;&#x5316;&#x4E3A;&#x52A0;&#x6CD5; </span></span><br><span class="line">ans = Add(ans, a);<span class="comment">//&#x4E58;&#x591A;&#x5C11;&#x6B21;a&#x5C31;&#x662F;&#x52A0;&#x4E86;&#x591A;&#x5C11;&#x6B21;a </span></span><br><span class="line">sum = Add(sum, ans);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x63A5;&#x7740;&#x8BA1;&#x7B97;n&#x7684;&#x9636;&#x4E58;&#x5C31;&#x5F88;&#x5BB9;&#x6613;&#x4E86;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> n)</span><span class="comment">//&#x8BA1;&#x7B97;n&#x7684;&#x9636;&#x4E58;,&#x7ED3;&#x679C;&#x7528;&#x5B57;&#x7B26;&#x4E32;&#x5B58; </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">string</span> sum = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n &gt; i)<span class="comment">//f(n) = 1*2*3*...*n</span></span><br><span class="line">{</span><br><span class="line">sum = Mult(sum, to_string(++i));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 高精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sliding Window</title>
      <link href="/2020/02/07/Sliding-window/"/>
      <url>/2020/02/07/Sliding-window/</url>
      
        <content type="html"><![CDATA[<h2 id="&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7B97;&#x6CD5;&#xFF1A;"><a href="#&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7B97;&#x6CD5;&#xFF1A;" class="headerlink" title="&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7B97;&#x6CD5;&#xFF1A;"></a>&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7B97;&#x6CD5;&#xFF1A;</h2><p>&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x4E00;&#x822C;&#x7528;&#x4E8E;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x4E2D;&#xFF0C;&#x4F7F;&#x7528;&#x8BE5;&#x7A97;&#x53E3;&#x5728;&#x6570;&#x7EC4;&#x5408;&#x6CD5;&#x533A;&#x95F4;&#x5185;&#x6ED1;&#x52A8;&#xFF0C;&#x52A8;&#x6001;&#x8BB0;&#x5F55;&#x76F8;&#x5173;&#x4FE1;&#x606F;&#xFF0C;&#x4ECE;&#x800C;&#x63D0;&#x9AD8;&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;</p><a id="more"></a><h3 id="&#x9898;&#x76EE;1&#xFF1A;&#x4E0D;&#x5305;&#x542B;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;"><a href="#&#x9898;&#x76EE;1&#xFF1A;&#x4E0D;&#x5305;&#x542B;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;" class="headerlink" title="&#x9898;&#x76EE;1&#xFF1A;&#x4E0D;&#x5305;&#x542B;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;"></a>&#x9898;&#x76EE;1&#xFF1A;&#x4E0D;&#x5305;&#x542B;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;</h3><blockquote><p>&#x9898;&#x76EE;&#x63CF;&#x8FF0;&#xFF1A;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x627E;&#x51FA;&#x5176;&#x4E2D;&#x4E0D;&#x542B;&#x6709;&#x91CD;&#x590D;&#x5B57;&#x7B26;&#x7684; &#x6700;&#x957F;&#x5B50;&#x4E32; &#x7684;&#x957F;&#x5EA6;&#x3002;<br>&#x8F93;&#x5165;&#xFF1A;&#x201C;abcgbef&#x201D;<br>&#x8F93;&#x51FA;&#xFF1A;5</p></blockquote><ul><li><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x6570;&#x7EC4;&#x6A21;&#x62DF;&#x961F;&#x5217;&#xFF0C;front&#x6807;&#x8BB0;&#x7A97;&#x53E3;&#x5DE6;&#x7AEF;&#xFF0C;i&#x8BB0;&#x5F55;&#x7A97;&#x53E3;&#x53F3;&#x7AEF;&#xFF0C;i&#x4ECE;0&#x904D;&#x5386;&#x5230;&#x6570;&#x7EC4;&#x672B;&#x7AEF;.<br>map&lt;char,int&gt;&#x5B58;&#x653E;&#x4E0D;&#x540C;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x5728;&#x7A97;&#x53E3;&#x4E2D;&#x7684;&#x6B21;&#x6570;.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map&lt;char, int&gt; mp;</span><br></pre></td></tr></table></figure></li><li><p>&#x5F00;&#x59CB;front=0&#xFF0C;i&#x4E00;&#x76F4;&#x53F3;&#x79FB;,map&#x8BB0;&#x5F55;&#x5143;&#x7D20;&#x76F4;&#x81F3;&#x51FA;&#x73B0;&#x91CD;&#x590D;&#x5B57;&#x7B26;name&#xFF0C;&#x6709;mp[name]==2&#xFF0C;&#x8BB0;&#x4E0B;&#x5B57;&#x4E32;&#x957F;&#x5EA6;res.<br>i&#x518D;&#x8981;&#x540E;&#x79FB;&#xFF0C;&#x5219;&#x9700;&#x820D;&#x53BB;&#x4E4B;&#x524D;&#x51FA;&#x73B0;&#x7684;&#x91CD;&#x590D;&#x5B57;&#x7B26;&#xFF0C;&#x4E8E;&#x662F;front&#x53F3;&#x79FB;&#x81F3; a[front]==name.<br>&#x6BCF;&#x6B21;&#x51FA;&#x73B0;&#x91CD;&#x590D;&#x5B57;&#x7B26;&#x65F6;&#x5C31;&#x8003;&#x8651;&#x66F4;&#x65B0;&#x5B57;&#x4E32;&#x957F;&#x5EA6;res.</p></li></ul><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br>&#xB7;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xB7;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">int Sliding (string a)</span><br><span class="line">{</span><br><span class="line">if(a == &quot;&quot;)         //&#x4E32;&#x4E3A;&#x7A7A;&#x65F6;&#x8FD4;&#x56DE;0</span><br><span class="line">return 0;</span><br><span class="line">int len = a.size();</span><br><span class="line">int front = 0, res = -1;</span><br><span class="line">char name;</span><br><span class="line">map&lt;char, int&gt; mp;</span><br><span class="line">for(int i=0; i&lt;len; i++)</span><br><span class="line">{</span><br><span class="line">name = a[i];</span><br><span class="line">++mp[name];             //i&#x53F3;&#x79FB;&#xFF0C;mp&#x8BB0;&#x5F55;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x6B21;&#x6570;</span><br><span class="line">if(mp[name]==2)         //&#x51FA;&#x73B0;&#x91CD;&#x590D;&#x5B57;&#x7B26;</span><br><span class="line">{</span><br><span class="line">res = max(res, i-front);    //&#x66F4;&#x65B0;res&#xFF0C;&#x91CD;&#x590D;&#x7684;a[i]&#x4E0D;&#x80FD;&#x7B97;&#xFF0C;&#x6240;&#x4EE5;&#x662F;i-front</span><br><span class="line">while(name != a[front])</span><br><span class="line">{</span><br><span class="line">--mp[a[front]];</span><br><span class="line">++front;</span><br><span class="line">}                //&#x4E3A;&#x4FDD;&#x8BC1;&#x6CA1;&#x6709;&#x91CD;&#x590D;&#x5B57;&#x7B26;&#xFF0C;front&#x540E;&#x79FB;&#x81F3; name==a[front] </span><br><span class="line">++front;         //front&#x518D;&#x53F3;&#x79FB;&#x4E00;&#x4F4D;&#xFF0C;&#x7A97;&#x53E3;&#x5185;&#x5C31;&#x4E0D;&#x518D;&#x6709;&#x91CD;&#x590D;&#x5B57;&#x7B26;name&#x4E86;</span><br><span class="line">--mp[name];      //&#x6062;&#x590D;&#x81F3;mp[name]=1&#xFF0C;&#x7A97;&#x53E3;i&#x7EE7;&#x7EED;&#x540E;&#x79FB;</span><br><span class="line">}</span><br><span class="line">else</span><br><span class="line">{</span><br><span class="line">if(i == len-1)      //&#x7279;&#x6B8A;&#x60C5;&#x51B5;&#xFF1A;i&#x79FB;&#x81F3;&#x672B;&#x5C3E;&#x4F46;&#x65E0;&#x91CD;&#x590D;&#x5B57;&#x7B26;</span><br><span class="line">res = max(res, i-front+1);  //&#x6B64;&#x65F6;&#x82E5;&#x8981;&#x66F4;&#x65B0;&#x957F;&#x5EA6;&#x4E3A; i-front+1</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">return res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x9898;&#x76EE;2&#xFF1A;&#x81F3;&#x5C11;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x77ED;&#x5B50;&#x4E32;"><a href="#&#x9898;&#x76EE;2&#xFF1A;&#x81F3;&#x5C11;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x77ED;&#x5B50;&#x4E32;" class="headerlink" title="&#x9898;&#x76EE;2&#xFF1A;&#x81F3;&#x5C11;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x77ED;&#x5B50;&#x4E32;"></a>&#x9898;&#x76EE;2&#xFF1A;&#x81F3;&#x5C11;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x77ED;&#x5B50;&#x4E32;</h3><blockquote><p>&#x9898;&#x76EE;&#x63CF;&#x8FF0;<br>&#x7ED9;&#x957F;&#x5EA6;&#x4E3A;n&#x7684;&#x4E00;&#x6BB5;&#x5B57;&#x7B26;&#xFF0C;&#x8981;&#x6C42;&#x622A;&#x53D6;&#x4E00;&#x6BB5;&#x8FDE;&#x7EED;&#x5B57;&#x4E32;&#xFF0C;&#x6EE1;&#x8DB3;&#x81F3;&#x5C11;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5B57;&#x7B26;&#xFF0C;&#x6C42;&#x8BE5;&#x5B57;&#x4E32;&#x957F;&#x5EA6;&#x7684;&#x6700;&#x5C0F;&#x503C;<br>&#x8F93;&#x5165;&#xFF1A;9 2<br>     abebeabee<br>&#x8F93;&#x51FA;&#xFF1A;2</p></blockquote><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x8BE5;&#x9898;&#x6C42;&#x81F3;&#x5C11;k&#x4E2A;&#x5B57;&#x7B26;&#x7684;&#x6700;&#x77ED;&#x957F;&#x5EA6;&#xFF0C;&#x5373;&#x7A97;&#x53E3;&#x5185;&#x4EC5;&#x5305;&#x542B;k&#x4E2A;&#x5B57;&#x7B26;&#xFF0C;&#x5E76;&#x4E14;<br>k=1&#x65F6;,&#x663E;&#x7136;&#x6700;&#x77ED;res&#x4E3A;1&#xFF1B;<br>k&gt;1&#x65F6;,&#x6700;&#x77ED;&#x65F6;&#x5E94;&#x6EE1;&#x8DB3;a[front]=a[i]=name,name&#x5373;&#x91CD;&#x590D;&#x7684;&#x5B57;&#x7B26;.</li><li>&#x76F4;&#x63A5;&#x8BF4;&#x7A97;&#x53E3;&#x5728;&#x79FB;&#x52A8;&#x65F6;&#x548C;&#x4E0A;&#x9898;&#x7684;&#x4E0D;&#x540C;&#x4E4B;&#x5904;&#x5427;.<br>&#x540C;&#x6837;i&#x53F3;&#x79FB;&#x81F3; mp[name]==k ,front&#x53F3;&#x79FB;&#x76F4;&#x81F3; mp[name]==k(&#x5373;a[front]==name).<br>&#x8FD9;&#x662F;&#x4E3A;&#x4E86;&#x5C06;&#x957F;&#x5EA6;&#x5C3D;&#x53EF;&#x80FD;&#x7F29;&#x77ED;&#x81F3; a[front]=a[i]=name.<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</li></ul><p>&#xB7;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xB7;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">map&lt;char, int&gt; mp;</span><br><span class="line">char a[200005];</span><br><span class="line">int n, k, front = 0, res = -1;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k&gt;&gt;a;</span><br><span class="line">for(int i=0; i&lt;n; i++)</span><br><span class="line">{</span><br><span class="line">char name = a[i];</span><br><span class="line">++mp[name];</span><br><span class="line">while(mp[name] == k)         //front&#x53F3;&#x79FB;&#x81F3;mp[name]=k-1 &#x7ED3;&#x675F;&#x5FAA;&#x73AF;</span><br><span class="line">{</span><br><span class="line">if(res == -1)</span><br><span class="line">res = i-front+1;    //&#x5305;&#x542B;k=1,&#x6C42;res&#x7684;&#x60C5;&#x51B5;</span><br><span class="line">else</span><br><span class="line">res = min(res, i-front+1);  //res&#x6700;&#x77ED;&#x8981;&#x5305;&#x542B;a[i],&#x6240;&#x4EE5;&#x662F; i-front+1</span><br><span class="line">--mp[a[front]];</span><br><span class="line">++front;</span><br><span class="line">}           </span><br><span class="line">}</span><br><span class="line">cout&lt;&lt; res &lt;&lt;endl; </span><br><span class="line">return 0;</span><br></pre></td></tr></table></figure><h3 id="&#x9898;&#x76EE;3&#xFF1A;&#x6700;&#x591A;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;"><a href="#&#x9898;&#x76EE;3&#xFF1A;&#x6700;&#x591A;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;" class="headerlink" title="&#x9898;&#x76EE;3&#xFF1A;&#x6700;&#x591A;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;"></a>&#x9898;&#x76EE;3&#xFF1A;&#x6700;&#x591A;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;</h3><blockquote><p>&#x95EE;&#x9898;&#x63CF;&#x8FF0;<br>&#x94FE;&#x63A5;&#xFF1A;<a href="https://ac.nowcoder.com/acm/contest/3002/H" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/3002/H</a><br>&#x6765;&#x6E90;&#xFF1A;&#x725B;&#x5BA2;&#x7F51;<br>&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x201C;01&#x201D;&#x4E32;&#x800C;&#x8A00;&#xFF0C;&#x6BCF;&#x6B21;&#x64CD;&#x4F5C;&#x53EF;&#x4EE5;&#x628A;&#x2019;0&#x2019;&#x5B57;&#x7B26;&#x6539;&#x4E3A;&#x2019;1&#x2019;&#x5B57;&#x7B26;&#xFF0C;&#x6216;&#x8005;&#x628A;&#x2019;1&#x2019;&#x5B57;&#x7B26;&#x6539;&#x4E3A;&#x2019;0&#x2019;&#x5B57;&#x7B26;&#x3002;&#x6240;&#x8C13;&#x201C;01&#x201D;&#x4E32;&#xFF0C;&#x5373;&#x53EA;&#x542B;&#x5B57;&#x7B26;&#x2019;0&#x2019;&#x548C;&#x5B57;&#x7B26;&#x2019;1&#x2019;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x3002;<br>nozomi&#x6709;&#x6700;&#x591A; k &#x6B21;&#x64CD;&#x4F5C;&#x7684;&#x673A;&#x4F1A;&#x3002;&#x5979;&#x60F3;&#x5728;&#x64CD;&#x4F5C;&#x4E4B;&#x540E;&#x627E;&#x51FA;&#x4E00;&#x4E2A;&#x5C3D;&#x53EF;&#x80FD;&#x957F;&#x7684;&#x8FDE;&#x7EED;&#x5B50;&#x4E32;&#xFF0C;&#x8FD9;&#x4E2A;&#x5B50;&#x4E32;&#x4E0A;&#x7684;&#x6240;&#x6709;&#x5B57;&#x7B26;&#x90FD;&#x76F8;&#x540C;&#x3002;<br>&#x8FD9;&#x4E2A;&#x5B50;&#x4E32;&#x7684;&#x957F;&#x5EA6;&#x6700;&#x5927;&#x503C;&#x662F;&#x591A;&#x5C11;&#xFF1F; (&#x6CE8;&#xFF1A;k&#x6B21;&#x64CD;&#x4F5C;&#x673A;&#x4F1A;&#x53EF;&#x4EE5;&#x4E0D;&#x5168;&#x90E8;&#x7528;&#x5B8C;)<br>&#x8F93;&#x5165;&#xFF1A; 6 1<br>      101110<br>&#x8F93;&#x51FA;&#xFF1A; 5<br>(&#x6CE8;&#x5C06;&#x2019;0&#x2019;&#x6539;&#x4E3A;&#x2019;1&#x2019;&#x53EF;&#x5F97;&#x5230;&#x5B50;&#x4E32;&#x6700;&#x957F;&#x4E3A;5&#xFF0C;&#x5373;&#x201C;111110&#x201D;; &#x5C06;&#x2019;1&#x2019;&#x6539;&#x4E3A;&#x2019;0&#x2019;&#x5B50;&#x4E32;&#x6700;&#x957F;&#x4E3A;2&#xFF0C;&#x5373;&#x201C;001110&#x201D;.<br>&#x4E24;&#x8005;&#x53D6;&#x6700;&#x957F; max(5,2)=5)</p></blockquote><ul><li><p>&#x95EE;&#x9898;&#x5206;&#x6790;<br>&#x5206;&#x4E24;&#x79CD;&#x60C5;&#x51B5;&#xFF1A;<br>1)&#x5C06;&#x2019;0&#x2019;&#x6539;&#x4E3A;&#x2019;1&#x2019;,&#x5F97;&#x5230;&#x5B50;&#x4E32;&#x5B57;&#x7B26;&#x5168;&#x4E3A;&#x2019;1&#x2019;<br>2)&#x5C06;&#x2019;1&#x2019;&#x6539;&#x4E3A;&#x2019;0&#x2019;,&#x5F97;&#x5230;&#x5B50;&#x4E32;&#x5B57;&#x7B26;&#x5168;&#x4E3A;&#x2019;0&#x2019;<br>&#x6700;&#x540E;&#x6C42; max(Slide(&#x2018;1&#x2019;), Slide(&#x2018;0&#x2019;))</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int Slide(char a)//&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x7684;&#x662F;&#x66F4;&#x6539;&#x5B57;&#x7B26;a&#x540E;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;&#x957F;&#x5EA6;</span><br></pre></td></tr></table></figure></li><li><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5982; Slide(&#x2018;1&#x2019;) &#x6700;&#x7EC8;&#x5F97;&#x5230;&#x5B50;&#x4E32;&#x5B57;&#x7B26;&#x5168;&#x4E3A;&#x2019;0&#x2019;,&#x66F4;&#x6539;&#x2019;1&#x2019;&#x7684;&#x6B21;&#x6570;&#x4E0D;&#x8D85;&#x8FC7;k.<br>&#x8FD9;&#x91CC;&#x9700;&#x8981;&#x8F6C;&#x5316;&#x4E00;&#x4E0B;&#x601D;&#x60F3;,&#x5373;&#x66F4;&#x6539;&#x591A;&#x5C11;&#x6B21;&#x5B57;&#x7B26;&#x2019;1&#x2019; &#x5C31;&#x662F;&#x5BFB;&#x627E;&#x2019;1&#x2019;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;.<br>&#x90A3;&#x4E48;&#x8BE5;&#x95EE;&#x9898;&#x5373;&#x8F6C;&#x5316;&#x4E3A; &#x201C;01&#x201D;&#x4E32;&#x4E2D;&#x6700;&#x591A;&#x5305;&#x542B;k&#x4E2A;&#x2019;1&#x2019;&#x5B57;&#x7B26;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;.<br>&#x8BE5;&#x95EE;&#x9898;&#x7C7B;&#x4F3C;&#x9898;&#x76EE;1,&#x7A0D;&#x5FAE;&#x4E00;&#x70B9;&#x4E0D;&#x540C;&#x5728;&#x4E8E;:<br>&#x66F4;&#x6539;&#x5B57;&#x7B26;&#x6B21;&#x6570;mp(&#x4E5F;&#x5C31;&#x662F;&#x5305;&#x542B;&#x9898;&#x76EE;1&#x4E2D;&#x91CD;&#x590D;&#x5B57;&#x7B26;&#x4E2A;&#x6570;mp)&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;k,&#x800C;&#x4E0D;&#x662F;&#x5C0F;&#x4E8E;2.</p></li></ul><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><p>&#xB7;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xB7;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;map&gt; </span><br><span class="line">using namespace std;</span><br><span class="line">int n, k;</span><br><span class="line">char c[200005];</span><br><span class="line">int Slide(char a)//change a</span><br><span class="line">{//&#x5176;&#x5B9E;&#x5E76;&#x6CA1;&#x6709;&#x66F4;&#x6539;a,&#x800C;&#x662F;&#x5728;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x540C;&#x65F6;&#x67E5;&#x627E;a&#x51FA;&#x73B0;&#x6B21;&#x6570;</span><br><span class="line">map&lt;char, int&gt; mp;</span><br><span class="line">mp[a]=0;</span><br><span class="line">int front=0, ans = 0, res = 0;</span><br><span class="line">for(int i=0; i&lt;n; i++)</span><br><span class="line">{</span><br><span class="line">++mp[c[i]];</span><br><span class="line">if(mp[a]&gt;k)//&#x51FA;&#x73B0;&#x91CD;&#x590D;&#x5B57;&#x7B26;a&#x4E2A;&#x6570;&#x5927;&#x4E8E;k(&#x5373;&#x66F4;&#x6539;&#x6B21;&#x6570;&#x8D85;&#x8FC7;k&#x65F6;)</span><br><span class="line">{</span><br><span class="line">while(c[front]!=a)</span><br><span class="line">{</span><br><span class="line">res = max(res, i-front); //&#x5176;&#x5B9E;&#x79FB;&#x52A8;&#x8FC7;&#x7A0B;&#x4E0D;&#x4F1A;&#x66F4;&#x65B0;&#xFF0C;&#x56E0;&#x4E3A;&#x6C42;&#x7684;&#x662F;&#x6700;&#x957F;&#x957F;&#x5EA6;</span><br><span class="line">++front;//&#x7A97;&#x53E3;&#x5DE6;&#x7AEF;&#x5F00;&#x59CB;&#x79FB;&#x52A8;,front&#x79FB;&#x52A8;&#x548C;&#x9898;&#x76EE;1&#x4E00;&#x6837;</span><br><span class="line">}</span><br><span class="line">--mp[a];</span><br><span class="line">++front;</span><br><span class="line">}</span><br><span class="line">res = max(res, i-front+1);//&#x66F4;&#x65B0;max,&#x4FDD;&#x8BC1;&#x6BCF;&#x6B21;&#x5F97;&#x5230;&#x7A97;&#x53E3;&#x5185;a&#x51FA;&#x73B0;&#x6B21;&#x6570;&#x4E0D;&#x8D85;&#x8FC7;k</span><br><span class="line">}</span><br><span class="line">return res;</span><br><span class="line">}</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k&gt;&gt;c;</span><br><span class="line">cout&lt;&lt; max(Slide(&apos;1&apos;), Slide(&apos;0&apos;));</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="&#x6700;&#x540E;&#x5C0F;&#x7ED3;&#xFF1A;"><a href="#&#x6700;&#x540E;&#x5C0F;&#x7ED3;&#xFF1A;" class="headerlink" title="&#x6700;&#x540E;&#x5C0F;&#x7ED3;&#xFF1A;"></a>&#x6700;&#x540E;&#x5C0F;&#x7ED3;&#xFF1A;</h2><p>&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7684;&#x7B97;&#x6CD5;&#x601D;&#x60F3;&#xFF1A;<br>&#x7A97;&#x53E3;&#x6ED1;&#x52A8;&#x65F6;,&#x59CB;&#x7EC8;&#x4FDD;&#x8BC1;&#x7A97;&#x53E3;&#x5185;&#x662F;&#x5143;&#x7D20;&#x662F;&#x6EE1;&#x8DB3;&#x8981;&#x6C42;&#x7684;,&#x8FD9;&#x6837;&#x6ED1;&#x52A8;&#x7ED3;&#x675F;,&#x6700;&#x7EC8;&#x5C31;&#x80FD;&#x627E;&#x5230;&#x95EE;&#x9898;&#x6700;&#x4F18;&#x89E3;<br>&#x7B97;&#x6CD5;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A; &#x7A97;&#x53E3;&#x6700;&#x5927;&#x957F;&#x5EA6;O(n).</p>]]></content>
      
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Merge Sort</title>
      <link href="/2019/12/02/Merge-Sort/"/>
      <url>/2019/12/02/Merge-Sort/</url>
      
        <content type="html"><![CDATA[<p>&#x5F52;&#x5E76;&#xFF08;Merge&#xFF09;&#x6392;&#x5E8F;&#x6CD5;&#xFF0C;&#x5373;&#x628A;&#x5F85;&#x6392;&#x5E8F;&#x5E8F;&#x5217;&#x5206;&#x4E3A;&#x82E5;&#x5E72;&#x4E2A;&#x5B50;&#x5E8F;&#x5217;&#xFF0C;&#x6BCF;&#x4E2A;&#x5B50;&#x5E8F;&#x5217;&#x662F;&#x6709;&#x5E8F;&#x7684;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x628A;&#x6709;&#x5E8F;&#x5B50;&#x5E8F;&#x5217;&#x5408;&#x5E76;&#x4E3A;&#x6574;&#x4F53;&#x6709;&#x5E8F;&#x5E8F;&#x5217;&#x3002;</p><a id="more"></a><blockquote><p>&#x7B97;&#x6CD5;&#x5206;&#x6790;<br>    &#x6BCF;&#x4E00;&#x8D9F;&#x5F52;&#x5E76;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(n)&#xFF0C;&#x5171;&#x9700;&#x8981;&#x8FDB;&#x884C;log2n&#x8D9F;&#x3002;&#x5BF9;&#x5E94;&#x7684;&#x7B97;&#x6CD5;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(nlog2n)</p></blockquote><p>&#x4F8B;&#xFF1A;<br>Input     2 4 7 5 8 1 3 6<br>Output    1 2 3 4 5 6 7 8</p><h3 id="&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;"><a href="#&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;" class="headerlink" title="&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;"></a>&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;</h3><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5C06;&#x5F85;&#x6392;&#x5143;&#x7D20;&#x5206;&#x6210;&#x5927;&#x5C0F;&#x5927;&#x81F4;&#x76F8;&#x540C;&#x7684;&#x4E24;&#x4E2A;&#x5B50;&#x96C6;&#xFF0C;&#x5206;&#x522B;&#x5BF9;&#x4E24;&#x4E2A;&#x5B50;&#x96C6;&#x5408;&#x6392;&#x5E8F;&#xFF0C;&#x6700;&#x7EC8;&#x5C06;&#x6392;&#x597D;&#x5E8F;&#x7684;&#x5B50;&#x96C6;&#x5408;&#x5408;&#x5E76;<br>&#x8BBE;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x7684;&#x5F53;&#x524D;&#x533A;&#x95F4;&#x4E3A;R[low&#x2026;high],&#x5206;&#x6CBB;&#x6CD5;&#x7684;&#x4E09;&#x4E2A;&#x6B65;&#x9AA4;&#xFF1A;<br>1&#x3001;&#x5206;&#x89E3; &#x5F53;&#x524D;&#x533A;&#x95F4;&#x4E00;&#x5206;&#x4E3A;&#x4E8C;<br>2&#x3001;&#x6C42;&#x89E3; &#x9012;&#x5F52;&#x5BF9;&#x4E24;&#x4E2A;&#x5B50;&#x533A;&#x95F4;R[low&#x2026;mid]&#x548C;R[mid+1&#x2026;high]<br>3&#x3001;&#x7EC4;&#x5408; &#x5C06;&#x5DF2;&#x6392;&#x5E8F;&#x7684;&#x4E24;&#x4E2A;&#x5B50;&#x533A;&#x95F4;R[low&#x2026;mid]&#x548C;R[mid+1&#x2026;high]&#x5408;&#x5E76;&#x4E3A;&#x4E00;&#x4E2A;&#x6709;&#x5E8F;&#x533A;&#x95F4;R[low&#x2026;high]<br>&#x9012;&#x5F52;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;&#xFF1A;&#x5B50;&#x533A;&#x95F4;&#x957F;&#x5EA6;&#x4E3A;1<br><img src="/2019/12/02/Merge-Sort/3.jpg" width="70%"><img src="/2019/12/02/Merge-Sort/2.jpg" width="80%"></li></ul><p>Mergesort&#x51FD;&#x6570;&#x5B9E;&#x73B0;&#x6B65;&#x9AA4;1&#x3001;2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void mergesort(int a[], int low, int high)</span><br><span class="line">{</span><br><span class="line">int middle = (low + high)/2;</span><br><span class="line">if(low&lt;high)</span><br><span class="line">{</span><br><span class="line">mergesort(a, low, middle);</span><br><span class="line">mergesort(a, middle+1, high);</span><br><span class="line">sort(a, low, middle, high);</span><br><span class="line">cout&lt;&lt;&quot; low: &quot;&lt;&lt;low&lt;&lt;&quot; middle: &quot;&lt;&lt;middle&lt;&lt;&quot; high: &quot;&lt;&lt;high&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>Sort&#x51FD;&#x6570;&#x5B9E;&#x73B0;&#x6B65;&#x9AA4;3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void sort(int a[], int low, int middle, int high)</span><br><span class="line">{</span><br><span class="line">int i = low, j = middle+1, k = 0;</span><br><span class="line">int *b= new int[high-low+1];</span><br><span class="line">while(i&lt;=middle &amp;&amp; j&lt;=high)</span><br><span class="line">{</span><br><span class="line">if(a[i] &lt;= a[j])</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">else</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">}</span><br><span class="line">while(i&lt;=middle)</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">while(j&lt;=high)</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">for(k=0,i=low; i&lt;=high; k++,i++)</span><br><span class="line">a[i] = b[k];</span><br><span class="line">delete []b;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x5B8C;&#x6574;&#x4EE3;&#x7801;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;new&gt; </span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void sort(int a[], int low, int middle, int high)</span><br><span class="line">{</span><br><span class="line">int i = low, j = middle+1, k = 0;</span><br><span class="line">int *b= new int[high-low+1];</span><br><span class="line">while(i&lt;=middle &amp;&amp; j&lt;=high)</span><br><span class="line">{</span><br><span class="line">if(a[i] &lt;= a[j])</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">else</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">}</span><br><span class="line">while(i&lt;=middle)</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">while(j&lt;=high)</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">for(k=0,i=low; i&lt;=high; k++,i++)</span><br><span class="line">a[i] = b[k];</span><br><span class="line">delete []b;</span><br><span class="line">}</span><br><span class="line">void mergesort(int a[], int low, int high)</span><br><span class="line">{</span><br><span class="line">int middle = (low + high)/2;</span><br><span class="line">if(low&lt;high)</span><br><span class="line">{</span><br><span class="line">mergesort(a, low, middle);</span><br><span class="line">mergesort(a, middle+1, high);</span><br><span class="line">sort(a, low, middle, high);</span><br><span class="line">cout&lt;&lt;&quot; low: &quot;&lt;&lt;low&lt;&lt;&quot; middle: &quot;&lt;&lt;middle&lt;&lt;&quot; high: &quot;&lt;&lt;high&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">int a[] = {2, 4, 7, 5, 8, 1, 3, 6};</span><br><span class="line">mergesort(a, 0, 7);</span><br><span class="line">for(int i=0; i&lt;8; i++)</span><br><span class="line">printf(&quot;%d &quot;, a[i]);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x975E;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;"><a href="#&#x975E;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;" class="headerlink" title="&#x975E;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;"></a>&#x975E;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;</h3><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5C06;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x76F8;&#x90BB;&#x5143;&#x7D20;&#x4E24;&#x4E24;&#x914D;&#x5BF9;&#xFF0C;&#x6784;&#x6210;((length-1)/2+1)&#x7EC4;&#x6392;&#x5E8F;&#x597D;&#x7684;&#x5B50;&#x6570;&#x7EC4;&#x6BB5;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x5408;&#x5E76;&#xFF08;(length-1&#xFF09;/4+1)&#x7EC4;&#x5B50;&#x6570;&#x7EC4;&#x6BB5;&#xFF0C;&#x76F4;&#x5230;&#x6574;&#x4E2A;&#x6570;&#x7EC4;&#x6392;&#x5E8F;&#x597D;</li></ul><img src="/2019/12/02/Merge-Sort/4.jpg" width="80%"><p>&#x4E0E;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x76F8;&#x6BD4;&#x4EC5;mergesort&#x51FD;&#x6570;&#x4E0D;&#x540C;<br>&#x4E3B;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x65F6;&#x6539;&#x4E3A;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mergesort(a, 8);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void mergesort(int a[], int length)</span><br><span class="line">{</span><br><span class="line">int low, middle, high, size = 1;</span><br><span class="line">while(size &lt; length-1)</span><br><span class="line">{</span><br><span class="line">low = 0;</span><br><span class="line">while(low+size &lt; length-1)</span><br><span class="line">{</span><br><span class="line">middle = low+size-1;</span><br><span class="line">high = middle+size;</span><br><span class="line">if(high&gt;length-1)</span><br><span class="line">high = length-1;</span><br><span class="line">sort(a, low, middle, high);</span><br><span class="line">cout&lt;&lt;&quot; low: &quot;&lt;&lt;low&lt;&lt;&quot; middle: &quot;&lt;&lt;middle&lt;&lt;&quot; high: &quot;&lt;&lt;high&lt;&lt;endl;</span><br><span class="line">low = high+1;</span><br><span class="line">}</span><br><span class="line">size *= 2;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x81EA;&#x7136;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;"><a href="#&#x81EA;&#x7136;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;" class="headerlink" title="&#x81EA;&#x7136;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;"></a>&#x81EA;&#x7136;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;</h3><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5BF9;&#x4E8E;&#x521D;&#x59CB;&#x6570;&#x7EC4;a&#xFF0C;&#x901A;&#x5E38;&#x5B58;&#x5728;&#x591A;&#x4E2A;&#x957F;&#x5EA6;&#x5927;&#x4E8E;1&#x7684;&#x5DF2;&#x6392;&#x597D;&#x5E8F;&#x7684;&#x5B50;&#x6570;&#x7EC4;&#x6BB5;&#xFF0C;&#x627E;&#x51FA;&#x8FD9;&#x6837;&#x7684;&#x5B50;&#x6570;&#x7EC4;&#x6BB5;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x76F8;&#x90BB;&#x7684;&#x6392;&#x597D;&#x5E8F;&#x7684;&#x5B50;&#x6570;&#x7EC4;&#x6BB5;&#x4E24;&#x4E24;&#x5408;&#x5E76;&#xFF0C;&#x76F4;&#x81F3;&#x6574;&#x4E2A;&#x6570;&#x7EC4;&#x6392;&#x597D;&#x5E8F;</li></ul><p>1.Mergepass&#x51FD;&#x6570;&#x5B9E;&#x65F6;&#x67E5;&#x8BE2;&#x6570;&#x7EC4;a&#x4E2D;&#x6709;&#x591A;&#x5C11;&#x7EC4;&#x6392;&#x597D;&#x5E8F;&#x7684;&#x5B50;&#x6570;&#x7EC4;<br>2.&#x5C06;&#x8FD4;&#x56DE;&#x503C;&#x4F20;&#x7ED9;Mergesort&#x51FD;&#x6570;&#xFF0C;&#x518D;&#x8FDB;&#x884C;&#x6709;&#x5E8F;&#x5B50;&#x5E8F;&#x5217;&#x7684;&#x5408;&#x5E76;<br>3.&#x5408;&#x5E76;&#x64CD;&#x4F5C;&#x8C03;&#x7528;Sort&#x51FD;&#x6570;</p><p>&#x5B8C;&#x6574;&#x4EE3;&#x7801;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;new&gt; </span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int s[100]; </span><br><span class="line">void Sort(int a[], int low, int middle, int high)</span><br><span class="line">{</span><br><span class="line">int i = low, j = middle+1, k = 0;</span><br><span class="line">int *b= new int[high-low+1];</span><br><span class="line">while(i&lt;=middle &amp;&amp; j&lt;=high)</span><br><span class="line">{</span><br><span class="line">if(a[i] &lt;= a[j])</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">else</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">}</span><br><span class="line">while(i&lt;=middle)</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">while(j&lt;=high)</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">for(k=0,i=low; i&lt;=high; k++,i++)</span><br><span class="line">a[i] = b[k];</span><br><span class="line">delete []b;</span><br><span class="line">}</span><br><span class="line">int Mergepass(int x[], int n)</span><br><span class="line">{</span><br><span class="line">int k=0;</span><br><span class="line">int begin = x[0];</span><br><span class="line">s[k++] = 0;</span><br><span class="line">for(int i=1; i&lt;n; i++)</span><br><span class="line">{</span><br><span class="line">if(x[i] &lt; begin)</span><br><span class="line">s[k++] = i;</span><br><span class="line">begin = x[i];</span><br><span class="line">}</span><br><span class="line">s[k++] = n;</span><br><span class="line">return k;</span><br><span class="line">}</span><br><span class="line">void Mergesort(int a[], int length)</span><br><span class="line">{</span><br><span class="line">int Num = Mergepass(a, length);//&#x8FD4;&#x56DE;&#x7684;&#x662F;&#x5B50;&#x6570;&#x7EC4;&#x6BB5;&#x4E2A;&#x6570;+1</span><br><span class="line">while(Num != 2)</span><br><span class="line">{</span><br><span class="line">for(int i=0; i+1&lt;Num; i+=2)</span><br><span class="line">Sort(a, s[i], s[i+1]-1, s[i+2]-1);</span><br><span class="line">//&#x5373;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5408;&#x5E76;&#x4E2D;&#x7684;Sort(a,low,middle,high)</span><br><span class="line">Num = Mergepass(a, length);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">int  main()</span><br><span class="line">{ </span><br><span class="line">  int num[] = {2, 4, 7, 5, 8, 1, 3, 6};    </span><br><span class="line">    Mergesort(num,8);   </span><br><span class="line">    for(int i=0;i&lt;8;i++)</span><br><span class="line">    cout&lt;&lt;num[i]&lt;&lt;&apos; &apos;;  </span><br><span class="line">cout&lt;&lt;endl;    </span><br><span class="line">    return 0;       </span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stack</title>
      <link href="/2019/12/01/Stack/"/>
      <url>/2019/12/01/Stack/</url>
      
        <content type="html"><![CDATA[<h2 id="&#x6808;"><a href="#&#x6808;" class="headerlink" title="&#x6808;"></a>&#x6808;</h2><h3 id="&#x6C42;&#x89E3;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;"><a href="#&#x6C42;&#x89E3;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;" class="headerlink" title="&#x6C42;&#x89E3;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;"></a>&#x6C42;&#x89E3;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;</h3><blockquote><p>&#x7528;&#x6237;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x5305;&#x542B;&#x201C;+&#x201D;&#x3001;&#x201C;-&#x201D;&#x3001;&#x201C;*&#x201D;&#x3001;&#x201C;/&#x201D;&#x3001;&#x6B63;&#x6574;&#x6570;&#x548C;&#x5706;&#x62EC;&#x53F7;&#x7684;&#x5408;&#x6CD5;&#x7B97;&#x672F;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x8BA1;&#x7B97;&#x8BE5;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x8FD0;&#x7B97;&#x7ED3;&#x679C;(&#x4FDD;&#x7559;&#x5C0F;&#x6570;&#x70B9;&#x540E;&#x4E00;&#x4F4D;).<br>Input  (56-20)/(4+2)<br>Output  6.0</p></blockquote><a id="more"></a><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>1.&#x4E2D;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#x8F6C;&#x5316;&#x4E3A;&#x540E;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;<br>2.&#x540E;&#x7F00;&#x8868;&#x793A;&#x5F0F;&#x6C42;&#x503C;<br>&#x5934;&#x6587;&#x4EF6;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">using namespace std;</span><br></pre></td></tr></table></figure></li></ul><p>&#x4E3B;&#x51FD;&#x6570;&#x4E2D;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#x5B58;&#x5165;&#x6570;&#x7EC4;exp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">char exp[100], postexp[100];</span><br><span class="line">scanf(&quot;%s&quot;, exp);</span><br><span class="line">printf(&quot;&#x4E2D;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#xFF1A;&quot;); </span><br><span class="line">printf(&quot;%s\n&quot;, exp);</span><br><span class="line">Trans(exp, postexp);</span><br><span class="line">printf(&quot;&#x540E;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#xFF1A;&quot;);</span><br><span class="line">printf(&quot;%s\n&quot;, postexp);</span><br><span class="line">printf(&quot;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;&#xFF1A;&quot;);</span><br><span class="line">printf(&quot;%.1f\n&quot;, Disp(postexp));</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>1.&#x51FD;&#x6570;Trans&#x5C06;&#x4E2D;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#x8F6C;&#x5316;&#x4E3A;&#x540E;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;<br>&#x5B9A;&#x4E49;char&#x7C7B;&#x578B;&#x6808;a&#xFF0C;&#x626B;&#x63CF;&#x5B57;&#x7B26;&#x4E32;exp<br>&#x53EA;&#x8BA9;&#x8FD0;&#x7B97;&#x7B26;&#x8FDB;&#x6808;&#xFF0C;&#x6570;&#x5B57;&#x5B57;&#x7B26;&#x5B58;&#x5165;&#x6570;&#x7EC4;postexp<br>&#x5BF9;&#x4E8E;&#x4E0D;&#x540C;&#x8FD0;&#x7B97;&#x7B26;<br>&#x2018;(&#x2019;&#xFF1A;&#x8FDB;&#x6808;<br>&#x2018;)&#x2019;&#xFF1A;&#x5C06;&#x6700;&#x540E;&#x8FDB;&#x5165;&#x7684;&#x2019;(&#x2019;&#x4E4B;&#x524D;&#x7684;&#x8FD0;&#x7B97;&#x7B26;&#x51FA;&#x6808;&#xFF0C;&#x5E76;&#x5B58;&#x653E;&#x5230;postexp&#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x2019;(&#x2019;&#x51FA;&#x6808;<br>&#x2018;+&#x2019;&#x3001;&#x2019;-&#x2019;&#xFF1A;&#x51FA;&#x6808;&#xFF0C;&#x8FD0;&#x7B97;&#x7B26;&#x5B58;&#x653E;&#x5230;postexp&#x4E2D;&#xFF0C;&#x76F4;&#x5230;&#x6808;&#x7A7A;&#x6216;&#x6808;&#x9876;&#x4E3A;&#x2019;(&#x2019;<br>&#x2018;*&#x2019;&#x3001;&#x2019;/&#x2019;&#xFF1A;&#x51FA;&#x6808;&#xFF0C;&#x8FD0;&#x7B97;&#x7B26;&#x5B58;&#x653E;&#x5230;postexp&#x4E2D;&#xFF0C;&#x76F4;&#x5230;&#x6808;&#x7A7A;&#x6216;&#x6808;&#x9876;&#x4E3A;&#x2019;(&#x2019;&#x3001;&#x2019;+&#x2019;&#x3001;&#x2019;-&#x2019;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">void Trans(char *exp, char postexp[])</span><br><span class="line">{</span><br><span class="line">char e;</span><br><span class="line">stack&lt;char&gt; a;</span><br><span class="line">int i=0;</span><br><span class="line">while(*exp!=&apos;\0&apos;)</span><br><span class="line">{</span><br><span class="line">switch(*exp)</span><br><span class="line">{</span><br><span class="line">case &apos;(&apos;: a.push(&apos;(&apos;); exp++; break;</span><br><span class="line">case &apos;)&apos;: e = a.top(); </span><br><span class="line">  a.pop();</span><br><span class="line">  while(e!=&apos;(&apos;)</span><br><span class="line">  {</span><br><span class="line">  postexp[i++] = e;</span><br><span class="line">  e = a.top(); a.pop();</span><br><span class="line">  }</span><br><span class="line">  exp++; break;</span><br><span class="line">case &apos;+&apos;: </span><br><span class="line">case &apos;-&apos;: while(!a.empty())</span><br><span class="line">  {</span><br><span class="line">  e = a.top();</span><br><span class="line">  if(e!=&apos;(&apos;)</span><br><span class="line">  {</span><br><span class="line">  postexp[i++] = e;</span><br><span class="line">  e = a.top(); a.pop();</span><br><span class="line">}</span><br><span class="line">else </span><br><span class="line">break;</span><br><span class="line">  }</span><br><span class="line">  a.push(*exp); exp++; break;  </span><br><span class="line">case &apos;*&apos;:</span><br><span class="line">case &apos;/&apos;: while(!a.empty())</span><br><span class="line">  {</span><br><span class="line">  e = a.top();</span><br><span class="line">  if(e==&apos;*&apos;||e==&apos;/&apos;)</span><br><span class="line">  {</span><br><span class="line">  postexp[i++] = e;</span><br><span class="line">  e = a.top();</span><br><span class="line">  }</span><br><span class="line">else</span><br><span class="line">break;</span><br><span class="line">  }</span><br><span class="line">  a.push(*exp); exp++; break;</span><br><span class="line">default :</span><br><span class="line">while(*exp&gt;=&apos;0&apos; &amp;&amp; *exp&lt;=&apos;9&apos;)    //&#x5C06;&#x8FDE;&#x7EED;&#x6570;&#x5B57;&#x5B57;&#x7B26;&#x5B58;&#x5165;&#x6570;&#x7EC4;postexp </span><br><span class="line">{</span><br><span class="line">postexp[i++] = *exp;</span><br><span class="line">*exp++;</span><br><span class="line">}</span><br><span class="line">postexp[i++] = &apos;#&apos;;//&#x8FDE;&#x7EED;&#x6570;&#x5B57;&#x5B57;&#x7B26;&#x540E;&#x52A0;&apos;#&apos;&#x4EE5;&#x6807;&#x8BB0; </span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">while(!a.empty())</span><br><span class="line">{</span><br><span class="line">e = a.top();</span><br><span class="line">a.pop();</span><br><span class="line">postexp[i++] = e;</span><br><span class="line">}</span><br><span class="line">postexp[i] = &apos;\0&apos;;      //&#x540E;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#x4EE5;&#x5B57;&#x7B26;&#x4E32;&#x5F62;&#x5F0F;&#x5B58;&#x653E; </span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>2.&#x51FD;&#x6570;Disp&#x8BA1;&#x7B97;&#x540E;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;<br>&#x5B9A;&#x4E49;double&#x7C7B;&#x578B;&#x6808;opnd&#xFF0C;&#x626B;&#x63CF;&#x6570;&#x7EC4;postexp<br>&#x6570;&#x5B57;&#x5B57;&#x7B26;&#xFF1A;&#x8F6C;&#x5316;&#x4E3A;&#x6570;&#x503C;&#x5E76;&#x8FDB;&#x6808;<br>&#x8FD0;&#x7B97;&#x7B26;&#xFF1A;&#x9000;&#x6808;&#x4E24;&#x4E2A;&#x6570;&#xFF0C;&#x8BA1;&#x7B97;&#xFF0C;&#x5C06;&#x7ED3;&#x679C;&#x8FDB;&#x6808;<br>&#x626B;&#x63CF;&#x7ED3;&#x675F;&#xFF0C;&#x51FA;&#x6808;&#x7ED3;&#x679C;&#x5373;&#x4E3A;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">double Disp(char *postexp)</span><br><span class="line">{</span><br><span class="line">stack&lt;double&gt; opnd;</span><br><span class="line">double a, b, c, e, d;</span><br><span class="line">while(*postexp!=&apos;\0&apos;)</span><br><span class="line">{</span><br><span class="line">switch(*postexp)</span><br><span class="line">{</span><br><span class="line">case &apos;+&apos;: a = opnd.top(); opnd.pop();</span><br><span class="line">  b = opnd.top(); opnd.pop();</span><br><span class="line">  c = a+ b;</span><br><span class="line">  opnd.push(c);</span><br><span class="line">  break;</span><br><span class="line">case &apos;-&apos;: a = opnd.top(); opnd.pop();</span><br><span class="line">  b = opnd.top(); opnd.pop();</span><br><span class="line">  c = b-a;</span><br><span class="line">  opnd.push(c);</span><br><span class="line">  break;</span><br><span class="line">case &apos;*&apos;: a = opnd.top(); opnd.pop();</span><br><span class="line">  b = opnd.top(); opnd.pop();</span><br><span class="line">  c = a* b;</span><br><span class="line">  opnd.push(c);</span><br><span class="line">  break;</span><br><span class="line">case &apos;/&apos;: a = opnd.top(); opnd.pop();</span><br><span class="line">  b = opnd.top(); opnd.pop();</span><br><span class="line">  if(a)</span><br><span class="line">  {</span><br><span class="line">  c = (double)b/a;</span><br><span class="line">  opnd.push(c);</span><br><span class="line">  break;</span><br><span class="line">  }</span><br><span class="line">  else exit(0);</span><br><span class="line">    default:</span><br><span class="line">    d = 0;</span><br><span class="line">    while(*postexp&gt;=&apos;0&apos; &amp;&amp; *postexp&lt;=&apos;9&apos;)</span><br><span class="line">    {</span><br><span class="line">    d=10*d+*postexp-&apos;0&apos;;    //&#x8FDE;&#x7EED;&#x7684;&#x6570;&#x5B57;&#x5B57;&#x7B26;&#x8F6C;&#x5316;&#x4E3A;&#x6570;&#x503C;&#xFF0C;</span><br><span class="line">    postexp++;//&#x76F4;&#x5230;&#x9047;&#x5230;&apos;#&apos;&#x4E0D;&#x518D;&#x5FAA;&#x73AF;  </span><br><span class="line">}</span><br><span class="line">opnd.push(d);</span><br><span class="line">    break;</span><br><span class="line">}</span><br><span class="line">postexp++;</span><br><span class="line">e = opnd.top();</span><br><span class="line">}</span><br><span class="line">e = opnd.top();</span><br><span class="line">return e;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x8FD0;&#x884C;&#x7ED3;&#x679C;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br><img width="70%" src="/2019/12/01/Stack/1.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Queue</title>
      <link href="/2019/11/30/Queue-0/"/>
      <url>/2019/11/30/Queue-0/</url>
      
        <content type="html"><![CDATA[<h2 id="&#x5FAA;&#x73AF;&#x961F;&#x5217;"><a href="#&#x5FAA;&#x73AF;&#x961F;&#x5217;" class="headerlink" title="&#x5FAA;&#x73AF;&#x961F;&#x5217;"></a>&#x5FAA;&#x73AF;&#x961F;&#x5217;</h2><h3 id="&#x6C42;&#x89E3;&#x62A5;&#x6570;&#x95EE;&#x9898;"><a href="#&#x6C42;&#x89E3;&#x62A5;&#x6570;&#x95EE;&#x9898;" class="headerlink" title="&#x6C42;&#x89E3;&#x62A5;&#x6570;&#x95EE;&#x9898;"></a>&#x6C42;&#x89E3;&#x62A5;&#x6570;&#x95EE;&#x9898;</h3><blockquote><p>&#x8BBE;&#x6709;n&#x4E2A;&#x4EBA;&#x5360;&#x6210;&#x4E00;&#x6392;&#xFF0C;&#x4ECE;&#x5DE6;&#x5411;&#x53F3;&#x7684;&#x7F16;&#x53F7;&#x5206;&#x522B;&#x4E3A;1~n&#xFF0C;&#x73B0;&#x5728;&#x4ECE;&#x5DE6;&#x5F80;&#x53F3;&#x62A5;&#x6570;&#x201C;1&#xFF0C;2&#xFF0C;1&#xFF0C;2&#x2026;&#x2026;&#x201D;&#xFF0C;&#x6570;&#x5230;&#x201C;1&#x201D;&#x7684;&#x4EBA;&#x51FA;&#x5217;&#xFF0C;&#x6570;&#x5230;&#x201C;2&#x201D;&#x7684;&#x4EBA;&#x7AD9;&#x5230;&#x961F;&#x5217;&#x7684;&#x6700;&#x53F3;&#x7AEF;&#x3002;<a id="more"></a><font size="5">&#x62A5;&#x6570;&#x8FC7;&#x7A0B;&#x53CD;&#x590D;&#x8FDB;&#x884C;&#xFF0C;&#x76F4;&#x5230;n&#x4E2A;&#x4EBA;&#x90FD;&#x51FA;&#x961F;&#x5217;&#x4E3A;&#x6B62;&#x3002;</font>&#x8981;&#x6C42;&#x7ED9;&#x51FA;&#x4ED6;&#x4EEC;&#x7684;&#x51FA;&#x5217;&#x987A;&#x5E8F;&#x3002;<br>&#x4F8B;&#x5982;&#xFF0C;&#x5F53;n=8&#x65F6;&#x7684;&#x521D;&#x59CB;&#x5E8F;&#x5217;&#x4E3A;&#xFF1A;<br>1 2 3 4 5 6 7 8<br>&#x5219;&#x51FA;&#x5217;&#x987A;&#x5E8F;&#xFF1A;<br>1 3 5 7 2 6 4 8</p></blockquote><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x91C7;&#x7528;&#x73AF;&#x5F62;&#x961F;&#x5217;&#xFF0C;&#x505A;&#x5982;&#x4E0B;&#x64CD;&#x4F5C;&#xFF1A;<br>1.&#x51FA;&#x961F;&#x4E00;&#x4E2A;&#x5143;&#x7D20;(&#x62A5;&#x6570;&#x4E3A;1&#x7684;&#x4EBA;)&#xFF0C;&#x8F93;&#x51FA;&#x5176;&#x7F16;&#x53F7;<br>2.&#x82E5;&#x961F;&#x5217;&#x4E0D;&#x7A7A;&#xFF0C;&#x51FA;&#x961F;&#x4E00;&#x4E2A;&#x5143;&#x7D20;(&#x62A5;&#x6570;&#x4E3A;2&#x7684;&#x4EBA;)&#xFF0C;&#x518D;&#x8BA9;&#x5176;&#x5165;&#x961F;</li></ul><p>&#x5FAA;&#x73AF;&#x961F;&#x5217;&#x521B;&#x5EFA;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">typedef struct queue Queue;</span><br><span class="line">struct queue</span><br><span class="line">{</span><br><span class="line">int data[Maxsize];</span><br><span class="line">int front;</span><br><span class="line">int rear;</span><br><span class="line">};</span><br><span class="line">bool Full(Queue *L)            //&#x5224;&#x6EE1;</span><br><span class="line">{</span><br><span class="line">return ((L-&gt;rear+1)%Maxsize == L-&gt;front);</span><br><span class="line">}</span><br><span class="line">bool Empty(Queue *L)           //&#x5224;&#x7A7A;</span><br><span class="line">{</span><br><span class="line">return (L-&gt;front == L-&gt;rear);</span><br><span class="line">}</span><br><span class="line">void Enqueue(Queue *L, int e)   //&#x5165;&#x961F;</span><br><span class="line">{</span><br><span class="line">if(!Full(L))</span><br><span class="line">{</span><br><span class="line">L-&gt;rear = (L-&gt;rear+1)%Maxsize;</span><br><span class="line">L-&gt;data[L-&gt;rear] = e;</span><br><span class="line">}</span><br><span class="line">else</span><br><span class="line">exit(0);</span><br><span class="line">}</span><br><span class="line">void Dequeue(Queue *L,int *e)   //&#x51FA;&#x961F;</span><br><span class="line">{</span><br><span class="line">L-&gt;front = (L-&gt;front+1)%Maxsize;</span><br><span class="line">*e = L-&gt;data[L-&gt;front];</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x4E3B;&#x51FD;&#x6570;&#x8F93;&#x51FA;&#x961F;&#x5217;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">Queue *L = (Queue *)malloc(sizeof(Queue));</span><br><span class="line">L-&gt;front = L-&gt;rear = 0;</span><br><span class="line">int a[] = {1, 2, 3, 4, 5, 6, 7, 8}, e;</span><br><span class="line">for(int i=0; i&lt;8; i++)</span><br><span class="line">Enqueue(L,a[i]);</span><br><span class="line">while(!Empty(L))        //&#x62A5;&#x6570;&#x4E3A;1&#x7684;&#x4EBA;&#x51FA;&#x961F;</span><br><span class="line">{</span><br><span class="line">Dequeue(L,&amp;e);</span><br><span class="line">printf(&quot;%d &quot;,e);</span><br><span class="line">if(!Empty(L))   //&#x975E;&#x7A7A;&#xFF0C;&#x62A5;&#x6570;&#x4E3A;2&#x7684;&#x4EBA;&#x51FA;&#x961F;&#x518D;&#x5165;&#x961F;</span><br><span class="line">{</span><br><span class="line">Dequeue(L,&amp;e);</span><br><span class="line">Enqueue(L, e);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">    return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x8FD0;&#x884C;&#x7ED3;&#x679C;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br><img width="50%" src="/2019/11/30/Queue-0/1.jpg"></p><hr><p>&#x8D77;&#x521D;&#x4EE5;&#x4E3A;&#x62A5;&#x6570;&#x95EE;&#x9898;&#x5C31;&#x662F;&#x65E5;&#x5E38;&#x7684;&#x62A5;&#x6570;&#xFF0C;1~n&#x62A5;&#x5B8C;&#x540E;&#x5C31;&#x7ED3;&#x675F;&#xFF0C;&#x8BEF;&#x8BA4;&#x4E3A;&#x8F93;&#x51FA;&#x961F;&#x5217;&#x987A;&#x5E8F;&#x662F;&#xFF1A;<br>1 3 5 7 2 4 6 8</p><ul><li><strong>&#x9519;&#x89E3;</strong><br>&#x521B;&#x5EFA;&#x957F;&#x5EA6;&#x4E3A;N(N=9)&#x7684;&#x5FAA;&#x73AF;&#x961F;&#x5217;&#xFF0C;&#x4F7F;&#x961F;&#x5217;&#x5DF2;&#x6EE1;&#x3002;<br>1~n&#x62A5;&#x5B8C;&#x5373;&#xFF08;L-&gt;rear==N/2-1&#xFF09;&#x6210;&#x7ACB;&#xFF0C;&#x518D;&#x51FA;&#x961F;&#x76F4;&#x81F3;&#x961F;&#x5217;&#x4E3A;&#x7A7A;</li></ul><img width="100%" src="/2019/11/30/Queue-0/2.jpg"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">while(!Empty(L))</span><br><span class="line">{</span><br><span class="line">if(L-&gt;rear == (Maxsize)/2-1)</span><br><span class="line">{</span><br><span class="line">Dequeue(L,&amp;e);</span><br><span class="line">printf(&quot;\n%d &quot;, e);</span><br><span class="line">}</span><br><span class="line">else</span><br><span class="line">{</span><br><span class="line">printf(&quot;%d &quot;, e);</span><br><span class="line">if(!Empty(L))</span><br><span class="line">{</span><br><span class="line">Dequeue(L, &amp;e);</span><br><span class="line">Enqueue(L, e);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hey-piggy</title>
      <link href="/2019/10/26/hey-piggy/"/>
      <url>/2019/10/26/hey-piggy/</url>
      
        <content type="html"><![CDATA[<p>Nothing is impossble for a willing heart!</p><a id="more"></a><img src="/2019/10/26/hey-piggy/1.jpg" width="60%">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Lnode</title>
      <link href="/2019/10/26/Lnode/"/>
      <url>/2019/10/26/Lnode/</url>
      
        <content type="html"><![CDATA[<h2 id="&#x94FE;&#x8868;"><a href="#&#x94FE;&#x8868;" class="headerlink" title="&#x94FE;&#x8868;"></a>&#x94FE;&#x8868;</h2><h3 id="1-&#x5355;&#x94FE;&#x8868;&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x4E8C;&#x4E2A;&#x5355;&#x94FE;&#x8868;"><a href="#1-&#x5355;&#x94FE;&#x8868;&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x4E8C;&#x4E2A;&#x5355;&#x94FE;&#x8868;" class="headerlink" title="1.&#x5355;&#x94FE;&#x8868;&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x4E8C;&#x4E2A;&#x5355;&#x94FE;&#x8868;"></a>1.&#x5355;&#x94FE;&#x8868;&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x4E8C;&#x4E2A;&#x5355;&#x94FE;&#x8868;</h3><blockquote><p>&#x8981;&#x6C42;&#xFF1A;&#x5C06;&#x4E00;&#x4E2A;&#x5E26;&#x5934;&#x7ED3;&#x70B9;&#x7684;&#x5355;&#x94FE;&#x8868;<br>L=(a1, b1, a2, b2, &#x2026;, an, bn)&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x5E26;&#x5934;&#x7ED3;&#x70B9;&#x7684;&#x5355;&#x94FE;&#x8868;L1&#x548C;L2&#xFF0C;L1=(a1, a2,&#x2026;,an), L2 = (bn, bn-1, &#x2026;,b1). </p></blockquote><a id="more"></a><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>split&#x51FD;&#x6570;&#x5B9E;&#x73B0;&#x62C6;&#x5206;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void Split(Lnode *L, Lnode *L1, Lnode *L2)</span><br><span class="line">{</span><br><span class="line">    Lnode *p = L-&gt;next, *q, *r;</span><br><span class="line">    r = L1; </span><br><span class="line">    while(p)            //&#x5C3E;&#x63D2;&#x6CD5;&#x5F97;L1&#xFF0C;&#x5934;&#x63D2;&#x6CD5;&#x5F97;L2 </span><br><span class="line">    {</span><br><span class="line">    r-&gt;next = p; // &#x5C06;p(valude&#x503C;&#x4E3A;ai)&#x63D2;&#x5165;L1 </span><br><span class="line">    r = p;</span><br><span class="line">    p = p-&gt;next; //p&#x79FB;&#x5230;&#x4E0B;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;(value&#x503C;&#x4E3A;bi) </span><br><span class="line">    q = p-&gt;next;//&#x5934;&#x63D2;&#x6CD5;&#x4F1A;&#x4FEE;&#x6539;p&#x7684;next&#x57DF;&#xFF0C;&#x7528;q&#x4FDD;&#x5B58;p&#x7684;&#x540E;&#x7EE7;&#x7ED3;&#x70B9; </span><br><span class="line">    p-&gt;next = L2-&gt;next;   </span><br><span class="line">    L2-&gt;next = p;</span><br><span class="line">    p = q;    //p&#x91CD;&#x65B0;&#x6307;&#x5411;ai+1&#x7684;&#x7ED3;&#x70B9; </span><br><span class="line">   }</span><br><span class="line">    r-&gt;next = NULL; </span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><p>DispList&#x51FD;&#x6570;&#x8F93;&#x51FA;&#x5355;&#x94FE;&#x8868;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void DispList(Lnode *L)</span><br><span class="line">{</span><br><span class="line">    Lnode *p = L-&gt;next;</span><br><span class="line">    while(p)</span><br><span class="line">    {</span><br><span class="line">    printf(&quot;%d &quot;, p-&gt;value);</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">}</span><br><span class="line">   printf(&quot;\n&quot;);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x5B8C;&#x6574;&#x4EE3;&#x7801;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct lnode Lnode;</span><br><span class="line">struct lnode</span><br><span class="line">{</span><br><span class="line">int value;</span><br><span class="line">Lnode *next;</span><br><span class="line">};</span><br><span class="line">void Split(Lnode *L, Lnode *L1, Lnode *L2)</span><br><span class="line">{</span><br><span class="line">Lnode *p = L-&gt;next, *q, *r;</span><br><span class="line">r = L1; </span><br><span class="line">while(p)            //&#x5C3E;&#x63D2;&#x6CD5;&#x5F97;L1&#xFF0C;&#x5934;&#x63D2;&#x6CD5;&#x5F97;L2 </span><br><span class="line">{</span><br><span class="line">r-&gt;next = p; // &#x5C06;p(valude&#x503C;&#x4E3A;ai)&#x63D2;&#x5165;L1 </span><br><span class="line">r = p;</span><br><span class="line">p = p-&gt;next; //p&#x79FB;&#x5230;&#x4E0B;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;(value&#x503C;&#x4E3A;bi) </span><br><span class="line">q = p-&gt;next;//&#x5934;&#x63D2;&#x6CD5;&#x4F1A;&#x4FEE;&#x6539;p&#x7684;next&#x57DF;&#xFF0C;&#x7528;q&#x4FDD;&#x5B58;p&#x7684;&#x540E;&#x7EE7;&#x7ED3;&#x70B9; </span><br><span class="line">p-&gt;next = L2-&gt;next;   </span><br><span class="line">L2-&gt;next = p;</span><br><span class="line">p = q;    //p&#x91CD;&#x65B0;&#x6307;&#x5411;ai+1&#x7684;&#x7ED3;&#x70B9; </span><br><span class="line">}</span><br><span class="line">r-&gt;next = NULL; </span><br><span class="line">}</span><br><span class="line">void DispList(Lnode *L)</span><br><span class="line">{</span><br><span class="line">Lnode *p = L-&gt;next;</span><br><span class="line">while(p)</span><br><span class="line">{</span><br><span class="line">printf(&quot;%d &quot;, p-&gt;value);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">}</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">}</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">Lnode *L = (Lnode *)malloc(sizeof(Lnode)), </span><br><span class="line">*L1 = (Lnode *)malloc(sizeof(Lnode)), </span><br><span class="line">*L2 = (Lnode *)malloc(sizeof(Lnode));</span><br><span class="line">L-&gt;next = NULL;</span><br><span class="line">L1-&gt;next = NULL;</span><br><span class="line">L2-&gt;next = NULL;</span><br><span class="line">Lnode *current = L;</span><br><span class="line">int i = 0;</span><br><span class="line">while(i&lt;1)</span><br><span class="line">{</span><br><span class="line">Lnode *p = (Lnode *)malloc(sizeof(Lnode));</span><br><span class="line">scanf(&quot;%d&quot;, &amp;p-&gt;value);</span><br><span class="line">current-&gt;next = p;</span><br><span class="line">current = p;</span><br><span class="line">if(getchar() == &apos;\n&apos;)</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line">current-&gt;next = NULL;</span><br><span class="line">Split(L, L1, L2);</span><br><span class="line">DispList(L1);</span><br><span class="line">DispList(L2);</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x8FD0;&#x884C;&#x7ED3;&#x679C;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br><img width="60%" src="/2019/10/26/Lnode/Lnode1.jpg"></p><h3 id="2-&#x5224;&#x65AD;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E2D;&#x6570;&#x636E;&#x7ED3;&#x70B9;-&#x542B;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x7ED3;&#x70B9;-&#x662F;&#x5426;&#x5BF9;&#x79F0;"><a href="#2-&#x5224;&#x65AD;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E2D;&#x6570;&#x636E;&#x7ED3;&#x70B9;-&#x542B;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x7ED3;&#x70B9;-&#x662F;&#x5426;&#x5BF9;&#x79F0;" class="headerlink" title="2.&#x5224;&#x65AD;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E2D;&#x6570;&#x636E;&#x7ED3;&#x70B9;(&#x542B;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x7ED3;&#x70B9;)&#x662F;&#x5426;&#x5BF9;&#x79F0;"></a>2.&#x5224;&#x65AD;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E2D;&#x6570;&#x636E;&#x7ED3;&#x70B9;(&#x542B;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x7ED3;&#x70B9;)&#x662F;&#x5426;&#x5BF9;&#x79F0;</h3><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>  P&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x626B;&#x63CF;L&#xFF0C;q&#x4ECE;&#x53F3;&#x5230;&#x5DE6;&#x626B;&#x63CF;L&#xFF0C;&#x7136;&#x540E;&#x5FAA;&#x73AF;&#xFF0C;&#x76F4;&#x5230;p=q  &#x6216; p=q-&gt;prior.<br>  IsSymm&#x51FD;&#x6570;&#x626B;&#x63CF;L.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int IsSymm(DLnode *L)</span><br><span class="line">{</span><br><span class="line">DLnode *p = L-&gt;next;//p&#x6307;&#x5411;&#x9996;&#x7ED3;&#x70B9;</span><br><span class="line">DLnode *q = L-&gt;prior;//q&#x6307;&#x5411;&#x5C3E;&#x7ED3;&#x70B9; </span><br><span class="line">while(p-&gt;value == q-&gt;value)    //&#x5F53;&#x7ED3;&#x70B9;&#x503C;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x9000;&#x51FA;&#x5FAA;&#x73AF; </span><br><span class="line">{</span><br><span class="line">    if(p==q || p-&gt;prior == q)  //&#x7ED3;&#x70B9;&#x6570;&#x4E3A;&#x5947;&#x6570;||&#x7ED3;&#x70B9;&#x6570;&#x4E3A;&#x5076;&#x6570; </span><br><span class="line">return 1;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q = q-&gt;prior;</span><br><span class="line">}</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x5B8C;&#x6574;&#x4EE3;&#x7801;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct Dlnode DLnode;</span><br><span class="line">struct Dlnode</span><br><span class="line">{</span><br><span class="line">int value;</span><br><span class="line">DLnode *prior;</span><br><span class="line">DLnode *next;</span><br><span class="line">};</span><br><span class="line">int IsSymm(DLnode *L)</span><br><span class="line">{</span><br><span class="line">DLnode *p = L-&gt;next;//p&#x6307;&#x5411;&#x9996;&#x7ED3;&#x70B9;</span><br><span class="line">DLnode *q = L-&gt;prior;//q&#x6307;&#x5411;&#x5C3E;&#x7ED3;&#x70B9; </span><br><span class="line">while(p-&gt;value == q-&gt;value)    //&#x5F53;&#x7ED3;&#x70B9;&#x503C;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x9000;&#x51FA;&#x5FAA;&#x73AF; </span><br><span class="line">{</span><br><span class="line">    if(p==q || p-&gt;prior == q)  //&#x7ED3;&#x70B9;&#x6570;&#x4E3A;&#x5947;&#x6570;||&#x7ED3;&#x70B9;&#x6570;&#x4E3A;&#x5076;&#x6570; </span><br><span class="line">return 1;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q = q-&gt;prior;</span><br><span class="line">}</span><br><span class="line">return 0;</span><br><span class="line">}</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">DLnode *L = (DLnode *)malloc(sizeof(DLnode));</span><br><span class="line">L-&gt;next = L-&gt;prior = NULL;</span><br><span class="line">int i = 0;</span><br><span class="line">DLnode *r = L, *p; </span><br><span class="line">while(i&lt;1)</span><br><span class="line">{</span><br><span class="line">p = (DLnode *)malloc(sizeof(DLnode));</span><br><span class="line">scanf(&quot;%d&quot;, &amp;p-&gt;value);</span><br><span class="line">r-&gt;next = p;</span><br><span class="line">p-&gt;prior = r;       // &#x53CC;&#x94FE;&#x8868;&#x5C3E;&#x63D2;&#x6CD5;&#x5B58;&#x5165;L </span><br><span class="line">r = p;                    </span><br><span class="line">if(getchar() == &apos;\n&apos;)</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line">r-&gt;next = L;</span><br><span class="line">L-&gt;prior = r;</span><br><span class="line">if(IsSymm(L))</span><br><span class="line">printf(&quot;&#x8BE5;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x5BF9;&#x79F0;\n&quot;);</span><br><span class="line">else</span><br><span class="line">printf(&quot;&#x8BE5;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E0D;&#x5BF9;&#x79F0;\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x8FD0;&#x884C;&#x7ED3;&#x679C;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><img width="60%" src="/2019/10/26/Lnode/Lnode2.jpg">]]></content>
      
      
      
        <tags>
            
            <tag> 链式存储 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
