<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Sliding Window</title>
      <link href="/2020/02/07/Sliding-window/"/>
      <url>/2020/02/07/Sliding-window/</url>
      
        <content type="html"><![CDATA[<h2 id="&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7B97;&#x6CD5;&#xFF1A;"><a href="#&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7B97;&#x6CD5;&#xFF1A;" class="headerlink" title="&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7B97;&#x6CD5;&#xFF1A;"></a>&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7B97;&#x6CD5;&#xFF1A;</h2><p>&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x4E00;&#x822C;&#x7528;&#x4E8E;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x4E2D;&#xFF0C;&#x4F7F;&#x7528;&#x8BE5;&#x7A97;&#x53E3;&#x5728;&#x6570;&#x7EC4;&#x5408;&#x6CD5;&#x533A;&#x95F4;&#x5185;&#x6ED1;&#x52A8;&#xFF0C;&#x52A8;&#x6001;&#x8BB0;&#x5F55;&#x76F8;&#x5173;&#x4FE1;&#x606F;&#xFF0C;&#x4ECE;&#x800C;&#x63D0;&#x9AD8;&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;</p><a id="more"></a><h3 id="&#x9898;&#x76EE;1&#xFF1A;&#x4E0D;&#x5305;&#x542B;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;"><a href="#&#x9898;&#x76EE;1&#xFF1A;&#x4E0D;&#x5305;&#x542B;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;" class="headerlink" title="&#x9898;&#x76EE;1&#xFF1A;&#x4E0D;&#x5305;&#x542B;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;"></a>&#x9898;&#x76EE;1&#xFF1A;&#x4E0D;&#x5305;&#x542B;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;</h3><blockquote><p>&#x9898;&#x76EE;&#x63CF;&#x8FF0;&#xFF1A;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x627E;&#x51FA;&#x5176;&#x4E2D;&#x4E0D;&#x542B;&#x6709;&#x91CD;&#x590D;&#x5B57;&#x7B26;&#x7684; &#x6700;&#x957F;&#x5B50;&#x4E32; &#x7684;&#x957F;&#x5EA6;&#x3002;<br>&#x8F93;&#x5165;&#xFF1A;&#x201C;abcgbef&#x201D;<br>&#x8F93;&#x51FA;&#xFF1A;5</p><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x6570;&#x7EC4;&#x6A21;&#x62DF;&#x961F;&#x5217;&#xFF0C;front&#x6807;&#x8BB0;&#x7A97;&#x53E3;&#x5DE6;&#x7AEF;&#xFF0C;i&#x8BB0;&#x5F55;&#x7A97;&#x53E3;&#x53F3;&#x7AEF;&#xFF0C;i&#x4ECE;0&#x904D;&#x5386;&#x5230;&#x6570;&#x7EC4;&#x672B;&#x7AEF;.<br>map&lt;char,int&gt;&#x5B58;&#x653E;&#x4E0D;&#x540C;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x5728;&#x7A97;&#x53E3;&#x4E2D;&#x7684;&#x6B21;&#x6570;.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map&lt;char, int&gt; mp;</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>&#x5F00;&#x59CB;front=0&#xFF0C;i&#x4E00;&#x76F4;&#x53F3;&#x79FB;,map&#x8BB0;&#x5F55;&#x5143;&#x7D20;&#x76F4;&#x81F3;&#x51FA;&#x73B0;&#x91CD;&#x590D;&#x5B57;&#x7B26;name&#xFF0C;&#x6709;mp[name]==2&#xFF0C;&#x8BB0;&#x4E0B;&#x5B57;&#x4E32;&#x957F;&#x5EA6;res.<br>i&#x518D;&#x8981;&#x540E;&#x79FB;&#xFF0C;&#x5219;&#x9700;&#x820D;&#x53BB;&#x4E4B;&#x524D;&#x51FA;&#x73B0;&#x7684;&#x91CD;&#x590D;&#x5B57;&#x7B26;&#xFF0C;&#x4E8E;&#x662F;front&#x53F3;&#x79FB;&#x81F3; a[front]==name.<br>&#x6BCF;&#x6B21;&#x51FA;&#x73B0;&#x91CD;&#x590D;&#x5B57;&#x7B26;&#x65F6;&#x5C31;&#x8003;&#x8651;&#x66F4;&#x65B0;&#x5B57;&#x4E32;&#x957F;&#x5EA6;res.</li></ul><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br>&#xB7;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xB7;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">int Sliding (string a)</span><br><span class="line">{</span><br><span class="line">if(a == &quot;&quot;)         //&#x4E32;&#x4E3A;&#x7A7A;&#x65F6;&#x8FD4;&#x56DE;0</span><br><span class="line">return 0;</span><br><span class="line">int len = a.size();</span><br><span class="line">int front = 0, res = -1;</span><br><span class="line">char name;</span><br><span class="line">map&lt;char, int&gt; mp;</span><br><span class="line">for(int i=0; i&lt;len; i++)</span><br><span class="line">{</span><br><span class="line">name = a[i];</span><br><span class="line">++mp[name];             //i&#x53F3;&#x79FB;&#xFF0C;mp&#x8BB0;&#x5F55;&#x5143;&#x7D20;&#x51FA;&#x73B0;&#x6B21;&#x6570;</span><br><span class="line">if(mp[name]==2)         //&#x51FA;&#x73B0;&#x91CD;&#x590D;&#x5B57;&#x7B26;</span><br><span class="line">{</span><br><span class="line">res = max(res, i-front);    //&#x66F4;&#x65B0;res&#xFF0C;&#x91CD;&#x590D;&#x7684;a[i]&#x4E0D;&#x80FD;&#x7B97;&#xFF0C;&#x6240;&#x4EE5;&#x662F;i-front</span><br><span class="line">while(name != a[front])</span><br><span class="line">{</span><br><span class="line">--mp[a[front]];</span><br><span class="line">++front;</span><br><span class="line">}                //&#x4E3A;&#x4FDD;&#x8BC1;&#x6CA1;&#x6709;&#x91CD;&#x590D;&#x5B57;&#x7B26;&#xFF0C;front&#x540E;&#x79FB;&#x81F3; name==a[front] </span><br><span class="line">++front;         //front&#x518D;&#x53F3;&#x79FB;&#x4E00;&#x4F4D;&#xFF0C;&#x7A97;&#x53E3;&#x5185;&#x5C31;&#x4E0D;&#x518D;&#x6709;&#x91CD;&#x590D;&#x5B57;&#x7B26;name&#x4E86;</span><br><span class="line">--mp[name];      //&#x6062;&#x590D;&#x81F3;mp[name]=1&#xFF0C;&#x7A97;&#x53E3;i&#x7EE7;&#x7EED;&#x540E;&#x79FB;</span><br><span class="line">}</span><br><span class="line">else</span><br><span class="line">{</span><br><span class="line">if(i == len-1)      //&#x7279;&#x6B8A;&#x60C5;&#x51B5;&#xFF1A;i&#x79FB;&#x81F3;&#x672B;&#x5C3E;&#x4F46;&#x65E0;&#x91CD;&#x590D;&#x5B57;&#x7B26;</span><br><span class="line">res = max(res, i-front+1);  //&#x6B64;&#x65F6;&#x82E5;&#x8981;&#x66F4;&#x65B0;&#x957F;&#x5EA6;&#x4E3A; i-front+1</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">return res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x9898;&#x76EE;2&#xFF1A;&#x81F3;&#x5C11;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x77ED;&#x5B50;&#x4E32;"><a href="#&#x9898;&#x76EE;2&#xFF1A;&#x81F3;&#x5C11;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x77ED;&#x5B50;&#x4E32;" class="headerlink" title="&#x9898;&#x76EE;2&#xFF1A;&#x81F3;&#x5C11;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x77ED;&#x5B50;&#x4E32;"></a>&#x9898;&#x76EE;2&#xFF1A;&#x81F3;&#x5C11;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x77ED;&#x5B50;&#x4E32;</h3><blockquote><p>&#x9898;&#x76EE;&#x63CF;&#x8FF0;<br>&#x7ED9;&#x957F;&#x5EA6;&#x4E3A;n&#x7684;&#x4E00;&#x6BB5;&#x5B57;&#x7B26;&#xFF0C;&#x8981;&#x6C42;&#x622A;&#x53D6;&#x4E00;&#x6BB5;&#x8FDE;&#x7EED;&#x5B57;&#x4E32;&#xFF0C;&#x6EE1;&#x8DB3;&#x81F3;&#x5C11;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5B57;&#x7B26;&#xFF0C;&#x6C42;&#x8BE5;&#x5B57;&#x4E32;&#x957F;&#x5EA6;&#x7684;&#x6700;&#x5C0F;&#x503C;<br>&#x8F93;&#x5165;&#xFF1A;9 2<br>     abebeabee<br>&#x8F93;&#x51FA;&#xFF1A;2</p><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x8BE5;&#x9898;&#x6C42;&#x81F3;&#x5C11;k&#x4E2A;&#x5B57;&#x7B26;&#x7684;&#x6700;&#x77ED;&#x957F;&#x5EA6;&#xFF0C;&#x5373;&#x7A97;&#x53E3;&#x5185;&#x4EC5;&#x5305;&#x542B;k&#x4E2A;&#x5B57;&#x7B26;&#xFF0C;&#x5E76;&#x4E14;<br>k=1&#x65F6;,&#x663E;&#x7136;&#x6700;&#x77ED;res&#x4E3A;1&#xFF1B;<br>k&gt;1&#x65F6;,&#x6700;&#x77ED;&#x65F6;&#x5E94;&#x6EE1;&#x8DB3;a[front]=a[i]=name,name&#x5373;&#x91CD;&#x590D;&#x7684;&#x5B57;&#x7B26;.</li><li>&#x76F4;&#x63A5;&#x8BF4;&#x7A97;&#x53E3;&#x5728;&#x79FB;&#x52A8;&#x65F6;&#x548C;&#x4E0A;&#x9898;&#x7684;&#x4E0D;&#x540C;&#x4E4B;&#x5904;&#x5427;.<br>&#x540C;&#x6837;i&#x53F3;&#x79FB;&#x81F3; mp[name]==k ,front&#x53F3;&#x79FB;&#x76F4;&#x81F3; mp[name]==k(&#x5373;a[front]==name).<br>&#x8FD9;&#x662F;&#x4E3A;&#x4E86;&#x5C06;&#x957F;&#x5EA6;&#x5C3D;&#x53EF;&#x80FD;&#x7F29;&#x77ED;&#x81F3; a[front]=a[i]=name.<br>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</li></ul></blockquote><p>&#xB7;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xB7;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">map&lt;char, int&gt; mp;</span><br><span class="line">char a[200005];</span><br><span class="line">int n, k, front = 0, res = -1;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k&gt;&gt;a;</span><br><span class="line">for(int i=0; i&lt;n; i++)</span><br><span class="line">{</span><br><span class="line">char name = a[i];</span><br><span class="line">++mp[name];</span><br><span class="line">while(mp[name] == k)         //front&#x53F3;&#x79FB;&#x81F3;mp[name]=k-1 &#x7ED3;&#x675F;&#x5FAA;&#x73AF;</span><br><span class="line">{</span><br><span class="line">if(res == -1)</span><br><span class="line">res = i-front+1;    //&#x5305;&#x542B;k=1,&#x6C42;res&#x7684;&#x60C5;&#x51B5;</span><br><span class="line">else</span><br><span class="line">res = min(res, i-front+1);  //res&#x6700;&#x77ED;&#x8981;&#x5305;&#x542B;a[i],&#x6240;&#x4EE5;&#x662F; i-front+1</span><br><span class="line">--mp[a[front]];</span><br><span class="line">++front;</span><br><span class="line">}           </span><br><span class="line">}</span><br><span class="line">cout&lt;&lt; res &lt;&lt;endl; </span><br><span class="line">return 0;</span><br></pre></td></tr></table></figure><h3 id="&#x9898;&#x76EE;3&#xFF1A;&#x6700;&#x591A;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;"><a href="#&#x9898;&#x76EE;3&#xFF1A;&#x6700;&#x591A;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;" class="headerlink" title="&#x9898;&#x76EE;3&#xFF1A;&#x6700;&#x591A;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;"></a>&#x9898;&#x76EE;3&#xFF1A;&#x6700;&#x591A;&#x5305;&#x542B;k&#x4E2A;&#x76F8;&#x540C;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;</h3><blockquote><p>&#x95EE;&#x9898;&#x63CF;&#x8FF0;<br>&#x94FE;&#x63A5;&#xFF1A;<a href="https://ac.nowcoder.com/acm/contest/3002/H" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/3002/H</a><br>&#x6765;&#x6E90;&#xFF1A;&#x725B;&#x5BA2;&#x7F51;<br>&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x201C;01&#x201D;&#x4E32;&#x800C;&#x8A00;&#xFF0C;&#x6BCF;&#x6B21;&#x64CD;&#x4F5C;&#x53EF;&#x4EE5;&#x628A;&#x2019;0&#x2019;&#x5B57;&#x7B26;&#x6539;&#x4E3A;&#x2019;1&#x2019;&#x5B57;&#x7B26;&#xFF0C;&#x6216;&#x8005;&#x628A;&#x2019;1&#x2019;&#x5B57;&#x7B26;&#x6539;&#x4E3A;&#x2019;0&#x2019;&#x5B57;&#x7B26;&#x3002;&#x6240;&#x8C13;&#x201C;01&#x201D;&#x4E32;&#xFF0C;&#x5373;&#x53EA;&#x542B;&#x5B57;&#x7B26;&#x2019;0&#x2019;&#x548C;&#x5B57;&#x7B26;&#x2019;1&#x2019;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x3002;<br>nozomi&#x6709;&#x6700;&#x591A; k &#x6B21;&#x64CD;&#x4F5C;&#x7684;&#x673A;&#x4F1A;&#x3002;&#x5979;&#x60F3;&#x5728;&#x64CD;&#x4F5C;&#x4E4B;&#x540E;&#x627E;&#x51FA;&#x4E00;&#x4E2A;&#x5C3D;&#x53EF;&#x80FD;&#x957F;&#x7684;&#x8FDE;&#x7EED;&#x5B50;&#x4E32;&#xFF0C;&#x8FD9;&#x4E2A;&#x5B50;&#x4E32;&#x4E0A;&#x7684;&#x6240;&#x6709;&#x5B57;&#x7B26;&#x90FD;&#x76F8;&#x540C;&#x3002;<br>&#x8FD9;&#x4E2A;&#x5B50;&#x4E32;&#x7684;&#x957F;&#x5EA6;&#x6700;&#x5927;&#x503C;&#x662F;&#x591A;&#x5C11;&#xFF1F; (&#x6CE8;&#xFF1A;k&#x6B21;&#x64CD;&#x4F5C;&#x673A;&#x4F1A;&#x53EF;&#x4EE5;&#x4E0D;&#x5168;&#x90E8;&#x7528;&#x5B8C;)<br>&#x8F93;&#x5165;&#xFF1A; 6 1<br>      101110<br>&#x8F93;&#x51FA;&#xFF1A; 5<br>(&#x6CE8;&#x5C06;&#x2019;0&#x2019;&#x6539;&#x4E3A;&#x2019;1&#x2019;&#x53EF;&#x5F97;&#x5230;&#x5B50;&#x4E32;&#x6700;&#x957F;&#x4E3A;5&#xFF0C;&#x5373;&#x201C;111110&#x201D;; &#x5C06;&#x2019;1&#x2019;&#x6539;&#x4E3A;&#x2019;0&#x2019;&#x5B50;&#x4E32;&#x6700;&#x957F;&#x4E3A;2&#xFF0C;&#x5373;&#x201C;001110&#x201D;.<br>&#x4E24;&#x8005;&#x53D6;&#x6700;&#x957F; max(5,2)=5)</p></blockquote><ul><li><p>&#x95EE;&#x9898;&#x5206;&#x6790;<br>&#x5206;&#x4E24;&#x79CD;&#x60C5;&#x51B5;&#xFF1A;<br>1)&#x5C06;&#x2019;0&#x2019;&#x6539;&#x4E3A;&#x2019;1&#x2019;,&#x5F97;&#x5230;&#x5B50;&#x4E32;&#x5B57;&#x7B26;&#x5168;&#x4E3A;&#x2019;1&#x2019;<br>2)&#x5C06;&#x2019;1&#x2019;&#x6539;&#x4E3A;&#x2019;0&#x2019;,&#x5F97;&#x5230;&#x5B50;&#x4E32;&#x5B57;&#x7B26;&#x5168;&#x4E3A;&#x2019;0&#x2019;<br>&#x6700;&#x540E;&#x6C42; max(Slide(&#x2018;1&#x2019;), Slide(&#x2018;0&#x2019;))</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int Slide(char a)//&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x7684;&#x662F;&#x66F4;&#x6539;&#x5B57;&#x7B26;a&#x540E;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;&#x957F;&#x5EA6;</span><br></pre></td></tr></table></figure></li><li><p><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5982; Slide(&#x2018;1&#x2019;) &#x6700;&#x7EC8;&#x5F97;&#x5230;&#x5B50;&#x4E32;&#x5B57;&#x7B26;&#x5168;&#x4E3A;&#x2019;0&#x2019;,&#x66F4;&#x6539;&#x2019;1&#x2019;&#x7684;&#x6B21;&#x6570;&#x4E0D;&#x8D85;&#x8FC7;k.<br>&#x8FD9;&#x91CC;&#x9700;&#x8981;&#x8F6C;&#x5316;&#x4E00;&#x4E0B;&#x601D;&#x60F3;,&#x5373;&#x66F4;&#x6539;&#x591A;&#x5C11;&#x6B21;&#x5B57;&#x7B26;&#x2019;1&#x2019; &#x5C31;&#x662F;&#x5BFB;&#x627E;&#x2019;1&#x2019;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;.<br>&#x90A3;&#x4E48;&#x8BE5;&#x95EE;&#x9898;&#x5373;&#x8F6C;&#x5316;&#x4E3A; &#x201C;01&#x201D;&#x4E32;&#x4E2D;&#x6700;&#x591A;&#x5305;&#x542B;k&#x4E2A;&#x2019;1&#x2019;&#x5B57;&#x7B26;&#x7684;&#x6700;&#x957F;&#x5B50;&#x4E32;.<br>&#x8BE5;&#x95EE;&#x9898;&#x7C7B;&#x4F3C;&#x9898;&#x76EE;1,&#x7A0D;&#x5FAE;&#x4E00;&#x70B9;&#x4E0D;&#x540C;&#x5728;&#x4E8E;:<br>&#x66F4;&#x6539;&#x5B57;&#x7B26;&#x6B21;&#x6570;mp(&#x4E5F;&#x5C31;&#x662F;&#x5305;&#x542B;&#x9898;&#x76EE;1&#x4E2D;&#x91CD;&#x590D;&#x5B57;&#x7B26;&#x4E2A;&#x6570;mp)&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;k,&#x800C;&#x4E0D;&#x662F;&#x5C0F;&#x4E8E;2.</p></li></ul><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><p>&#xB7;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xB7;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;map&gt; </span><br><span class="line">using namespace std;</span><br><span class="line">int n, k;</span><br><span class="line">char c[200005];</span><br><span class="line">int Slide(char a)//change a</span><br><span class="line">{//&#x5176;&#x5B9E;&#x5E76;&#x6CA1;&#x6709;&#x66F4;&#x6539;a,&#x800C;&#x662F;&#x5728;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x540C;&#x65F6;&#x67E5;&#x627E;a&#x51FA;&#x73B0;&#x6B21;&#x6570;</span><br><span class="line">map&lt;char, int&gt; mp;</span><br><span class="line">mp[a]=0;</span><br><span class="line">int front=0, ans = 0, res = 0;</span><br><span class="line">for(int i=0; i&lt;n; i++)</span><br><span class="line">{</span><br><span class="line">++mp[c[i]];</span><br><span class="line">if(mp[a]&gt;k)//&#x51FA;&#x73B0;&#x91CD;&#x590D;&#x5B57;&#x7B26;a&#x4E2A;&#x6570;&#x5927;&#x4E8E;k(&#x5373;&#x66F4;&#x6539;&#x6B21;&#x6570;&#x8D85;&#x8FC7;k&#x65F6;)</span><br><span class="line">{</span><br><span class="line">while(c[front]!=a)</span><br><span class="line">{</span><br><span class="line">res = max(res, i-front); //&#x5176;&#x5B9E;&#x79FB;&#x52A8;&#x8FC7;&#x7A0B;&#x4E0D;&#x4F1A;&#x66F4;&#x65B0;&#xFF0C;&#x56E0;&#x4E3A;&#x6C42;&#x7684;&#x662F;&#x6700;&#x957F;&#x957F;&#x5EA6;</span><br><span class="line">++front;//&#x7A97;&#x53E3;&#x5DE6;&#x7AEF;&#x5F00;&#x59CB;&#x79FB;&#x52A8;,front&#x79FB;&#x52A8;&#x548C;&#x9898;&#x76EE;1&#x4E00;&#x6837;</span><br><span class="line">}</span><br><span class="line">--mp[a];</span><br><span class="line">++front;</span><br><span class="line">}</span><br><span class="line">res = max(res, i-front+1);//&#x66F4;&#x65B0;max,&#x4FDD;&#x8BC1;&#x6BCF;&#x6B21;&#x5F97;&#x5230;&#x7A97;&#x53E3;&#x5185;a&#x51FA;&#x73B0;&#x6B21;&#x6570;&#x4E0D;&#x8D85;&#x8FC7;k</span><br><span class="line">}</span><br><span class="line">return res;</span><br><span class="line">}</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k&gt;&gt;c;</span><br><span class="line">cout&lt;&lt; max(Slide(&apos;1&apos;), Slide(&apos;0&apos;));</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="&#x6700;&#x540E;&#x5C0F;&#x7ED3;&#xFF1A;"><a href="#&#x6700;&#x540E;&#x5C0F;&#x7ED3;&#xFF1A;" class="headerlink" title="&#x6700;&#x540E;&#x5C0F;&#x7ED3;&#xFF1A;"></a>&#x6700;&#x540E;&#x5C0F;&#x7ED3;&#xFF1A;</h2><p>&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7684;&#x7B97;&#x6CD5;&#x601D;&#x60F3;&#xFF1A;<br>&#x7A97;&#x53E3;&#x6ED1;&#x52A8;&#x65F6;,&#x59CB;&#x7EC8;&#x4FDD;&#x8BC1;&#x7A97;&#x53E3;&#x5185;&#x662F;&#x5143;&#x7D20;&#x662F;&#x6EE1;&#x8DB3;&#x8981;&#x6C42;&#x7684;,&#x8FD9;&#x6837;&#x6ED1;&#x52A8;&#x7ED3;&#x675F;,&#x6700;&#x7EC8;&#x5C31;&#x80FD;&#x627E;&#x5230;&#x95EE;&#x9898;&#x6700;&#x4F18;&#x89E3;<br>&#x7B97;&#x6CD5;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A; &#x7A97;&#x53E3;&#x6700;&#x5927;&#x957F;&#x5EA6;O(n).</p>]]></content>
      
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Merge Sort</title>
      <link href="/2019/12/02/Merge-Sort/"/>
      <url>/2019/12/02/Merge-Sort/</url>
      
        <content type="html"><![CDATA[<p>&#x5F52;&#x5E76;&#xFF08;Merge&#xFF09;&#x6392;&#x5E8F;&#x6CD5;&#xFF0C;&#x5373;&#x628A;&#x5F85;&#x6392;&#x5E8F;&#x5E8F;&#x5217;&#x5206;&#x4E3A;&#x82E5;&#x5E72;&#x4E2A;&#x5B50;&#x5E8F;&#x5217;&#xFF0C;&#x6BCF;&#x4E2A;&#x5B50;&#x5E8F;&#x5217;&#x662F;&#x6709;&#x5E8F;&#x7684;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x628A;&#x6709;&#x5E8F;&#x5B50;&#x5E8F;&#x5217;&#x5408;&#x5E76;&#x4E3A;&#x6574;&#x4F53;&#x6709;&#x5E8F;&#x5E8F;&#x5217;&#x3002;</p><a id="more"></a><blockquote><p>&#x7B97;&#x6CD5;&#x5206;&#x6790;<br>    &#x6BCF;&#x4E00;&#x8D9F;&#x5F52;&#x5E76;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(n)&#xFF0C;&#x5171;&#x9700;&#x8981;&#x8FDB;&#x884C;log2n&#x8D9F;&#x3002;&#x5BF9;&#x5E94;&#x7684;&#x7B97;&#x6CD5;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(nlog2n)</p></blockquote><p>&#x4F8B;&#xFF1A;<br>Input     2 4 7 5 8 1 3 6<br>Output    1 2 3 4 5 6 7 8</p><h3 id="&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;"><a href="#&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;" class="headerlink" title="&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;"></a>&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;</h3><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5C06;&#x5F85;&#x6392;&#x5143;&#x7D20;&#x5206;&#x6210;&#x5927;&#x5C0F;&#x5927;&#x81F4;&#x76F8;&#x540C;&#x7684;&#x4E24;&#x4E2A;&#x5B50;&#x96C6;&#xFF0C;&#x5206;&#x522B;&#x5BF9;&#x4E24;&#x4E2A;&#x5B50;&#x96C6;&#x5408;&#x6392;&#x5E8F;&#xFF0C;&#x6700;&#x7EC8;&#x5C06;&#x6392;&#x597D;&#x5E8F;&#x7684;&#x5B50;&#x96C6;&#x5408;&#x5408;&#x5E76;<br>&#x8BBE;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x7684;&#x5F53;&#x524D;&#x533A;&#x95F4;&#x4E3A;R[low&#x2026;high],&#x5206;&#x6CBB;&#x6CD5;&#x7684;&#x4E09;&#x4E2A;&#x6B65;&#x9AA4;&#xFF1A;<br>1&#x3001;&#x5206;&#x89E3; &#x5F53;&#x524D;&#x533A;&#x95F4;&#x4E00;&#x5206;&#x4E3A;&#x4E8C;<br>2&#x3001;&#x6C42;&#x89E3; &#x9012;&#x5F52;&#x5BF9;&#x4E24;&#x4E2A;&#x5B50;&#x533A;&#x95F4;R[low&#x2026;mid]&#x548C;R[mid+1&#x2026;high]<br>3&#x3001;&#x7EC4;&#x5408; &#x5C06;&#x5DF2;&#x6392;&#x5E8F;&#x7684;&#x4E24;&#x4E2A;&#x5B50;&#x533A;&#x95F4;R[low&#x2026;mid]&#x548C;R[mid+1&#x2026;high]&#x5408;&#x5E76;&#x4E3A;&#x4E00;&#x4E2A;&#x6709;&#x5E8F;&#x533A;&#x95F4;R[low&#x2026;high]<br>&#x9012;&#x5F52;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;&#xFF1A;&#x5B50;&#x533A;&#x95F4;&#x957F;&#x5EA6;&#x4E3A;1<br><img src="/2019/12/02/Merge-Sort/3.jpg" width="70%"><img src="/2019/12/02/Merge-Sort/2.jpg" width="80%"></li></ul><p>Mergesort&#x51FD;&#x6570;&#x5B9E;&#x73B0;&#x6B65;&#x9AA4;1&#x3001;2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void mergesort(int a[], int low, int high)</span><br><span class="line">{</span><br><span class="line">int middle = (low + high)/2;</span><br><span class="line">if(low&lt;high)</span><br><span class="line">{</span><br><span class="line">mergesort(a, low, middle);</span><br><span class="line">mergesort(a, middle+1, high);</span><br><span class="line">sort(a, low, middle, high);</span><br><span class="line">cout&lt;&lt;&quot; low: &quot;&lt;&lt;low&lt;&lt;&quot; middle: &quot;&lt;&lt;middle&lt;&lt;&quot; high: &quot;&lt;&lt;high&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>Sort&#x51FD;&#x6570;&#x5B9E;&#x73B0;&#x6B65;&#x9AA4;3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void sort(int a[], int low, int middle, int high)</span><br><span class="line">{</span><br><span class="line">int i = low, j = middle+1, k = 0;</span><br><span class="line">int *b= new int[high-low+1];</span><br><span class="line">while(i&lt;=middle &amp;&amp; j&lt;=high)</span><br><span class="line">{</span><br><span class="line">if(a[i] &lt;= a[j])</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">else</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">}</span><br><span class="line">while(i&lt;=middle)</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">while(j&lt;=high)</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">for(k=0,i=low; i&lt;=high; k++,i++)</span><br><span class="line">a[i] = b[k];</span><br><span class="line">delete []b;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x5B8C;&#x6574;&#x4EE3;&#x7801;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;new&gt; </span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void sort(int a[], int low, int middle, int high)</span><br><span class="line">{</span><br><span class="line">int i = low, j = middle+1, k = 0;</span><br><span class="line">int *b= new int[high-low+1];</span><br><span class="line">while(i&lt;=middle &amp;&amp; j&lt;=high)</span><br><span class="line">{</span><br><span class="line">if(a[i] &lt;= a[j])</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">else</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">}</span><br><span class="line">while(i&lt;=middle)</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">while(j&lt;=high)</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">for(k=0,i=low; i&lt;=high; k++,i++)</span><br><span class="line">a[i] = b[k];</span><br><span class="line">delete []b;</span><br><span class="line">}</span><br><span class="line">void mergesort(int a[], int low, int high)</span><br><span class="line">{</span><br><span class="line">int middle = (low + high)/2;</span><br><span class="line">if(low&lt;high)</span><br><span class="line">{</span><br><span class="line">mergesort(a, low, middle);</span><br><span class="line">mergesort(a, middle+1, high);</span><br><span class="line">sort(a, low, middle, high);</span><br><span class="line">cout&lt;&lt;&quot; low: &quot;&lt;&lt;low&lt;&lt;&quot; middle: &quot;&lt;&lt;middle&lt;&lt;&quot; high: &quot;&lt;&lt;high&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">int a[] = {2, 4, 7, 5, 8, 1, 3, 6};</span><br><span class="line">mergesort(a, 0, 7);</span><br><span class="line">for(int i=0; i&lt;8; i++)</span><br><span class="line">printf(&quot;%d &quot;, a[i]);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x975E;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;"><a href="#&#x975E;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;" class="headerlink" title="&#x975E;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;"></a>&#x975E;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;</h3><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5C06;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x76F8;&#x90BB;&#x5143;&#x7D20;&#x4E24;&#x4E24;&#x914D;&#x5BF9;&#xFF0C;&#x6784;&#x6210;((length-1)/2+1)&#x7EC4;&#x6392;&#x5E8F;&#x597D;&#x7684;&#x5B50;&#x6570;&#x7EC4;&#x6BB5;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x5408;&#x5E76;&#xFF08;(length-1&#xFF09;/4+1)&#x7EC4;&#x5B50;&#x6570;&#x7EC4;&#x6BB5;&#xFF0C;&#x76F4;&#x5230;&#x6574;&#x4E2A;&#x6570;&#x7EC4;&#x6392;&#x5E8F;&#x597D;</li></ul><img src="/2019/12/02/Merge-Sort/4.jpg" width="80%"><p>&#x4E0E;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x76F8;&#x6BD4;&#x4EC5;mergesort&#x51FD;&#x6570;&#x4E0D;&#x540C;<br>&#x4E3B;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x65F6;&#x6539;&#x4E3A;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mergesort(a, 8);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void mergesort(int a[], int length)</span><br><span class="line">{</span><br><span class="line">int low, middle, high, size = 1;</span><br><span class="line">while(size &lt; length-1)</span><br><span class="line">{</span><br><span class="line">low = 0;</span><br><span class="line">while(low+size &lt; length-1)</span><br><span class="line">{</span><br><span class="line">middle = low+size-1;</span><br><span class="line">high = middle+size;</span><br><span class="line">if(high&gt;length-1)</span><br><span class="line">high = length-1;</span><br><span class="line">sort(a, low, middle, high);</span><br><span class="line">cout&lt;&lt;&quot; low: &quot;&lt;&lt;low&lt;&lt;&quot; middle: &quot;&lt;&lt;middle&lt;&lt;&quot; high: &quot;&lt;&lt;high&lt;&lt;endl;</span><br><span class="line">low = high+1;</span><br><span class="line">}</span><br><span class="line">size *= 2;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="&#x81EA;&#x7136;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;"><a href="#&#x81EA;&#x7136;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;" class="headerlink" title="&#x81EA;&#x7136;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;"></a>&#x81EA;&#x7136;&#x6392;&#x5E8F;&#x5B9E;&#x73B0;&#x5F52;&#x5E76;&#x7B97;&#x6CD5;</h3><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x5BF9;&#x4E8E;&#x521D;&#x59CB;&#x6570;&#x7EC4;a&#xFF0C;&#x901A;&#x5E38;&#x5B58;&#x5728;&#x591A;&#x4E2A;&#x957F;&#x5EA6;&#x5927;&#x4E8E;1&#x7684;&#x5DF2;&#x6392;&#x597D;&#x5E8F;&#x7684;&#x5B50;&#x6570;&#x7EC4;&#x6BB5;&#xFF0C;&#x627E;&#x51FA;&#x8FD9;&#x6837;&#x7684;&#x5B50;&#x6570;&#x7EC4;&#x6BB5;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x76F8;&#x90BB;&#x7684;&#x6392;&#x597D;&#x5E8F;&#x7684;&#x5B50;&#x6570;&#x7EC4;&#x6BB5;&#x4E24;&#x4E24;&#x5408;&#x5E76;&#xFF0C;&#x76F4;&#x81F3;&#x6574;&#x4E2A;&#x6570;&#x7EC4;&#x6392;&#x597D;&#x5E8F;</li></ul><p>1.Mergepass&#x51FD;&#x6570;&#x5B9E;&#x65F6;&#x67E5;&#x8BE2;&#x6570;&#x7EC4;a&#x4E2D;&#x6709;&#x591A;&#x5C11;&#x7EC4;&#x6392;&#x597D;&#x5E8F;&#x7684;&#x5B50;&#x6570;&#x7EC4;<br>2.&#x5C06;&#x8FD4;&#x56DE;&#x503C;&#x4F20;&#x7ED9;Mergesort&#x51FD;&#x6570;&#xFF0C;&#x518D;&#x8FDB;&#x884C;&#x6709;&#x5E8F;&#x5B50;&#x5E8F;&#x5217;&#x7684;&#x5408;&#x5E76;<br>3.&#x5408;&#x5E76;&#x64CD;&#x4F5C;&#x8C03;&#x7528;Sort&#x51FD;&#x6570;</p><p>&#x5B8C;&#x6574;&#x4EE3;&#x7801;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;new&gt; </span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int s[100]; </span><br><span class="line">void Sort(int a[], int low, int middle, int high)</span><br><span class="line">{</span><br><span class="line">int i = low, j = middle+1, k = 0;</span><br><span class="line">int *b= new int[high-low+1];</span><br><span class="line">while(i&lt;=middle &amp;&amp; j&lt;=high)</span><br><span class="line">{</span><br><span class="line">if(a[i] &lt;= a[j])</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">else</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">}</span><br><span class="line">while(i&lt;=middle)</span><br><span class="line">b[k++] = a[i++];</span><br><span class="line">while(j&lt;=high)</span><br><span class="line">b[k++] = a[j++];</span><br><span class="line">for(k=0,i=low; i&lt;=high; k++,i++)</span><br><span class="line">a[i] = b[k];</span><br><span class="line">delete []b;</span><br><span class="line">}</span><br><span class="line">int Mergepass(int x[], int n)</span><br><span class="line">{</span><br><span class="line">int k=0;</span><br><span class="line">int begin = x[0];</span><br><span class="line">s[k++] = 0;</span><br><span class="line">for(int i=1; i&lt;n; i++)</span><br><span class="line">{</span><br><span class="line">if(x[i] &lt; begin)</span><br><span class="line">s[k++] = i;</span><br><span class="line">begin = x[i];</span><br><span class="line">}</span><br><span class="line">s[k++] = n;</span><br><span class="line">return k;</span><br><span class="line">}</span><br><span class="line">void Mergesort(int a[], int length)</span><br><span class="line">{</span><br><span class="line">int Num = Mergepass(a, length);//&#x8FD4;&#x56DE;&#x7684;&#x662F;&#x5B50;&#x6570;&#x7EC4;&#x6BB5;&#x4E2A;&#x6570;+1</span><br><span class="line">while(Num != 2)</span><br><span class="line">{</span><br><span class="line">for(int i=0; i+1&lt;Num; i+=2)</span><br><span class="line">Sort(a, s[i], s[i+1]-1, s[i+2]-1);</span><br><span class="line">//&#x5373;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#x5408;&#x5E76;&#x4E2D;&#x7684;Sort(a,low,middle,high)</span><br><span class="line">Num = Mergepass(a, length);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">int  main()</span><br><span class="line">{ </span><br><span class="line">  int num[] = {2, 4, 7, 5, 8, 1, 3, 6};    </span><br><span class="line">    Mergesort(num,8);   </span><br><span class="line">    for(int i=0;i&lt;8;i++)</span><br><span class="line">    cout&lt;&lt;num[i]&lt;&lt;&apos; &apos;;  </span><br><span class="line">cout&lt;&lt;endl;    </span><br><span class="line">    return 0;       </span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stack</title>
      <link href="/2019/12/01/Stack/"/>
      <url>/2019/12/01/Stack/</url>
      
        <content type="html"><![CDATA[<h2 id="&#x6808;"><a href="#&#x6808;" class="headerlink" title="&#x6808;"></a>&#x6808;</h2><h3 id="&#x6C42;&#x89E3;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;"><a href="#&#x6C42;&#x89E3;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;" class="headerlink" title="&#x6C42;&#x89E3;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;"></a>&#x6C42;&#x89E3;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;</h3><blockquote><p>&#x7528;&#x6237;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x5305;&#x542B;&#x201C;+&#x201D;&#x3001;&#x201C;-&#x201D;&#x3001;&#x201C;*&#x201D;&#x3001;&#x201C;/&#x201D;&#x3001;&#x6B63;&#x6574;&#x6570;&#x548C;&#x5706;&#x62EC;&#x53F7;&#x7684;&#x5408;&#x6CD5;&#x7B97;&#x672F;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x8BA1;&#x7B97;&#x8BE5;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x8FD0;&#x7B97;&#x7ED3;&#x679C;(&#x4FDD;&#x7559;&#x5C0F;&#x6570;&#x70B9;&#x540E;&#x4E00;&#x4F4D;).<br>Input  (56-20)/(4+2)<br>Output  6.0</p></blockquote><a id="more"></a><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>1.&#x4E2D;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#x8F6C;&#x5316;&#x4E3A;&#x540E;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;<br>2.&#x540E;&#x7F00;&#x8868;&#x793A;&#x5F0F;&#x6C42;&#x503C;<br>&#x5934;&#x6587;&#x4EF6;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">using namespace std;</span><br></pre></td></tr></table></figure></li></ul><p>&#x4E3B;&#x51FD;&#x6570;&#x4E2D;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#x5B58;&#x5165;&#x6570;&#x7EC4;exp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">char exp[100], postexp[100];</span><br><span class="line">scanf(&quot;%s&quot;, exp);</span><br><span class="line">printf(&quot;&#x4E2D;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#xFF1A;&quot;); </span><br><span class="line">printf(&quot;%s\n&quot;, exp);</span><br><span class="line">Trans(exp, postexp);</span><br><span class="line">printf(&quot;&#x540E;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#xFF1A;&quot;);</span><br><span class="line">printf(&quot;%s\n&quot;, postexp);</span><br><span class="line">printf(&quot;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;&#xFF1A;&quot;);</span><br><span class="line">printf(&quot;%.1f\n&quot;, Disp(postexp));</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>1.&#x51FD;&#x6570;Trans&#x5C06;&#x4E2D;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#x8F6C;&#x5316;&#x4E3A;&#x540E;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;<br>&#x5B9A;&#x4E49;char&#x7C7B;&#x578B;&#x6808;a&#xFF0C;&#x626B;&#x63CF;&#x5B57;&#x7B26;&#x4E32;exp<br>&#x53EA;&#x8BA9;&#x8FD0;&#x7B97;&#x7B26;&#x8FDB;&#x6808;&#xFF0C;&#x6570;&#x5B57;&#x5B57;&#x7B26;&#x5B58;&#x5165;&#x6570;&#x7EC4;postexp<br>&#x5BF9;&#x4E8E;&#x4E0D;&#x540C;&#x8FD0;&#x7B97;&#x7B26;<br>&#x2018;(&#x2019;&#xFF1A;&#x8FDB;&#x6808;<br>&#x2018;)&#x2019;&#xFF1A;&#x5C06;&#x6700;&#x540E;&#x8FDB;&#x5165;&#x7684;&#x2019;(&#x2019;&#x4E4B;&#x524D;&#x7684;&#x8FD0;&#x7B97;&#x7B26;&#x51FA;&#x6808;&#xFF0C;&#x5E76;&#x5B58;&#x653E;&#x5230;postexp&#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x2019;(&#x2019;&#x51FA;&#x6808;<br>&#x2018;+&#x2019;&#x3001;&#x2019;-&#x2019;&#xFF1A;&#x51FA;&#x6808;&#xFF0C;&#x8FD0;&#x7B97;&#x7B26;&#x5B58;&#x653E;&#x5230;postexp&#x4E2D;&#xFF0C;&#x76F4;&#x5230;&#x6808;&#x7A7A;&#x6216;&#x6808;&#x9876;&#x4E3A;&#x2019;(&#x2019;<br>&#x2018;*&#x2019;&#x3001;&#x2019;/&#x2019;&#xFF1A;&#x51FA;&#x6808;&#xFF0C;&#x8FD0;&#x7B97;&#x7B26;&#x5B58;&#x653E;&#x5230;postexp&#x4E2D;&#xFF0C;&#x76F4;&#x5230;&#x6808;&#x7A7A;&#x6216;&#x6808;&#x9876;&#x4E3A;&#x2019;(&#x2019;&#x3001;&#x2019;+&#x2019;&#x3001;&#x2019;-&#x2019;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">void Trans(char *exp, char postexp[])</span><br><span class="line">{</span><br><span class="line">char e;</span><br><span class="line">stack&lt;char&gt; a;</span><br><span class="line">int i=0;</span><br><span class="line">while(*exp!=&apos;\0&apos;)</span><br><span class="line">{</span><br><span class="line">switch(*exp)</span><br><span class="line">{</span><br><span class="line">case &apos;(&apos;: a.push(&apos;(&apos;); exp++; break;</span><br><span class="line">case &apos;)&apos;: e = a.top(); </span><br><span class="line">  a.pop();</span><br><span class="line">  while(e!=&apos;(&apos;)</span><br><span class="line">  {</span><br><span class="line">  postexp[i++] = e;</span><br><span class="line">  e = a.top(); a.pop();</span><br><span class="line">  }</span><br><span class="line">  exp++; break;</span><br><span class="line">case &apos;+&apos;: </span><br><span class="line">case &apos;-&apos;: while(!a.empty())</span><br><span class="line">  {</span><br><span class="line">  e = a.top();</span><br><span class="line">  if(e!=&apos;(&apos;)</span><br><span class="line">  {</span><br><span class="line">  postexp[i++] = e;</span><br><span class="line">  e = a.top(); a.pop();</span><br><span class="line">}</span><br><span class="line">else </span><br><span class="line">break;</span><br><span class="line">  }</span><br><span class="line">  a.push(*exp); exp++; break;  </span><br><span class="line">case &apos;*&apos;:</span><br><span class="line">case &apos;/&apos;: while(!a.empty())</span><br><span class="line">  {</span><br><span class="line">  e = a.top();</span><br><span class="line">  if(e==&apos;*&apos;||e==&apos;/&apos;)</span><br><span class="line">  {</span><br><span class="line">  postexp[i++] = e;</span><br><span class="line">  e = a.top();</span><br><span class="line">  }</span><br><span class="line">else</span><br><span class="line">break;</span><br><span class="line">  }</span><br><span class="line">  a.push(*exp); exp++; break;</span><br><span class="line">default :</span><br><span class="line">while(*exp&gt;=&apos;0&apos; &amp;&amp; *exp&lt;=&apos;9&apos;)    //&#x5C06;&#x8FDE;&#x7EED;&#x6570;&#x5B57;&#x5B57;&#x7B26;&#x5B58;&#x5165;&#x6570;&#x7EC4;postexp </span><br><span class="line">{</span><br><span class="line">postexp[i++] = *exp;</span><br><span class="line">*exp++;</span><br><span class="line">}</span><br><span class="line">postexp[i++] = &apos;#&apos;;//&#x8FDE;&#x7EED;&#x6570;&#x5B57;&#x5B57;&#x7B26;&#x540E;&#x52A0;&apos;#&apos;&#x4EE5;&#x6807;&#x8BB0; </span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">while(!a.empty())</span><br><span class="line">{</span><br><span class="line">e = a.top();</span><br><span class="line">a.pop();</span><br><span class="line">postexp[i++] = e;</span><br><span class="line">}</span><br><span class="line">postexp[i] = &apos;\0&apos;;      //&#x540E;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#x4EE5;&#x5B57;&#x7B26;&#x4E32;&#x5F62;&#x5F0F;&#x5B58;&#x653E; </span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>2.&#x51FD;&#x6570;Disp&#x8BA1;&#x7B97;&#x540E;&#x7F00;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;<br>&#x5B9A;&#x4E49;double&#x7C7B;&#x578B;&#x6808;opnd&#xFF0C;&#x626B;&#x63CF;&#x6570;&#x7EC4;postexp<br>&#x6570;&#x5B57;&#x5B57;&#x7B26;&#xFF1A;&#x8F6C;&#x5316;&#x4E3A;&#x6570;&#x503C;&#x5E76;&#x8FDB;&#x6808;<br>&#x8FD0;&#x7B97;&#x7B26;&#xFF1A;&#x9000;&#x6808;&#x4E24;&#x4E2A;&#x6570;&#xFF0C;&#x8BA1;&#x7B97;&#xFF0C;&#x5C06;&#x7ED3;&#x679C;&#x8FDB;&#x6808;<br>&#x626B;&#x63CF;&#x7ED3;&#x675F;&#xFF0C;&#x51FA;&#x6808;&#x7ED3;&#x679C;&#x5373;&#x4E3A;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">double Disp(char *postexp)</span><br><span class="line">{</span><br><span class="line">stack&lt;double&gt; opnd;</span><br><span class="line">double a, b, c, e, d;</span><br><span class="line">while(*postexp!=&apos;\0&apos;)</span><br><span class="line">{</span><br><span class="line">switch(*postexp)</span><br><span class="line">{</span><br><span class="line">case &apos;+&apos;: a = opnd.top(); opnd.pop();</span><br><span class="line">  b = opnd.top(); opnd.pop();</span><br><span class="line">  c = a+ b;</span><br><span class="line">  opnd.push(c);</span><br><span class="line">  break;</span><br><span class="line">case &apos;-&apos;: a = opnd.top(); opnd.pop();</span><br><span class="line">  b = opnd.top(); opnd.pop();</span><br><span class="line">  c = b-a;</span><br><span class="line">  opnd.push(c);</span><br><span class="line">  break;</span><br><span class="line">case &apos;*&apos;: a = opnd.top(); opnd.pop();</span><br><span class="line">  b = opnd.top(); opnd.pop();</span><br><span class="line">  c = a* b;</span><br><span class="line">  opnd.push(c);</span><br><span class="line">  break;</span><br><span class="line">case &apos;/&apos;: a = opnd.top(); opnd.pop();</span><br><span class="line">  b = opnd.top(); opnd.pop();</span><br><span class="line">  if(a)</span><br><span class="line">  {</span><br><span class="line">  c = (double)b/a;</span><br><span class="line">  opnd.push(c);</span><br><span class="line">  break;</span><br><span class="line">  }</span><br><span class="line">  else exit(0);</span><br><span class="line">    default:</span><br><span class="line">    d = 0;</span><br><span class="line">    while(*postexp&gt;=&apos;0&apos; &amp;&amp; *postexp&lt;=&apos;9&apos;)</span><br><span class="line">    {</span><br><span class="line">    d=10*d+*postexp-&apos;0&apos;;    //&#x8FDE;&#x7EED;&#x7684;&#x6570;&#x5B57;&#x5B57;&#x7B26;&#x8F6C;&#x5316;&#x4E3A;&#x6570;&#x503C;&#xFF0C;</span><br><span class="line">    postexp++;//&#x76F4;&#x5230;&#x9047;&#x5230;&apos;#&apos;&#x4E0D;&#x518D;&#x5FAA;&#x73AF;  </span><br><span class="line">}</span><br><span class="line">opnd.push(d);</span><br><span class="line">    break;</span><br><span class="line">}</span><br><span class="line">postexp++;</span><br><span class="line">e = opnd.top();</span><br><span class="line">}</span><br><span class="line">e = opnd.top();</span><br><span class="line">return e;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x8FD0;&#x884C;&#x7ED3;&#x679C;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br><img width="70%" src="/2019/12/01/Stack/1.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Queue</title>
      <link href="/2019/11/30/Queue-0/"/>
      <url>/2019/11/30/Queue-0/</url>
      
        <content type="html"><![CDATA[<h2 id="&#x5FAA;&#x73AF;&#x961F;&#x5217;"><a href="#&#x5FAA;&#x73AF;&#x961F;&#x5217;" class="headerlink" title="&#x5FAA;&#x73AF;&#x961F;&#x5217;"></a>&#x5FAA;&#x73AF;&#x961F;&#x5217;</h2><h3 id="&#x6C42;&#x89E3;&#x62A5;&#x6570;&#x95EE;&#x9898;"><a href="#&#x6C42;&#x89E3;&#x62A5;&#x6570;&#x95EE;&#x9898;" class="headerlink" title="&#x6C42;&#x89E3;&#x62A5;&#x6570;&#x95EE;&#x9898;"></a>&#x6C42;&#x89E3;&#x62A5;&#x6570;&#x95EE;&#x9898;</h3><blockquote><p>&#x8BBE;&#x6709;n&#x4E2A;&#x4EBA;&#x5360;&#x6210;&#x4E00;&#x6392;&#xFF0C;&#x4ECE;&#x5DE6;&#x5411;&#x53F3;&#x7684;&#x7F16;&#x53F7;&#x5206;&#x522B;&#x4E3A;1~n&#xFF0C;&#x73B0;&#x5728;&#x4ECE;&#x5DE6;&#x5F80;&#x53F3;&#x62A5;&#x6570;&#x201C;1&#xFF0C;2&#xFF0C;1&#xFF0C;2&#x2026;&#x2026;&#x201D;&#xFF0C;&#x6570;&#x5230;&#x201C;1&#x201D;&#x7684;&#x4EBA;&#x51FA;&#x5217;&#xFF0C;&#x6570;&#x5230;&#x201C;2&#x201D;&#x7684;&#x4EBA;&#x7AD9;&#x5230;&#x961F;&#x5217;&#x7684;&#x6700;&#x53F3;&#x7AEF;&#x3002;<a id="more"></a><font size="5">&#x62A5;&#x6570;&#x8FC7;&#x7A0B;&#x53CD;&#x590D;&#x8FDB;&#x884C;&#xFF0C;&#x76F4;&#x5230;n&#x4E2A;&#x4EBA;&#x90FD;&#x51FA;&#x961F;&#x5217;&#x4E3A;&#x6B62;&#x3002;</font>&#x8981;&#x6C42;&#x7ED9;&#x51FA;&#x4ED6;&#x4EEC;&#x7684;&#x51FA;&#x5217;&#x987A;&#x5E8F;&#x3002;<br>&#x4F8B;&#x5982;&#xFF0C;&#x5F53;n=8&#x65F6;&#x7684;&#x521D;&#x59CB;&#x5E8F;&#x5217;&#x4E3A;&#xFF1A;<br>1 2 3 4 5 6 7 8<br>&#x5219;&#x51FA;&#x5217;&#x987A;&#x5E8F;&#xFF1A;<br>1 3 5 7 2 6 4 8</p><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>&#x91C7;&#x7528;&#x73AF;&#x5F62;&#x961F;&#x5217;&#xFF0C;&#x505A;&#x5982;&#x4E0B;&#x64CD;&#x4F5C;&#xFF1A;<br>1.&#x51FA;&#x961F;&#x4E00;&#x4E2A;&#x5143;&#x7D20;(&#x62A5;&#x6570;&#x4E3A;1&#x7684;&#x4EBA;)&#xFF0C;&#x8F93;&#x51FA;&#x5176;&#x7F16;&#x53F7;<br>2.&#x82E5;&#x961F;&#x5217;&#x4E0D;&#x7A7A;&#xFF0C;&#x51FA;&#x961F;&#x4E00;&#x4E2A;&#x5143;&#x7D20;(&#x62A5;&#x6570;&#x4E3A;2&#x7684;&#x4EBA;)&#xFF0C;&#x518D;&#x8BA9;&#x5176;&#x5165;&#x961F;</li></ul></blockquote><p>&#x5FAA;&#x73AF;&#x961F;&#x5217;&#x521B;&#x5EFA;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">typedef struct queue Queue;</span><br><span class="line">struct queue</span><br><span class="line">{</span><br><span class="line">int data[Maxsize];</span><br><span class="line">int front;</span><br><span class="line">int rear;</span><br><span class="line">};</span><br><span class="line">bool Full(Queue *L)            //&#x5224;&#x6EE1;</span><br><span class="line">{</span><br><span class="line">return ((L-&gt;rear+1)%Maxsize == L-&gt;front);</span><br><span class="line">}</span><br><span class="line">bool Empty(Queue *L)           //&#x5224;&#x7A7A;</span><br><span class="line">{</span><br><span class="line">return (L-&gt;front == L-&gt;rear);</span><br><span class="line">}</span><br><span class="line">void Enqueue(Queue *L, int e)   //&#x5165;&#x961F;</span><br><span class="line">{</span><br><span class="line">if(!Full(L))</span><br><span class="line">{</span><br><span class="line">L-&gt;rear = (L-&gt;rear+1)%Maxsize;</span><br><span class="line">L-&gt;data[L-&gt;rear] = e;</span><br><span class="line">}</span><br><span class="line">else</span><br><span class="line">exit(0);</span><br><span class="line">}</span><br><span class="line">void Dequeue(Queue *L,int *e)   //&#x51FA;&#x961F;</span><br><span class="line">{</span><br><span class="line">L-&gt;front = (L-&gt;front+1)%Maxsize;</span><br><span class="line">*e = L-&gt;data[L-&gt;front];</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x4E3B;&#x51FD;&#x6570;&#x8F93;&#x51FA;&#x961F;&#x5217;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">Queue *L = (Queue *)malloc(sizeof(Queue));</span><br><span class="line">L-&gt;front = L-&gt;rear = 0;</span><br><span class="line">int a[] = {1, 2, 3, 4, 5, 6, 7, 8}, e;</span><br><span class="line">for(int i=0; i&lt;8; i++)</span><br><span class="line">Enqueue(L,a[i]);</span><br><span class="line">while(!Empty(L))        //&#x62A5;&#x6570;&#x4E3A;1&#x7684;&#x4EBA;&#x51FA;&#x961F;</span><br><span class="line">{</span><br><span class="line">Dequeue(L,&amp;e);</span><br><span class="line">printf(&quot;%d &quot;,e);</span><br><span class="line">if(!Empty(L))   //&#x975E;&#x7A7A;&#xFF0C;&#x62A5;&#x6570;&#x4E3A;2&#x7684;&#x4EBA;&#x51FA;&#x961F;&#x518D;&#x5165;&#x961F;</span><br><span class="line">{</span><br><span class="line">Dequeue(L,&amp;e);</span><br><span class="line">Enqueue(L, e);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">    return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x8FD0;&#x884C;&#x7ED3;&#x679C;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br><img width="50%" src="/2019/11/30/Queue-0/1.jpg"></p><hr><p>&#x8D77;&#x521D;&#x4EE5;&#x4E3A;&#x62A5;&#x6570;&#x95EE;&#x9898;&#x5C31;&#x662F;&#x65E5;&#x5E38;&#x7684;&#x62A5;&#x6570;&#xFF0C;1~n&#x62A5;&#x5B8C;&#x540E;&#x5C31;&#x7ED3;&#x675F;&#xFF0C;&#x8BEF;&#x8BA4;&#x4E3A;&#x8F93;&#x51FA;&#x961F;&#x5217;&#x987A;&#x5E8F;&#x662F;&#xFF1A;<br>1 3 5 7 2 4 6 8</p><ul><li><strong>&#x9519;&#x89E3;</strong><br>&#x521B;&#x5EFA;&#x957F;&#x5EA6;&#x4E3A;N(N=9)&#x7684;&#x5FAA;&#x73AF;&#x961F;&#x5217;&#xFF0C;&#x4F7F;&#x961F;&#x5217;&#x5DF2;&#x6EE1;&#x3002;<br>1~n&#x62A5;&#x5B8C;&#x5373;&#xFF08;L-&gt;rear==N/2-1&#xFF09;&#x6210;&#x7ACB;&#xFF0C;&#x518D;&#x51FA;&#x961F;&#x76F4;&#x81F3;&#x961F;&#x5217;&#x4E3A;&#x7A7A;</li></ul><img width="100%" src="/2019/11/30/Queue-0/2.jpg"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">while(!Empty(L))</span><br><span class="line">{</span><br><span class="line">if(L-&gt;rear == (Maxsize)/2-1)</span><br><span class="line">{</span><br><span class="line">Dequeue(L,&amp;e);</span><br><span class="line">printf(&quot;\n%d &quot;, e);</span><br><span class="line">}</span><br><span class="line">else</span><br><span class="line">{</span><br><span class="line">printf(&quot;%d &quot;, e);</span><br><span class="line">if(!Empty(L))</span><br><span class="line">{</span><br><span class="line">Dequeue(L, &amp;e);</span><br><span class="line">Enqueue(L, e);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lnode</title>
      <link href="/2019/10/26/Lnode/"/>
      <url>/2019/10/26/Lnode/</url>
      
        <content type="html"><![CDATA[<h2 id="&#x94FE;&#x8868;"><a href="#&#x94FE;&#x8868;" class="headerlink" title="&#x94FE;&#x8868;"></a>&#x94FE;&#x8868;</h2><h3 id="1-&#x5355;&#x94FE;&#x8868;&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x4E8C;&#x4E2A;&#x5355;&#x94FE;&#x8868;"><a href="#1-&#x5355;&#x94FE;&#x8868;&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x4E8C;&#x4E2A;&#x5355;&#x94FE;&#x8868;" class="headerlink" title="1.&#x5355;&#x94FE;&#x8868;&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x4E8C;&#x4E2A;&#x5355;&#x94FE;&#x8868;"></a>1.&#x5355;&#x94FE;&#x8868;&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x4E8C;&#x4E2A;&#x5355;&#x94FE;&#x8868;</h3><blockquote><p>&#x8981;&#x6C42;&#xFF1A;&#x5C06;&#x4E00;&#x4E2A;&#x5E26;&#x5934;&#x7ED3;&#x70B9;&#x7684;&#x5355;&#x94FE;&#x8868;<br>L=(a1, b1, a2, b2, &#x2026;, an, bn)&#x62C6;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x5E26;&#x5934;&#x7ED3;&#x70B9;&#x7684;&#x5355;&#x94FE;&#x8868;L1&#x548C;L2&#xFF0C;L1=(a1, a2,&#x2026;,an), L2 = (bn, bn-1, &#x2026;,b1). </p></blockquote><a id="more"></a><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>split&#x51FD;&#x6570;&#x5B9E;&#x73B0;&#x62C6;&#x5206;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void Split(Lnode *L, Lnode *L1, Lnode *L2)</span><br><span class="line">{</span><br><span class="line">    Lnode *p = L-&gt;next, *q, *r;</span><br><span class="line">    r = L1; </span><br><span class="line">    while(p)            //&#x5C3E;&#x63D2;&#x6CD5;&#x5F97;L1&#xFF0C;&#x5934;&#x63D2;&#x6CD5;&#x5F97;L2 </span><br><span class="line">    {</span><br><span class="line">    r-&gt;next = p; // &#x5C06;p(valude&#x503C;&#x4E3A;ai)&#x63D2;&#x5165;L1 </span><br><span class="line">    r = p;</span><br><span class="line">    p = p-&gt;next; //p&#x79FB;&#x5230;&#x4E0B;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;(value&#x503C;&#x4E3A;bi) </span><br><span class="line">    q = p-&gt;next;//&#x5934;&#x63D2;&#x6CD5;&#x4F1A;&#x4FEE;&#x6539;p&#x7684;next&#x57DF;&#xFF0C;&#x7528;q&#x4FDD;&#x5B58;p&#x7684;&#x540E;&#x7EE7;&#x7ED3;&#x70B9; </span><br><span class="line">    p-&gt;next = L2-&gt;next;   </span><br><span class="line">    L2-&gt;next = p;</span><br><span class="line">    p = q;    //p&#x91CD;&#x65B0;&#x6307;&#x5411;ai+1&#x7684;&#x7ED3;&#x70B9; </span><br><span class="line">   }</span><br><span class="line">    r-&gt;next = NULL; </span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><p>DispList&#x51FD;&#x6570;&#x8F93;&#x51FA;&#x5355;&#x94FE;&#x8868;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void DispList(Lnode *L)</span><br><span class="line">{</span><br><span class="line">    Lnode *p = L-&gt;next;</span><br><span class="line">    while(p)</span><br><span class="line">    {</span><br><span class="line">    printf(&quot;%d &quot;, p-&gt;value);</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">}</span><br><span class="line">   printf(&quot;\n&quot;);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x5B8C;&#x6574;&#x4EE3;&#x7801;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct lnode Lnode;</span><br><span class="line">struct lnode</span><br><span class="line">{</span><br><span class="line">int value;</span><br><span class="line">Lnode *next;</span><br><span class="line">};</span><br><span class="line">void Split(Lnode *L, Lnode *L1, Lnode *L2)</span><br><span class="line">{</span><br><span class="line">Lnode *p = L-&gt;next, *q, *r;</span><br><span class="line">r = L1; </span><br><span class="line">while(p)            //&#x5C3E;&#x63D2;&#x6CD5;&#x5F97;L1&#xFF0C;&#x5934;&#x63D2;&#x6CD5;&#x5F97;L2 </span><br><span class="line">{</span><br><span class="line">r-&gt;next = p; // &#x5C06;p(valude&#x503C;&#x4E3A;ai)&#x63D2;&#x5165;L1 </span><br><span class="line">r = p;</span><br><span class="line">p = p-&gt;next; //p&#x79FB;&#x5230;&#x4E0B;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;(value&#x503C;&#x4E3A;bi) </span><br><span class="line">q = p-&gt;next;//&#x5934;&#x63D2;&#x6CD5;&#x4F1A;&#x4FEE;&#x6539;p&#x7684;next&#x57DF;&#xFF0C;&#x7528;q&#x4FDD;&#x5B58;p&#x7684;&#x540E;&#x7EE7;&#x7ED3;&#x70B9; </span><br><span class="line">p-&gt;next = L2-&gt;next;   </span><br><span class="line">L2-&gt;next = p;</span><br><span class="line">p = q;    //p&#x91CD;&#x65B0;&#x6307;&#x5411;ai+1&#x7684;&#x7ED3;&#x70B9; </span><br><span class="line">}</span><br><span class="line">r-&gt;next = NULL; </span><br><span class="line">}</span><br><span class="line">void DispList(Lnode *L)</span><br><span class="line">{</span><br><span class="line">Lnode *p = L-&gt;next;</span><br><span class="line">while(p)</span><br><span class="line">{</span><br><span class="line">printf(&quot;%d &quot;, p-&gt;value);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">}</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">}</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">Lnode *L = (Lnode *)malloc(sizeof(Lnode)), </span><br><span class="line">*L1 = (Lnode *)malloc(sizeof(Lnode)), </span><br><span class="line">*L2 = (Lnode *)malloc(sizeof(Lnode));</span><br><span class="line">L-&gt;next = NULL;</span><br><span class="line">L1-&gt;next = NULL;</span><br><span class="line">L2-&gt;next = NULL;</span><br><span class="line">Lnode *current = L;</span><br><span class="line">int i = 0;</span><br><span class="line">while(i&lt;1)</span><br><span class="line">{</span><br><span class="line">Lnode *p = (Lnode *)malloc(sizeof(Lnode));</span><br><span class="line">scanf(&quot;%d&quot;, &amp;p-&gt;value);</span><br><span class="line">current-&gt;next = p;</span><br><span class="line">current = p;</span><br><span class="line">if(getchar() == &apos;\n&apos;)</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line">current-&gt;next = NULL;</span><br><span class="line">Split(L, L1, L2);</span><br><span class="line">DispList(L1);</span><br><span class="line">DispList(L2);</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x8FD0;&#x884C;&#x7ED3;&#x679C;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<br><img width="60%" src="/2019/10/26/Lnode/Lnode1.jpg"></p><h3 id="2-&#x5224;&#x65AD;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E2D;&#x6570;&#x636E;&#x7ED3;&#x70B9;-&#x542B;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x7ED3;&#x70B9;-&#x662F;&#x5426;&#x5BF9;&#x79F0;"><a href="#2-&#x5224;&#x65AD;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E2D;&#x6570;&#x636E;&#x7ED3;&#x70B9;-&#x542B;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x7ED3;&#x70B9;-&#x662F;&#x5426;&#x5BF9;&#x79F0;" class="headerlink" title="2.&#x5224;&#x65AD;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E2D;&#x6570;&#x636E;&#x7ED3;&#x70B9;(&#x542B;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x7ED3;&#x70B9;)&#x662F;&#x5426;&#x5BF9;&#x79F0;"></a>2.&#x5224;&#x65AD;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E2D;&#x6570;&#x636E;&#x7ED3;&#x70B9;(&#x542B;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x7ED3;&#x70B9;)&#x662F;&#x5426;&#x5BF9;&#x79F0;</h3><ul><li><strong>&#x7B97;&#x6CD5;&#x601D;&#x60F3;</strong><br>  P&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x626B;&#x63CF;L&#xFF0C;q&#x4ECE;&#x53F3;&#x5230;&#x5DE6;&#x626B;&#x63CF;L&#xFF0C;&#x7136;&#x540E;&#x5FAA;&#x73AF;&#xFF0C;&#x76F4;&#x5230;p=q  &#x6216; p=q-&gt;prior.<br>  IsSymm&#x51FD;&#x6570;&#x626B;&#x63CF;L.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int IsSymm(DLnode *L)</span><br><span class="line">{</span><br><span class="line">DLnode *p = L-&gt;next;//p&#x6307;&#x5411;&#x9996;&#x7ED3;&#x70B9;</span><br><span class="line">DLnode *q = L-&gt;prior;//q&#x6307;&#x5411;&#x5C3E;&#x7ED3;&#x70B9; </span><br><span class="line">while(p-&gt;value == q-&gt;value)    //&#x5F53;&#x7ED3;&#x70B9;&#x503C;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x9000;&#x51FA;&#x5FAA;&#x73AF; </span><br><span class="line">{</span><br><span class="line">    if(p==q || p-&gt;prior == q)  //&#x7ED3;&#x70B9;&#x6570;&#x4E3A;&#x5947;&#x6570;||&#x7ED3;&#x70B9;&#x6570;&#x4E3A;&#x5076;&#x6570; </span><br><span class="line">return 1;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q = q-&gt;prior;</span><br><span class="line">}</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x5B8C;&#x6574;&#x4EE3;&#x7801;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct Dlnode DLnode;</span><br><span class="line">struct Dlnode</span><br><span class="line">{</span><br><span class="line">int value;</span><br><span class="line">DLnode *prior;</span><br><span class="line">DLnode *next;</span><br><span class="line">};</span><br><span class="line">int IsSymm(DLnode *L)</span><br><span class="line">{</span><br><span class="line">DLnode *p = L-&gt;next;//p&#x6307;&#x5411;&#x9996;&#x7ED3;&#x70B9;</span><br><span class="line">DLnode *q = L-&gt;prior;//q&#x6307;&#x5411;&#x5C3E;&#x7ED3;&#x70B9; </span><br><span class="line">while(p-&gt;value == q-&gt;value)    //&#x5F53;&#x7ED3;&#x70B9;&#x503C;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x9000;&#x51FA;&#x5FAA;&#x73AF; </span><br><span class="line">{</span><br><span class="line">    if(p==q || p-&gt;prior == q)  //&#x7ED3;&#x70B9;&#x6570;&#x4E3A;&#x5947;&#x6570;||&#x7ED3;&#x70B9;&#x6570;&#x4E3A;&#x5076;&#x6570; </span><br><span class="line">return 1;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q = q-&gt;prior;</span><br><span class="line">}</span><br><span class="line">return 0;</span><br><span class="line">}</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">DLnode *L = (DLnode *)malloc(sizeof(DLnode));</span><br><span class="line">L-&gt;next = L-&gt;prior = NULL;</span><br><span class="line">int i = 0;</span><br><span class="line">DLnode *r = L, *p; </span><br><span class="line">while(i&lt;1)</span><br><span class="line">{</span><br><span class="line">p = (DLnode *)malloc(sizeof(DLnode));</span><br><span class="line">scanf(&quot;%d&quot;, &amp;p-&gt;value);</span><br><span class="line">r-&gt;next = p;</span><br><span class="line">p-&gt;prior = r;       // &#x53CC;&#x94FE;&#x8868;&#x5C3E;&#x63D2;&#x6CD5;&#x5B58;&#x5165;L </span><br><span class="line">r = p;                    </span><br><span class="line">if(getchar() == &apos;\n&apos;)</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line">r-&gt;next = L;</span><br><span class="line">L-&gt;prior = r;</span><br><span class="line">if(IsSymm(L))</span><br><span class="line">printf(&quot;&#x8BE5;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x5BF9;&#x79F0;\n&quot;);</span><br><span class="line">else</span><br><span class="line">printf(&quot;&#x8BE5;&#x5FAA;&#x73AF;&#x53CC;&#x94FE;&#x8868;&#x4E0D;&#x5BF9;&#x79F0;\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;<strong>&#x8FD0;&#x884C;&#x7ED3;&#x679C;</strong>&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;</p><img width="60%" src="/2019/10/26/Lnode/Lnode2.jpg">]]></content>
      
      
      
        <tags>
            
            <tag> 链式存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hey-piggy</title>
      <link href="/2019/10/26/hey-piggy/"/>
      <url>/2019/10/26/hey-piggy/</url>
      
        <content type="html"><![CDATA[<p>Nothing is impossble for a willing heart!</p><a id="more"></a><img src="/2019/10/26/hey-piggy/1.jpg" width="50%">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
